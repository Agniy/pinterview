"""
üî¥ –ú–ï–¢–ê–ö–õ–ê–°–°–´ - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –ú–µ—Ç–∞–∫–ª–∞—Å—Å—ã –∏ type
- __new__ –∏ __init__ –º–µ—Ç–∞–∫–ª–∞—Å—Å–æ–≤
- __init_subclass__
- ABCMeta
"""


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–∞–∫–ª–∞—Å—Å?
A: –ö–ª–∞—Å—Å –∫–ª–∞—Å—Å–∞. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞, –∫–∞–∫ –∫–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤.

Q2: –ö–∞–∫–æ–π –º–µ—Ç–∞–∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?
A: type

Q3: –ó–∞—á–µ–º –Ω—É–∂–Ω—ã –º–µ—Ç–∞–∫–ª–∞—Å—Å—ã?
A:
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
- –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞
- API frameworks (Django ORM, SQLAlchemy)

Q4: –ö–æ–≥–¥–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞–∫–ª–∞—Å—Å—ã?
A: –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞! –ï—Å—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∫–ª–∞—Å—Å–æ–≤
- __init_subclass__
- –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã

Q5: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ type?
A: type(name, bases, dict)
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ type
# ============================================================================

def demo_type_creation():
    """
    üü° Middle level
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ type
    """
    
    # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–±
    class MyClass:
        x = 10
        
        def method(self):
            return "Hello"
    
    # –ß–µ—Ä–µ–∑ type
    MyClassDynamic = type(
        'MyClassDynamic',
        (),
        {
            'x': 10,
            'method': lambda self: "Hello"
        }
    )
    
    print("–ö–ª–∞—Å—Å —á–µ—Ä–µ–∑ type:")
    obj = MyClassDynamic()
    print(f"  obj.x = {obj.x}")
    print(f"  obj.method() = {obj.method()}")
    print(f"  type(obj) = {type(obj)}")
    print(f"  type(MyClassDynamic) = {type(MyClassDynamic)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–∞–∫–ª–∞—Å—Å
# ============================================================================

class SimpleMeta(type):
    """
    üü° Middle level
    –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–∞–∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞
    """
    
    def __new__(mcs, name, bases, attrs):
        print(f"–°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å: {name}")
        print(f"  –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã: {bases}")
        print(f"  –ê—Ç—Ä–∏–±—É—Ç—ã: {list(attrs.keys())}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å
        cls = super().__new__(mcs, name, bases, attrs)
        return cls


class MyClass(metaclass=SimpleMeta):
    """–ö–ª–∞—Å—Å —Å –º–µ—Ç–∞–∫–ª–∞—Å—Å–æ–º"""
    x = 10
    
    def method(self):
        return "test"


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ú–µ—Ç–∞–∫–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
# ============================================================================

class ValidatedMeta(type):
    """
    üî¥ Senior level
    –ú–µ—Ç–∞–∫–ª–∞—Å—Å, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    """
    
    def __new__(mcs, name, bases, attrs):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        if name == 'ValidatedBase':
            return super().__new__(mcs, name, bases, attrs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ required –º–µ—Ç–æ–¥–æ–≤
        required_methods = attrs.get('_required_methods', [])
        
        for method_name in required_methods:
            if method_name not in attrs:
                raise TypeError(
                    f"–ö–ª–∞—Å—Å {name} –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ {method_name}"
                )
        
        return super().__new__(mcs, name, bases, attrs)


class ValidatedBase(metaclass=ValidatedMeta):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    _required_methods = []


class Plugin(ValidatedBase):
    """–ü–ª–∞–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥—ã initialize –∏ execute"""
    _required_methods = ['initialize', 'execute']
    
    def initialize(self):
        print("Plugin initialized")
    
    def execute(self):
        print("Plugin executed")


def demo_validation():
    print("\n–ú–µ—Ç–∞–∫–ª–∞—Å—Å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π:")
    plugin = Plugin()
    plugin.initialize()
    plugin.execute()
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª–∞—Å—Å
    try:
        class InvalidPlugin(ValidatedBase):
            _required_methods = ['required_method']
            pass
    except TypeError as e:
        print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: Singleton —á–µ—Ä–µ–∑ –º–µ—Ç–∞–∫–ª–∞—Å—Å
# ============================================================================

class SingletonMeta(type):
    """
    üî¥ Senior level
    –ú–µ—Ç–∞–∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton
    """
    
    _instances = {}
    
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super().__call__(*args, **kwargs)
        return cls._instances[cls]


class Database(metaclass=SingletonMeta):
    """–ö–ª–∞—Å—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–∏–Ω–≥–ª—Ç–æ–Ω"""
    
    def __init__(self):
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Database")
        self.connection = "DB Connection"


def demo_singleton():
    print("\nSingleton —á–µ—Ä–µ–∑ –º–µ—Ç–∞–∫–ª–∞—Å—Å:")
    db1 = Database()
    db2 = Database()
    
    print(f"db1 is db2: {db1 is db2}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
# ============================================================================

class RegistryMeta(type):
    """
    üî¥ Senior level
    –ú–µ—Ç–∞–∫–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤
    """
    
    registry = {}
    
    def __new__(mcs, name, bases, attrs):
        cls = super().__new__(mcs, name, bases, attrs)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if 'registry_name' in attrs:
            mcs.registry[attrs['registry_name']] = cls
        
        return cls


class Command(metaclass=RegistryMeta):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥—ã"""
    pass


class StartCommand(Command):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞"""
    registry_name = 'start'
    
    def execute(self):
        return "Starting..."


class StopCommand(Command):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    registry_name = 'stop'
    
    def execute(self):
        return "Stopping..."


def demo_registry():
    print("\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:")
    print(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {list(RegistryMeta.registry.keys())}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ –∏–º–µ–Ω–∏
    start_cmd = RegistryMeta.registry['start']()
    print(f"start: {start_cmd.execute()}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: __init_subclass__ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –º–µ—Ç–∞–∫–ª–∞—Å—Å–∞–º)
# ============================================================================

class PluginBase:
    """
    üü° Middle level
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ __init_subclass__ –≤–º–µ—Å—Ç–æ –º–µ—Ç–∞–∫–ª–∞—Å—Å–∞
    """
    
    plugins = {}
    
    def __init_subclass__(cls, plugin_name=None, **kwargs):
        super().__init_subclass__(**kwargs)
        if plugin_name:
            cls.plugins[plugin_name] = cls


class ImagePlugin(PluginBase, plugin_name='image'):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def process(self):
        return "Processing image"


class VideoPlugin(PluginBase, plugin_name='video'):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è –≤–∏–¥–µ–æ"""
    
    def process(self):
        return "Processing video"


def demo_init_subclass():
    print("\n__init_subclass__ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –º–µ—Ç–∞–∫–ª–∞—Å—Å–∞–º):")
    print(f"–ü–ª–∞–≥–∏–Ω—ã: {list(PluginBase.plugins.keys())}")
    
    for name, plugin_cls in PluginBase.plugins.items():
        plugin = plugin_cls()
        print(f"  {name}: {plugin.process()}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –ú–µ—Ç–∞–∫–ª–∞—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
# ============================================================================

class AttributeAdderMeta(type):
    """
    üü° Middle level
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º
    """
    
    def __new__(mcs, name, bases, attrs):
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp —Å–æ–∑–¥–∞–Ω–∏—è
        import time
        attrs['_created_at'] = time.time()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
        def get_methods(self):
            return [m for m in dir(self) if not m.startswith('_')]
        
        attrs['get_methods'] = get_methods
        
        return super().__new__(mcs, name, bases, attrs)


class MyService(metaclass=AttributeAdderMeta):
    """–°–µ—Ä–≤–∏—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏"""
    
    def start(self):
        pass
    
    def stop(self):
        pass


def demo_attribute_adder():
    print("\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —á–µ—Ä–µ–∑ –º–µ—Ç–∞–∫–ª–∞—Å—Å:")
    service = MyService()
    
    print(f"–°–æ–∑–¥–∞–Ω –≤: {service._created_at}")
    print(f"–ú–µ—Ç–æ–¥—ã: {service.get_methods()}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ú–µ—Ç–∞–∫–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================

class LoggingMeta(type):
    """
    üî¥ Senior level
    –ú–µ—Ç–∞–∫–ª–∞—Å—Å, –¥–æ–±–∞–≤–ª—è—é—â–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º
    """
    
    def __new__(mcs, name, bases, attrs):
        for attr_name, attr_value in attrs.items():
            if callable(attr_value) and not attr_name.startswith('_'):
                attrs[attr_name] = mcs.log_method(attr_value)
        
        return super().__new__(mcs, name, bases, attrs)
    
    @staticmethod
    def log_method(method):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        def wrapper(*args, **kwargs):
            print(f"–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞: {method.__name__}")
            result = method(*args, **kwargs)
            print(f"–ú–µ—Ç–æ–¥ {method.__name__} –≤–µ—Ä–Ω—É–ª: {result}")
            return result
        return wrapper


class Calculator(metaclass=LoggingMeta):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def add(self, a, b):
        return a + b
    
    def multiply(self, a, b):
        return a * b


def demo_logging():
    print("\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    calc = Calculator()
    calc.add(2, 3)
    calc.multiply(4, 5)


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: ABCMeta (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã)
# ============================================================================

from abc import ABCMeta, abstractmethod

class Shape(metaclass=ABCMeta):
    """
    üü° Middle level
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ ABCMeta
    """
    
    @abstractmethod
    def area(self):
        """–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö"""
        pass
    
    @abstractmethod
    def perimeter(self):
        """–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö"""
        pass


class Rectangle(Shape):
    """–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫"""
    
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height
    
    def perimeter(self):
        return 2 * (self.width + self.height)


def demo_abc():
    print("\nABCMeta (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã):")
    
    # –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    try:
        shape = Shape()
    except TypeError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    # –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∞—Å—Å
    rect = Rectangle(5, 3)
    print(f"–ü–ª–æ—â–∞–¥—å: {rect.area()}")
    print(f"–ü–µ—Ä–∏–º–µ—Ç—Ä: {rect.perimeter()}")


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ú–ï–¢–ê–ö–õ–ê–°–°–´ - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ type
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ type:")
    demo_type_creation()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–∞–∫–ª–∞—Å—Å
    print("\n2. –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–∞–∫–ª–∞—Å—Å:")
    print("(–≤—ã–≤–æ–¥ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ MyClass –≤—ã—à–µ)")
    
    # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è
    demo_validation()
    
    # –¢–µ—Å—Ç 4: Singleton
    demo_singleton()
    
    # –¢–µ—Å—Ç 5: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    demo_registry()
    
    # –¢–µ—Å—Ç 6: __init_subclass__
    demo_init_subclass()
    
    # –¢–µ—Å—Ç 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    demo_attribute_adder()
    
    # –¢–µ—Å—Ç 8: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    demo_logging()
    
    # –¢–µ—Å—Ç 9: ABCMeta
    demo_abc()
    
    print("\n" + "=" * 60)
    print("\n–í–ê–ñ–ù–û: –ú–µ—Ç–∞–∫–ª–∞—Å—Å—ã - –º–æ—â–Ω—ã–π, –Ω–æ —Å–ª–æ–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.")
    print("–í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
    print("  - –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∫–ª–∞—Å—Å–æ–≤")
    print("  - __init_subclass__")
    print("  - –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã")
    print("=" * 60)

