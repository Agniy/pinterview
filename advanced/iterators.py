"""
üî¥ –ò–¢–ï–†–ê–¢–û–†–´ –ò –ò–¢–ï–†–ò–†–£–ï–ú–´–ï –û–ë–™–ï–ö–¢–´ - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –ü—Ä–æ—Ç–æ–∫–æ–ª –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
- __iter__ –∏ __next__
- StopIteration
- itertools
"""

import itertools


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º?
A:
- –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π (iterable): –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º __iter__(), –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä
- –ò—Ç–µ—Ä–∞—Ç–æ—Ä (iterator): –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º __next__() –∏ __iter__() (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç self)

Q2: –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞?
A: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ __iter__() –∏ __next__()

Q3: –ß—Ç–æ —Ç–∞–∫–æ–µ StopIteration?
A: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

Q4: –ú–æ–∂–Ω–æ –ª–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ?
A: –ù–µ—Ç, –∏—Ç–µ—Ä–∞—Ç–æ—Ä –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –ü—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
# ============================================================================

class CountUp:
    """
    üü° Middle level
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä, —Å—á–∏—Ç–∞—é—â–∏–π –æ—Ç start –¥–æ end
    """
    
    def __init__(self, start, end):
        self.current = start
        self.end = end
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.current > self.end:
            raise StopIteration
        
        value = self.current
        self.current += 1
        return value


def demo_count_up():
    print("–ò—Ç–µ—Ä–∞—Ç–æ—Ä CountUp:")
    for num in CountUp(1, 5):
        print(num, end=' ')
    print()


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ò—Ç–µ—Ä–∞—Ç–æ—Ä –§–∏–±–æ–Ω–∞—á—á–∏
# ============================================================================

class FibonacciIterator:
    """
    üü° Middle level
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
    """
    
    def __init__(self):
        self.a, self.b = 0, 1
    
    def __iter__(self):
        return self
    
    def __next__(self):
        value = self.a
        self.a, self.b = self.b, self.a + self.b
        return value


def demo_fibonacci():
    print("\n–ò—Ç–µ—Ä–∞—Ç–æ—Ä –§–∏–±–æ–Ω–∞—á—á–∏ (–ø–µ—Ä–≤—ã–µ 10):")
    fib = FibonacciIterator()
    for _ in range(10):
        print(next(fib), end=' ')
    print()


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ò—Ç–µ—Ä–∞—Ç–æ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
# ============================================================================

class LimitedFibonacci:
    """
    üü° Middle level
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä –§–∏–±–æ–Ω–∞—á—á–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    """
    
    def __init__(self, max_value):
        self.max_value = max_value
        self.a, self.b = 0, 1
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.a > self.max_value:
            raise StopIteration
        
        value = self.a
        self.a, self.b = self.b, self.a + self.b
        return value


def demo_limited_fib():
    print("\n–§–∏–±–æ–Ω–∞—á—á–∏ –¥–æ 100:")
    print(list(LimitedFibonacci(100)))


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –†–µ–≤–µ—Ä—Å–∏–≤–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
# ============================================================================

class ReverseIterator:
    """
    üü° Middle level
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.index == 0:
            raise StopIteration
        
        self.index -= 1
        return self.data[self.index]


def demo_reverse():
    print("\n–û–±—Ä–∞—Ç–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä:")
    for char in ReverseIterator("hello"):
        print(char, end=' ')
    print()


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –ò—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ –±–∞—Ç—á–∞–º
# ============================================================================

class BatchIterator:
    """
    üü° Middle level
    –†–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –±–∞—Ç—á–∏
    """
    
    def __init__(self, data, batch_size):
        self.data = data
        self.batch_size = batch_size
        self.index = 0
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.index >= len(self.data):
            raise StopIteration
        
        batch = self.data[self.index:self.index + self.batch_size]
        self.index += self.batch_size
        return batch


def demo_batch():
    print("\n–ò—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ –±–∞—Ç—á–∞–º:")
    data = list(range(10))
    for batch in BatchIterator(data, 3):
        print(batch)


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: Iterable –∫–ª–∞—Å—Å (–Ω–µ iterator)
# ============================================================================

class NumberRange:
    """
    üü° Middle level
    –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –∫–ª–∞—Å—Å (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ)
    """
    
    def __init__(self, start, end):
        self.start = start
        self.end = end
    
    def __iter__(self):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫–∞–∂–¥—ã–π —Ä–∞–∑
        return NumberRangeIterator(self.start, self.end)


class NumberRangeIterator:
    """–ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è NumberRange"""
    
    def __init__(self, start, end):
        self.current = start
        self.end = end
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.current > self.end:
            raise StopIteration
        value = self.current
        self.current += 1
        return value


def demo_iterable():
    print("\nIterable –∫–ª–∞—Å—Å (–º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ):")
    nr = NumberRange(1, 5)
    
    print("–ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥:", list(nr))
    print("–í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥:", list(nr))


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: itertools –ø—Ä–∏–º–µ—Ä—ã
# ============================================================================

def demo_itertools():
    """
    üü° Middle level
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è itertools
    """
    
    print("\nitertools –ø—Ä–∏–º–µ—Ä—ã:")
    
    # count - –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
    print("\ncount (–ø–µ—Ä–≤—ã–µ 5):")
    for i, val in enumerate(itertools.count(10, 2)):
        if i >= 5:
            break
        print(val, end=' ')
    print()
    
    # cycle - —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
    print("\ncycle (–ø–µ—Ä–≤—ã–µ 10):")
    for i, val in enumerate(itertools.cycle(['A', 'B', 'C'])):
        if i >= 10:
            break
        print(val, end=' ')
    print()
    
    # repeat - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    print("\nrepeat (3 —Ä–∞–∑–∞):")
    print(list(itertools.repeat('Python', 3)))
    
    # chain - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    print("\nchain:")
    print(list(itertools.chain([1, 2, 3], ['a', 'b', 'c'])))
    
    # islice - —Å—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
    print("\nislice (—ç–ª–µ–º–µ–Ω—Ç—ã 2-5):")
    print(list(itertools.islice(range(10), 2, 6)))
    
    # groupby - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    print("\ngroupby:")
    data = [('a', 1), ('a', 2), ('b', 3), ('b', 4), ('c', 5)]
    for key, group in itertools.groupby(data, lambda x: x[0]):
        print(f"  {key}: {list(group)}")
    
    # combinations - –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    print("\ncombinations:")
    print(list(itertools.combinations([1, 2, 3], 2)))
    
    # permutations - –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
    print("\npermutations:")
    print(list(itertools.permutations([1, 2, 3], 2)))
    
    # product - –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    print("\nproduct:")
    print(list(itertools.product([1, 2], ['a', 'b'])))
    
    # accumulate - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ
    print("\naccumulate (–∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—É–º–º–∞):")
    print(list(itertools.accumulate([1, 2, 3, 4, 5])))
    
    # filterfalse - –æ–±—Ä–∞—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    print("\nfilterfalse (–Ω–µ—á–µ—Ç–Ω—ã–µ):")
    print(list(itertools.filterfalse(lambda x: x % 2 == 0, range(10))))


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ö–∞—Å—Ç–æ–º–Ω—ã–π enumerate
# ============================================================================

class MyEnumerate:
    """
    üü° Middle level
    –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è enumerate
    """
    
    def __init__(self, iterable, start=0):
        self.iterator = iter(iterable)
        self.count = start
    
    def __iter__(self):
        return self
    
    def __next__(self):
        value = next(self.iterator)
        result = (self.count, value)
        self.count += 1
        return result


def demo_my_enumerate():
    print("\n–ö–∞—Å—Ç–æ–º–Ω—ã–π enumerate:")
    for i, char in MyEnumerate("hello", start=1):
        print(f"{i}: {char}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –ö–∞—Å—Ç–æ–º–Ω—ã–π zip
# ============================================================================

class MyZip:
    """
    üî¥ Senior level
    –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è zip
    """
    
    def __init__(self, *iterables):
        self.iterators = [iter(it) for it in iterables]
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if not self.iterators:
            raise StopIteration
        
        values = []
        for iterator in self.iterators:
            try:
                values.append(next(iterator))
            except StopIteration:
                raise StopIteration
        
        return tuple(values)


def demo_my_zip():
    print("\n–ö–∞—Å—Ç–æ–º–Ω—ã–π zip:")
    for item in MyZip([1, 2, 3], ['a', 'b', 'c'], [10, 20, 30]):
        print(item)


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª–∏—á–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
# ============================================================================

class CyclicIterator:
    """
    üü° Middle level
    –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
    """
    
    def __init__(self, data):
        self.data = data
        self.index = 0
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if not self.data:
            raise StopIteration
        
        value = self.data[self.index]
        self.index = (self.index + 1) % len(self.data)
        return value


def demo_cyclic():
    print("\n–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä (–ø–µ—Ä–≤—ã–µ 10):")
    cyclic = CyclicIterator(['A', 'B', 'C'])
    for _ in range(10):
        print(next(cyclic), end=' ')
    print()


# ============================================================================
# –ó–ê–î–ê–ß–ê 11: –õ–µ–Ω–∏–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
# ============================================================================

class LazyFileReader:
    """
    üî¥ Senior level
    –õ–µ–Ω–∏–≤–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    """
    
    def __init__(self, filename):
        self.filename = filename
        self.file = None
    
    def __iter__(self):
        self.file = open(self.filename, 'r', encoding='utf-8')
        return self
    
    def __next__(self):
        line = self.file.readline()
        if not line:
            self.file.close()
            raise StopIteration
        return line.strip()


# ============================================================================
# –ó–ê–î–ê–ß–ê 12: –§–∏–ª—å—Ç—Ä—É—é—â–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
# ============================================================================

class FilterIterator:
    """
    üü° Middle level
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    """
    
    def __init__(self, iterable, predicate):
        self.iterator = iter(iterable)
        self.predicate = predicate
    
    def __iter__(self):
        return self
    
    def __next__(self):
        while True:
            value = next(self.iterator)
            if self.predicate(value):
                return value


def demo_filter():
    print("\n–§–∏–ª—å—Ç—Ä—É—é—â–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä (—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞):")
    even = FilterIterator(range(10), lambda x: x % 2 == 0)
    print(list(even))


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ò–¢–ï–†–ê–¢–û–†–´ - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
    demo_count_up()
    
    # –¢–µ—Å—Ç 2: –§–∏–±–æ–Ω–∞—á—á–∏
    demo_fibonacci()
    demo_limited_fib()
    
    # –¢–µ—Å—Ç 3: –†–µ–≤–µ—Ä—Å–∏–≤–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
    demo_reverse()
    
    # –¢–µ—Å—Ç 4: –ë–∞—Ç—á–∏
    demo_batch()
    
    # –¢–µ—Å—Ç 5: Iterable vs Iterator
    demo_iterable()
    
    # –¢–µ—Å—Ç 6: itertools
    demo_itertools()
    
    # –¢–µ—Å—Ç 7: –ö–∞—Å—Ç–æ–º–Ω—ã–π enumerate
    demo_my_enumerate()
    
    # –¢–µ—Å—Ç 8: –ö–∞—Å—Ç–æ–º–Ω—ã–π zip
    demo_my_zip()
    
    # –¢–µ—Å—Ç 9: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
    demo_cyclic()
    
    # –¢–µ—Å—Ç 10: –§–∏–ª—å—Ç—Ä—É—é—â–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
    demo_filter()
    
    print("\n" + "=" * 60)

