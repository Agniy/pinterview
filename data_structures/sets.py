"""
üü¢ –ú–ù–û–ñ–ï–°–¢–í–ê (Sets) - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
- Set comprehensions
- frozenset
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ß—Ç–æ —Ç–∞–∫–æ–µ set –∏ –∫–æ–≥–¥–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
A: Set - –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
- –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ (O(1))
- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏ —Ç.–¥.)

Q2: –ö–∞–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π?
A:
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ: O(1)
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏: O(1)
- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ/–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: O(min(len(s1), len(s2)))

Q3: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É set –∏ frozenset?
A:
- set - –∏–∑–º–µ–Ω—è–µ–º—ã–π (mutable)
- frozenset - –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π (immutable), –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∫–ª—é—á dict

Q4: –ö–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ –µ—Å—Ç—å –≤ Python?
A:
- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: | –∏–ª–∏ union()
- –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: & –∏–ª–∏ intersection()
- –†–∞–∑–Ω–æ—Å—Ç—å: - –∏–ª–∏ difference()
- –°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å: ^ –∏–ª–∏ symmetric_difference()
- –ü–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ: <= –∏–ª–∏ issubset()
- –ù–∞–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ: >= –∏–ª–∏ issuperset()

Q5: –ü–æ—á–µ–º—É set –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é?
A: Set - –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è, –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
# ============================================================================

def set_operations_demo():
    """
    üü¢ Junior level
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
    """
    set1 = {1, 2, 3, 4, 5}
    set2 = {4, 5, 6, 7, 8}
    
    print("Set1:", set1)
    print("Set2:", set2)
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    union = set1 | set2  # –∏–ª–∏ set1.union(set2)
    print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ (|): {union}")
    
    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    intersection = set1 & set2  # –∏–ª–∏ set1.intersection(set2)
    print(f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (&): {intersection}")
    
    # –†–∞–∑–Ω–æ—Å—Ç—å
    difference = set1 - set2  # –∏–ª–∏ set1.difference(set2)
    print(f"–†–∞–∑–Ω–æ—Å—Ç—å (-): {difference}")
    
    # –°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å
    sym_diff = set1 ^ set2  # –∏–ª–∏ set1.symmetric_difference(set2)
    print(f"–°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å (^): {sym_diff}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    print(f"\n{1, 2} –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ set1: {{1, 2}} <= set1 = {{1, 2} <= set1}")
    print(f"set1 –∏ set2 –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è: {set1.isdisjoint(set2)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ù–∞–π—Ç–∏ –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
# ============================================================================

def get_unique_elements(lst):
    """
    üü¢ Junior level
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞
    
    >>> get_unique_elements([1, 2, 2, 3, 4, 3, 5])
    {1, 2, 3, 4, 5}
    """
    return set(lst)


def get_unique_preserve_order(lst):
    """
    –° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ dict)
    """
    return list(dict.fromkeys(lst))


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–≥—Ä–∞–º–º
# ============================================================================

def are_anagrams(str1, str2):
    """
    üü¢ Junior level
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏
    
    >>> are_anagrams("listen", "silent")
    True
    >>> are_anagrams("hello", "world")
    False
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    str1 = str1.replace(" ", "").lower()
    str2 = str2.replace(" ", "").lower()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    return sorted(str1) == sorted(str2)


def are_anagrams_using_counter(str1, str2):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Counter
    """
    from collections import Counter
    str1 = str1.replace(" ", "").lower()
    str2 = str2.replace(" ", "").lower()
    return Counter(str1) == Counter(str2)


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –ù–∞–π—Ç–∏ –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ N —Å–ø–∏—Å–∫–∞—Ö
# ============================================================================

def find_common_elements(*lists):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö
    
    >>> find_common_elements([1, 2, 3], [2, 3, 4], [2, 3, 5])
    {2, 3}
    """
    if not lists:
        return set()
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    common = set(lists[0])
    
    # –ü–µ—Ä–µ—Å–µ–∫–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
    for lst in lists[1:]:
        common &= set(lst)
    
    return common


def find_common_elements_functional(*lists):
    """
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    """
    if not lists:
        return set()
    
    from functools import reduce
    return reduce(lambda a, b: a & b, map(set, lists))


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –ù–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
# ============================================================================

def find_unique_once(lst):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑
    
    >>> find_unique_once([1, 2, 2, 3, 4, 4, 5])
    {1, 3, 5}
    """
    from collections import Counter
    counts = Counter(lst)
    return {item for item, count in counts.items() if count == 1}


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–Ω–∞–≥—Ä–∞–º–º
# ============================================================================

def group_anagrams(words):
    """
    üü° Middle level
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞-–∞–Ω–∞–≥—Ä–∞–º–º—ã –≤–º–µ—Å—Ç–µ
    
    >>> group_anagrams(["eat", "tea", "tan", "ate", "nat", "bat"])
    [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]
    """
    from collections import defaultdict
    
    groups = defaultdict(list)
    
    for word in words:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –∫–ª—é—á
        key = ''.join(sorted(word))
        groups[key].append(word)
    
    return list(groups.values())


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç—ã
# ============================================================================

def has_duplicates(lst):
    """
    üü¢ Junior level
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
    
    >>> has_duplicates([1, 2, 3, 4])
    False
    >>> has_duplicates([1, 2, 2, 3])
    True
    """
    return len(lst) != len(set(lst))


def find_duplicates(lst):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
    """
    seen = set()
    duplicates = set()
    
    for item in lst:
        if item in seen:
            duplicates.add(item)
        else:
            seen.add(item)
    
    return duplicates


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
# ============================================================================

def find_missing_numbers(nums, start, end):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    
    >>> find_missing_numbers([1, 2, 4, 6], 1, 6)
    {3, 5}
    """
    full_range = set(range(start, end + 1))
    present = set(nums)
    return full_range - present


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –ü–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ (Power Set)
# ============================================================================

def generate_all_subsets(s):
    """
    üî¥ Senior level
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    
    >>> sorted(generate_all_subsets({1, 2, 3}))
    [set(), {1}, {1, 2}, {1, 2, 3}, {1, 3}, {2}, {2, 3}, {3}]
    """
    s = list(s)
    n = len(s)
    result = []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤
    for i in range(2**n):
        subset = set()
        for j in range(n):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ j-–π –±–∏—Ç
            if i & (1 << j):
                subset.add(s[j])
        result.append(subset)
    
    return result


def generate_subsets_recursive(s):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    """
    s = list(s)
    
    def backtrack(index, current):
        if index == len(s):
            result.append(set(current))
            return
        
        # –ù–µ –≤–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        backtrack(index + 1, current)
        
        # –í–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        backtrack(index + 1, current + [s[index]])
    
    result = []
    backtrack(0, [])
    return result


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: Longest Consecutive Sequence
# ============================================================================

def longest_consecutive(nums):
    """
    üî¥ Senior level
    –ù–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    
    >>> longest_consecutive([100, 4, 200, 1, 3, 2])
    4  # [1, 2, 3, 4]
    """
    if not nums:
        return 0
    
    num_set = set(nums)
    max_length = 0
    
    for num in num_set:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª–æ –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if num - 1 not in num_set:
            current_num = num
            current_length = 1
            
            # –°—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            while current_num + 1 in num_set:
                current_num += 1
                current_length += 1
            
            max_length = max(max_length, current_length)
    
    return max_length


# ============================================================================
# –ó–ê–î–ê–ß–ê 11: Set Comprehension –ø—Ä–∏–º–µ—Ä—ã
# ============================================================================

def set_comprehension_examples():
    """
    üü¢ Junior level
    –ü—Ä–∏–º–µ—Ä—ã set comprehensions
    """
    
    # –ö–≤–∞–¥—Ä–∞—Ç—ã —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
    even_squares = {x**2 for x in range(10) if x % 2 == 0}
    print(f"–ö–≤–∞–¥—Ä–∞—Ç—ã —á–µ—Ç–Ω—ã—Ö: {even_squares}")
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã —Å–ª–æ–≤
    words = ["hello", "world", "hi", "python", "code"]
    lengths = {len(word) for word in words}
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã: {lengths}")
    
    # –ü–µ—Ä–≤—ã–µ –±—É–∫–≤—ã (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
    first_letters = {word[0] for word in words}
    print(f"–ü–µ—Ä–≤—ã–µ –±—É–∫–≤—ã: {first_letters}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 12: Frozenset –ø—Ä–∏–º–µ—Ä—ã
# ============================================================================

def frozenset_examples():
    """
    üü° Middle level
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è frozenset
    """
    
    # Frozenset –∫–∞–∫ –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
    set_dict = {
        frozenset([1, 2, 3]): "Group A",
        frozenset([4, 5, 6]): "Group B"
    }
    print(f"–°–ª–æ–≤–∞—Ä—å —Å frozenset –∫–ª—é—á–∞–º–∏: {set_dict}")
    
    # Frozenset –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
    set_of_sets = {
        frozenset([1, 2]),
        frozenset([3, 4]),
        frozenset([1, 2])  # –î—É–±–ª–∏–∫–∞—Ç –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è
    }
    print(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–æ frozenset'–æ–≤: {set_of_sets}")
    
    # –û–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º set
    fs1 = frozenset([1, 2, 3])
    fs2 = frozenset([2, 3, 4])
    print(f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: {fs1 & fs2}")


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ú–ù–û–ñ–ï–°–¢–í–ê - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\n1. –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏:")
    set_operations_demo()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–≥—Ä–∞–º–º
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–≥—Ä–∞–º–º:")
    print(f"   'listen' –∏ 'silent': {are_anagrams('listen', 'silent')}")
    print(f"   'hello' –∏ 'world': {are_anagrams('hello', 'world')}")
    
    # –¢–µ—Å—Ç 3: –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    print("\n3. –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–∞—Ö:")
    lists = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]
    print(f"   –°–ø–∏—Å–∫–∏: {lists}")
    print(f"   –û–±—â–∏–µ: {find_common_elements(*lists)}")
    
    # –¢–µ—Å—Ç 4: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–Ω–∞–≥—Ä–∞–º–º
    print("\n4. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–Ω–∞–≥—Ä–∞–º–º:")
    words = ["eat", "tea", "tan", "ate", "nat", "bat"]
    print(f"   –°–ª–æ–≤–∞: {words}")
    print(f"   –ì—Ä—É–ø–ø—ã: {group_anagrams(words)}")
    
    # –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    print("\n5. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
    test_list = [1, 2, 3, 2, 4, 5, 3, 6]
    print(f"   –°–ø–∏—Å–æ–∫: {test_list}")
    print(f"   –ï—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã: {has_duplicates(test_list)}")
    print(f"   –î—É–±–ª–∏–∫–∞—Ç—ã: {find_duplicates(test_list)}")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞
    print("\n6. –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞:")
    nums = [1, 2, 4, 6, 7, 10]
    print(f"   –ß–∏—Å–ª–∞: {nums}")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω—ã (1-10): {sorted(find_missing_numbers(nums, 1, 10))}")
    
    # –¢–µ—Å—Ç 7: –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print("\n7. Longest Consecutive Sequence:")
    nums = [100, 4, 200, 1, 3, 2]
    print(f"   –ß–∏—Å–ª–∞: {nums}")
    print(f"   –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {longest_consecutive(nums)}")
    
    # –¢–µ—Å—Ç 8: Set comprehensions
    print("\n8. Set Comprehension –ø—Ä–∏–º–µ—Ä—ã:")
    set_comprehension_examples()
    
    # –¢–µ—Å—Ç 9: Frozenset
    print("\n9. Frozenset –ø—Ä–∏–º–µ—Ä—ã:")
    frozenset_examples()
    
    print("\n" + "=" * 60)

