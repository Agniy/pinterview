"""
üü¢ –ö–û–†–¢–ï–ñ–ò (Tuples) - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –ù–µ–∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å (immutability)
- Named tuples
- –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ (unpacking)
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å list
"""

from collections import namedtuple
from typing import NamedTuple


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É tuple –∏ list?
A:
- tuple –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π (immutable), list –∏–∑–º–µ–Ω—è–µ–º—ã–π (mutable)
- tuple –±—ã—Å—Ç—Ä–µ–µ, –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏
- tuple –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
- tuple –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è

Q2: –ü–æ—á–µ–º—É tuple –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π, –Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–º–µ–Ω—è–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã?
A: –ù–µ–∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤ –≤ tuple,
–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å.

Q3: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å tuple —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º?
A: –ù—É–∂–Ω–∞ –∑–∞–ø—è—Ç–∞—è: (element,) –Ω–µ (element)

Q4: –ß—Ç–æ —Ç–∞–∫–æ–µ named tuple?
A: Tuple —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã.
–°–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ collections.namedtuple –∏–ª–∏ typing.NamedTuple

Q5: –ß—Ç–æ —Ç–∞–∫–æ–µ tuple unpacking?
A: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ tuple –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º: a, b, c = (1, 2, 3)

Q6: –ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å tuple?
A: –ù–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π tuple —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å tuple
# ============================================================================

def tuple_basics():
    """
    üü¢ Junior level
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ—Ä—Ç–µ–∂–∞–º–∏
    """
    
    # –°–æ–∑–¥–∞–Ω–∏–µ
    t1 = (1, 2, 3)
    t2 = 1, 2, 3  # –°–∫–æ–±–∫–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
    t3 = (1,)  # –û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∑–∞–ø—è—Ç–∞—è
    empty = ()
    
    print(f"Tuple: {t1}")
    print(f"–ë–µ–∑ —Å–∫–æ–±–æ–∫: {t2}")
    print(f"–û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç: {t3}")
    print(f"–ü—É—Å—Ç–æ–π: {empty}")
    
    # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∏ —Å—Ä–µ–∑—ã
    print(f"\n–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {t1[0]}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {t1[-1]}")
    print(f"–°—Ä–µ–∑ [1:]: {t1[1:]}")
    
    # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è
    t4 = t1 + (4, 5)
    print(f"\n–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è: {t1} + (4, 5) = {t4}")
    
    # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
    t5 = t1 * 2
    print(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {t1} * 2 = {t5}")
    
    # –ú–µ—Ç–æ–¥—ã
    t6 = (1, 2, 2, 3, 2)
    print(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 2: {t6.count(2)}")
    print(f"–ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π 2: {t6.index(2)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: Tuple unpacking
# ============================================================================

def unpacking_examples():
    """
    üü¢ Junior level
    –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∫–æ—Ä—Ç–µ–∂–µ–π
    """
    
    # –ë–∞–∑–æ–≤–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
    coordinates = (10, 20)
    x, y = coordinates
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x={x}, y={y}")
    
    # –û–±–º–µ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
    a, b = 5, 10
    a, b = b, a
    print(f"–ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞: a={a}, b={b}")
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å *
    first, *middle, last = (1, 2, 3, 4, 5)
    print(f"first={first}, middle={middle}, last={last}")
    
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    name, _, age = ("Alice", "ignored", 30)
    print(f"name={name}, age={age}")
    
    # –í–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
    person = ("Alice", (30, "Engineer"))
    name, (age, job) = person
    print(f"name={name}, age={age}, job={job}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: Named Tuples
# ============================================================================

def namedtuple_examples():
    """
    üü° Middle level
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è named tuples
    """
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ collections.namedtuple
    Point = namedtuple('Point', ['x', 'y'])
    p1 = Point(10, 20)
    print(f"Point: {p1}")
    print(f"–î–æ—Å—Ç—É–ø: p1.x={p1.x}, p1.y={p1.y}")
    print(f"–ü–æ –∏–Ω–¥–µ–∫—Å—É: p1[0]={p1[0]}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    Person = namedtuple('Person', ['name', 'age', 'city'])
    data = {'name': 'Alice', 'age': 30, 'city': 'NYC'}
    alice = Person(**data)
    print(f"\nPerson: {alice}")
    
    # _fields, _asdict(), _replace()
    print(f"–ü–æ–ª—è: {alice._fields}")
    print(f"–ö–∞–∫ —Å–ª–æ–≤–∞—Ä—å: {alice._asdict()}")
    alice_new = alice._replace(age=31)
    print(f"–ü–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã: {alice_new}")


class PersonTyped(NamedTuple):
    """
    üü° Middle level
    Typed NamedTuple (Python 3.6+) —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ —Ç–∏–ø–æ–≤
    """
    name: str
    age: int
    city: str = "Unknown"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def greet(self):
        return f"Hello, I'm {self.name} from {self.city}"


def typed_namedtuple_example():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è typed NamedTuple
    """
    bob = PersonTyped("Bob", 25, "LA")
    print(f"\nTyped NamedTuple: {bob}")
    print(f"–ú–µ—Ç–æ–¥: {bob.greet()}")
    
    # –° –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    charlie = PersonTyped("Charlie", 28)
    print(f"–° –¥–µ—Ñ–æ–ª—Ç–æ–º: {charlie}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: Tuple –∫–∞–∫ –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è
# ============================================================================

def tuple_as_dict_key():
    """
    üü¢ Junior level
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ tuple –∫–∞–∫ –∫–ª—é—á–∞ —Å–ª–æ–≤–∞—Ä—è
    """
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã -> –∑–Ω–∞—á–µ–Ω–∏–µ
    grid = {
        (0, 0): "origin",
        (1, 0): "right",
        (0, 1): "up",
        (1, 1): "diagonal"
    }
    
    print("Grid:")
    for coords, value in grid.items():
        print(f"  {coords}: {value}")
    
    # –î–æ—Å—Ç—É–ø
    print(f"\n–ó–Ω–∞—á–µ–Ω–∏–µ –≤ (1, 1): {grid[(1, 1)]}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π
# ============================================================================

def sort_tuples():
    """
    üü° Middle level
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π
    """
    
    students = [
        ("Alice", 25, 85),
        ("Bob", 22, 90),
        ("Charlie", 25, 80),
        ("David", 22, 95)
    ]
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
    for s in students:
        print(f"  {s}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç)
    by_age = sorted(students, key=lambda x: x[1])
    print("\n–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É:")
    for s in by_age:
        print(f"  {s}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Ü–µ–Ω–∫–µ (—Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    by_score = sorted(students, key=lambda x: x[2], reverse=True)
    print("\n–ü–æ –æ—Ü–µ–Ω–∫–µ (—É–±—ã–≤–∞–Ω–∏–µ):")
    for s in by_score:
        print(f"  {s}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –∑–∞—Ç–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ
    by_age_score = sorted(students, key=lambda x: (x[1], -x[2]))
    print("\n–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –ø–æ—Ç–æ–º –æ—Ü–µ–Ω–∫–µ:")
    for s in by_age_score:
        print(f"  {s}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –∫–æ—Ä—Ç–µ–∂–µ–π
# ============================================================================

def find_duplicate_tuples(tuples_list):
    """
    üü¢ Junior level
    –ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ—Ä—Ç–µ–∂–∏
    
    >>> find_duplicate_tuples([(1, 2), (3, 4), (1, 2), (5, 6), (3, 4)])
    [(1, 2), (3, 4)]
    """
    seen = set()
    duplicates = set()
    
    for t in tuples_list:
        if t in seen:
            duplicates.add(t)
        else:
            seen.add(t)
    
    return list(duplicates)


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: Zip –∏ enumerate —Å –∫–æ—Ä—Ç–µ–∂–∞–º–∏
# ============================================================================

def zip_enumerate_examples():
    """
    üü¢ Junior level
    –ü—Ä–∏–º–µ—Ä—ã zip –∏ enumerate, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ä—Ç–µ–∂–∏
    """
    
    # zip - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    names = ["Alice", "Bob", "Charlie"]
    ages = [25, 30, 35]
    cities = ["NYC", "LA", "SF"]
    
    print("Zip –ø—Ä–∏–º–µ—Ä:")
    for name, age, city in zip(names, ages, cities):
        print(f"  {name}, {age}, {city}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏–∑ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
    person_dict = dict(zip(names, ages))
    print(f"\n–°–ª–æ–≤–∞—Ä—å: {person_dict}")
    
    # enumerate - –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã
    print("\nEnumerate –ø—Ä–∏–º–µ—Ä:")
    for index, name in enumerate(names, start=1):
        print(f"  {index}. {name}")
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ enumerate
    print("\n–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ enumerate:")
    for i, (name, age) in enumerate(zip(names, ages), start=1):
        print(f"  {i}. {name} - {age} years")


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ö–æ—Ä—Ç–µ–∂–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
# ============================================================================

def compare_performance():
    """
    üü° Middle level
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ tuple vs list
    """
    import sys
    import timeit
    
    # –†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏
    t = tuple(range(1000))
    l = list(range(1000))
    
    print(f"–†–∞–∑–º–µ—Ä tuple: {sys.getsizeof(t)} –±–∞–π—Ç")
    print(f"–†–∞–∑–º–µ—Ä list: {sys.getsizeof(l)} –±–∞–π—Ç")
    print(f"–†–∞–∑–Ω–∏—Ü–∞: {sys.getsizeof(l) - sys.getsizeof(t)} –±–∞–π—Ç")
    
    # –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
    tuple_time = timeit.timeit('tuple(range(1000))', number=100000)
    list_time = timeit.timeit('list(range(1000))', number=100000)
    
    print(f"\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è tuple: {tuple_time:.4f}s")
    print(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è list: {list_time:.4f}s")
    print(f"Tuple –±—ã—Å—Ç—Ä–µ–µ –≤ {list_time/tuple_time:.2f} —Ä–∞–∑")


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –í–æ–∑–≤—Ä–∞—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
# ============================================================================

def get_statistics(numbers):
    """
    üü¢ Junior level
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ (tuple –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—è–≤–Ω–æ)
    
    >>> get_statistics([1, 2, 3, 4, 5])
    (5, 15, 3.0, 1, 5)
    """
    count = len(numbers)
    total = sum(numbers)
    average = total / count if count > 0 else 0
    minimum = min(numbers) if numbers else None
    maximum = max(numbers) if numbers else None
    
    return count, total, average, minimum, maximum


def use_statistics():
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å tuple unpacking
    """
    data = [10, 20, 30, 40, 50]
    count, total, avg, min_val, max_val = get_statistics(data)
    
    print(f"–î–∞–Ω–Ω—ã–µ: {data}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
    print(f"–°—É–º–º–∞: {total}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ: {avg}")
    print(f"–ú–∏–Ω: {min_val}, –ú–∞–∫—Å: {max_val}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: Tuple vs List - –∫–æ–≥–¥–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
# ============================================================================

def when_to_use():
    """
    üü° Middle level
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é tuple vs list
    """
    
    print("TUPLE - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–≥–¥–∞:")
    print("  - –î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å—Å—è (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)")
    print("  - –ù—É–∂–µ–Ω –∫–ª—é—á –¥–ª—è —Å–ª–æ–≤–∞—Ä—è")
    print("  - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏")
    print("  - –í–∞–∂–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–∞–º—è—Ç—å")
    print("  - –î–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    
    print("\nLIST - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–≥–¥–∞:")
    print("  - –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è")
    print("  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ")
    print("  - –ù—É–∂–Ω—ã –º–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è (append, remove, sort, etc.)")
    print("  - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (–æ–¥–Ω–æ—Ä–æ–¥–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è)")
    
    # –ü—Ä–∏–º–µ—Ä—ã
    print("\n--- –ü—Ä–∏–º–µ—Ä—ã ---")
    
    # Tuple - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (RGB —Ü–≤–µ—Ç)
    color = (255, 128, 0)  # RGB
    print(f"–¶–≤–µ—Ç (tuple): {color}")
    
    # List - –∫–æ–ª–ª–µ–∫—Ü–∏—è
    shopping_list = ["milk", "eggs", "bread"]
    shopping_list.append("cheese")
    print(f"–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ (list): {shopping_list}")


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ö–û–†–¢–ï–ñ–ò - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤—ã
    print("\n1. –û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å tuple:")
    tuple_basics()
    
    # –¢–µ—Å—Ç 2: –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
    print("\n" + "=" * 60)
    print("2. Tuple unpacking:")
    unpacking_examples()
    
    # –¢–µ—Å—Ç 3: Named tuples
    print("\n" + "=" * 60)
    print("3. Named Tuples:")
    namedtuple_examples()
    typed_namedtuple_example()
    
    # –¢–µ—Å—Ç 4: Tuple –∫–∞–∫ –∫–ª—é—á
    print("\n" + "=" * 60)
    print("4. Tuple –∫–∞–∫ –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è:")
    tuple_as_dict_key()
    
    # –¢–µ—Å—Ç 5: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    print("\n" + "=" * 60)
    print("5. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π:")
    sort_tuples()
    
    # –¢–µ—Å—Ç 6: Zip –∏ enumerate
    print("\n" + "=" * 60)
    print("6. Zip –∏ enumerate:")
    zip_enumerate_examples()
    
    # –¢–µ—Å—Ç 7: –í–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π
    print("\n" + "=" * 60)
    print("7. –í–æ–∑–≤—Ä–∞—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:")
    use_statistics()
    
    # –¢–µ—Å—Ç 8: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print("\n" + "=" * 60)
    print("8. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    compare_performance()
    
    # –¢–µ—Å—Ç 9: –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    print("\n" + "=" * 60)
    print("9. Tuple vs List - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    when_to_use()
    
    print("\n" + "=" * 60)

