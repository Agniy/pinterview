"""
üü¢ –°–ü–ò–°–ö–ò (Lists) - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –ú–µ—Ç–æ–¥—ã —Å–ø–∏—Å–∫–æ–≤
- List comprehensions
- –°—Ä–µ–∑—ã (slicing)
- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
"""


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É list.append() –∏ list.extend()?
A: 
- append() –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Ü–µ–ª–∏–∫–æ–º (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç)
- extend() –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞

Q2: –ß—Ç–æ —Ç–∞–∫–æ–µ list comprehension –∏ –∫–æ–≥–¥–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
A: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
–°–∏–Ω—Ç–∞–∫—Å–∏—Å: [expression for item in iterable if condition]

Q3: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É list.copy() –∏ list[:] –∏ deepcopy?
A:
- list.copy() –∏ list[:] —Å–æ–∑–¥–∞—é—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é (shallow copy)
- deepcopy —Å–æ–∑–¥–∞–µ—Ç –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é (–∫–æ–ø–∏—Ä—É–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)

Q4: –ö–∞–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–ø–∏—Å–∫–∞–º–∏?
A:
- –î–æ—Å—Ç—É–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É: O(1)
- –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: O(n)
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü: O(1) –∞–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ
- –í—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–æ/—Å–µ—Ä–µ–¥–∏–Ω—É: O(n)
- –£–¥–∞–ª–µ–Ω–∏–µ: O(n)

Q5: –ß—Ç–æ —Ç–∞–∫–æ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã?
A: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞. -1 - –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, -2 - –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏ —Ç.–¥.
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –ø–æ—Ä—è–¥–æ–∫
# ============================================================================

def remove_duplicates_preserve_order(lst):
    """
    üü¢ Junior level
    –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
    
    >>> remove_duplicates_preserve_order([1, 2, 2, 3, 1, 4])
    [1, 2, 3, 4]
    """
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result


def remove_duplicates_dict_fromkeys(lst):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ dict.fromkeys (Python 3.7+)
    """
    return list(dict.fromkeys(lst))


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (flatten)
# ============================================================================

def flatten_list(nested_list):
    """
    üü° Middle level
    –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª—é–±–æ–π –≥–ª—É–±–∏–Ω—ã
    
    >>> flatten_list([1, [2, 3], [4, [5, 6]], 7])
    [1, 2, 3, 4, 5, 6, 7]
    """
    result = []
    for item in nested_list:
        if isinstance(item, list):
            result.extend(flatten_list(item))
        else:
            result.append(item)
    return result


def flatten_list_iterative(nested_list):
    """
    –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–µ–∫
    """
    stack = list(reversed(nested_list))
    result = []
    
    while stack:
        item = stack.pop()
        if isinstance(item, list):
            stack.extend(reversed(item))
        else:
            result.append(item)
    
    return result


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ù–∞–π—Ç–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
# ============================================================================

def list_intersection(list1, list2):
    """
    üü¢ Junior level
    –ù–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–≤—É—Ö —Å–ø–∏—Å–∫–∞—Ö
    
    >>> list_intersection([1, 2, 3, 4], [3, 4, 5, 6])
    [3, 4]
    """
    return list(set(list1) & set(list2))


def list_intersection_preserve_order(list1, list2):
    """
    –° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
    """
    set2 = set(list2)
    return [x for x in list1 if x in set2]


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –†–∞–∑–±–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏ (chunks)
# ============================================================================

def split_into_chunks(lst, chunk_size):
    """
    üü° Middle level
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    
    >>> split_into_chunks([1, 2, 3, 4, 5, 6, 7], 3)
    [[1, 2, 3], [4, 5, 6], [7]]
    """
    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]


def split_into_n_parts(lst, n):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ n –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π
    """
    k, m = divmod(len(lst), n)
    return [lst[i*k + min(i, m):(i+1)*k + min(i+1, m)] for i in range(n)]


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –†–æ—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
# ============================================================================

def rotate_list(lst, k):
    """
    üü¢ Junior level
    –°–¥–≤–∏–≥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –Ω–∞ k –ø–æ–∑–∏—Ü–∏–π –≤–ø—Ä–∞–≤–æ
    
    >>> rotate_list([1, 2, 3, 4, 5], 2)
    [4, 5, 1, 2, 3]
    """
    if not lst:
        return lst
    k = k % len(lst)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π k > len(lst)
    return lst[-k:] + lst[:-k]


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –ù–∞–π—Ç–∏ –≤—Ç–æ—Ä–æ–π –º–∞–∫—Å–∏–º—É–º
# ============================================================================

def find_second_max(lst):
    """
    üü¢ Junior level
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ —ç–ª–µ–º–µ–Ω—Ç
    
    >>> find_second_max([1, 5, 3, 9, 2, 9, 7])
    7
    """
    if len(lst) < 2:
        return None
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    unique_sorted = sorted(set(lst), reverse=True)
    return unique_sorted[1] if len(unique_sorted) > 1 else None


def find_second_max_optimized(lst):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ O(n)
    """
    if len(lst) < 2:
        return None
    
    first = second = float('-inf')
    
    for num in lst:
        if num > first:
            second = first
            first = num
        elif num > second and num != first:
            second = num
    
    return second if second != float('-inf') else None


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ –Ω—É–ª–∏ –≤ –∫–æ–Ω–µ—Ü
# ============================================================================

def move_zeros_to_end(lst):
    """
    üü° Middle level
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—Å–µ –Ω—É–ª–∏ –≤ –∫–æ–Ω–µ—Ü, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    >>> move_zeros_to_end([0, 1, 0, 3, 12])
    [1, 3, 12, 0, 0]
    """
    # –†–µ—à–µ–Ω–∏–µ 1: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
    non_zeros = [x for x in lst if x != 0]
    zeros = [x for x in lst if x == 0]
    return non_zeros + zeros


def move_zeros_to_end_inplace(lst):
    """
    In-place —Ä–µ—à–µ–Ω–∏–µ (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    """
    insert_pos = 0
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –Ω–µ–Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–ø–µ—Ä–µ–¥
    for i in range(len(lst)):
        if lst[i] != 0:
            lst[insert_pos] = lst[i]
            insert_pos += 1
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω—É–ª—è–º–∏
    for i in range(insert_pos, len(lst)):
        lst[i] = 0
    
    return lst


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ù–∞–π—Ç–∏ –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π (Kadane's algorithm)
# ============================================================================

def max_subarray_sum(lst):
    """
    üî¥ Senior level
    –ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
    
    >>> max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4])
    6  # [4, -1, 2, 1]
    """
    if not lst:
        return 0
    
    max_sum = current_sum = lst[0]
    
    for num in lst[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    
    return max_sum


def max_subarray_with_indices(lst):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–∫–∂–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
    """
    if not lst:
        return 0, 0, 0
    
    max_sum = current_sum = lst[0]
    start = end = temp_start = 0
    
    for i in range(1, len(lst)):
        if lst[i] > current_sum + lst[i]:
            current_sum = lst[i]
            temp_start = i
        else:
            current_sum += lst[i]
        
        if current_sum > max_sum:
            max_sum = current_sum
            start = temp_start
            end = i
    
    return max_sum, start, end


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: List Comprehension - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
# ============================================================================

def list_comprehension_examples():
    """
    üü¢ Junior level
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è list comprehensions
    """
    
    # –ö–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª
    squares = [x**2 for x in range(10)]
    print(f"Squares: {squares}")
    
    # –ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
    evens = [x for x in range(20) if x % 2 == 0]
    print(f"Evens: {evens}")
    
    # –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ - –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    pairs = [(x, y) for x in range(3) for y in range(3)]
    print(f"Pairs: {pairs}")
    
    # –£—Å–ª–æ–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    transformed = [x if x % 2 == 0 else -x for x in range(10)]
    print(f"Transformed: {transformed}")
    
    # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –º–∞—Ç—Ä–∏—Ü—É
    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    flattened = [num for row in matrix for num in row]
    print(f"Flattened matrix: {flattened}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –°–ª–∏—è–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
# ============================================================================

def merge_sorted_lists(list1, list2):
    """
    üü° Middle level
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    
    >>> merge_sorted_lists([1, 3, 5], [2, 4, 6])
    [1, 2, 3, 4, 5, 6]
    """
    result = []
    i = j = 0
    
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            result.append(list1[i])
            i += 1
        else:
            result.append(list2[j])
            j += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
    result.extend(list1[i:])
    result.extend(list2[j:])
    
    return result


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–°–ü–ò–°–ö–ò - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    print("\n1. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
    test_list = [1, 2, 2, 3, 1, 4, 4, 5]
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π: {test_list}")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {remove_duplicates_preserve_order(test_list)}")
    
    # –¢–µ—Å—Ç 2: –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    print("\n2. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:")
    nested = [1, [2, 3], [4, [5, 6]], 7]
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π: {nested}")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {flatten_list(nested)}")
    
    # –¢–µ—Å—Ç 3: –†–æ—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
    print("\n3. –†–æ—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞:")
    test_list = [1, 2, 3, 4, 5]
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π: {test_list}")
    print(f"   –†–æ—Ç–∞—Ü–∏—è –Ω–∞ 2: {rotate_list(test_list, 2)}")
    
    # –¢–µ—Å—Ç 4: –í—Ç–æ—Ä–æ–π –º–∞–∫—Å–∏–º—É–º
    print("\n4. –í—Ç–æ—Ä–æ–π –º–∞–∫—Å–∏–º—É–º:")
    test_list = [1, 5, 3, 9, 2, 9, 7]
    print(f"   –°–ø–∏—Å–æ–∫: {test_list}")
    print(f"   –í—Ç–æ—Ä–æ–π –º–∞–∫—Å–∏–º—É–º: {find_second_max_optimized(test_list)}")
    
    # –¢–µ—Å—Ç 5: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
    print("\n5. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞:")
    test_list = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    print(f"   –°–ø–∏—Å–æ–∫: {test_list}")
    max_sum, start, end = max_subarray_with_indices(test_list)
    print(f"   –ú–∞–∫—Å —Å—É–º–º–∞: {max_sum}, –ø–æ–¥–º–∞—Å—Å–∏–≤: {test_list[start:end+1]}")
    
    # –¢–µ—Å—Ç 6: List comprehensions
    print("\n6. List Comprehension –ø—Ä–∏–º–µ—Ä—ã:")
    list_comprehension_examples()
    
    print("\n" + "=" * 60)

