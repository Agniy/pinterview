"""
üü¢ –°–õ–û–í–ê–†–ò (Dictionaries) - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –ú–µ—Ç–æ–¥—ã —Å–ª–æ–≤–∞—Ä–µ–π
- Dict comprehensions
- defaultdict, Counter, OrderedDict
- –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""

from collections import defaultdict, Counter, OrderedDict


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ Python? –ö–∞–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π?
A: –°–ª–æ–≤–∞—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞–∫ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–∞
- –î–æ—Å—Ç—É–ø/–≤—Å—Ç–∞–≤–∫–∞/—É–¥–∞–ª–µ–Ω–∏–µ: O(1) –≤ —Å—Ä–µ–¥–Ω–µ–º, O(n) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ
- –ü–æ–∏—Å–∫ –∫–ª—é—á–∞: O(1)

Q2: –ö–∞–∫–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –∫–ª—é—á–∞–º–∏ —Å–ª–æ–≤–∞—Ä—è?
A: –¢–æ–ª—å–∫–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ (hashable) —Ç–∏–ø—ã:
- int, float, str, tuple (–µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç hashable —ç–ª–µ–º–µ–Ω—Ç—ã), frozenset
- –ù–µ–ª—å–∑—è: list, dict, set

Q3: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É dict.get() –∏ dict[key]?
A:
- dict[key] –≤—ã–∑—ã–≤–∞–µ—Ç KeyError, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
- dict.get(key, default) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç default (None –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

Q4: –ß—Ç–æ —Ç–∞–∫–æ–µ dict comprehension?
A: {key_expr: value_expr for item in iterable if condition}

Q5: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ dict?
A: –° Python 3.7+ –ø–æ—Ä—è–¥–æ–∫ –≤—Å—Ç–∞–≤–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω

Q6: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É dict.items(), dict.keys(), dict.values()?
A: –í–æ–∑–≤—Ä–∞—â–∞—é—Ç view –æ–±—ä–µ–∫—Ç—ã (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è):
- items() - –ø–∞—Ä—ã (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ)
- keys() - —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏
- values() - —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –°–ª–∏—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π
# ============================================================================

def merge_dicts_method1(dict1, dict2):
    """
    üü¢ Junior level
    –°–ª–∏—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π (dict2 –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç dict1)
    
    >>> merge_dicts_method1({'a': 1, 'b': 2}, {'b': 3, 'c': 4})
    {'a': 1, 'b': 3, 'c': 4}
    """
    result = dict1.copy()
    result.update(dict2)
    return result


def merge_dicts_operator(dict1, dict2):
    """
    Python 3.9+ - –æ–ø–µ—Ä–∞—Ç–æ—Ä |
    """
    return dict1 | dict2


def merge_dicts_unpacking(dict1, dict2):
    """
    Python 3.5+ - —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
    """
    return {**dict1, **dict2}


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å (–ø–æ–º–µ–Ω—è—Ç—å –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è)
# ============================================================================

def invert_dict(d):
    """
    üü¢ Junior level
    –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å (–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∫–ª—é—á–∞–º–∏)
    
    >>> invert_dict({'a': 1, 'b': 2, 'c': 3})
    {1: 'a', 2: 'b', 3: 'c'}
    """
    return {v: k for k, v in d.items()}


def invert_dict_with_duplicates(d):
    """
    üü° Middle level
    –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –∏–º–µ—é—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
    
    >>> invert_dict_with_duplicates({'a': 1, 'b': 2, 'c': 1})
    {1: ['a', 'c'], 2: ['b']}
    """
    result = defaultdict(list)
    for key, value in d.items():
        result[value].append(key)
    return dict(result)


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# ============================================================================

def group_by_length(words):
    """
    üü° Middle level
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ –¥–ª–∏–Ω–µ
    
    >>> group_by_length(['apple', 'bat', 'car', 'elephant', 'dog'])
    {5: ['apple'], 3: ['bat', 'car', 'dog'], 8: ['elephant']}
    """
    result = defaultdict(list)
    for word in words:
        result[len(word)].append(word)
    return dict(result)


def group_by_key(items, key_func):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏
    
    >>> students = [{'name': 'Alice', 'grade': 'A'}, {'name': 'Bob', 'grade': 'B'}, 
    ...             {'name': 'Charlie', 'grade': 'A'}]
    >>> group_by_key(students, lambda x: x['grade'])
    """
    result = defaultdict(list)
    for item in items:
        key = key_func(item)
        result[key].append(item)
    return dict(result)


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# ============================================================================

def count_frequency_manual(items):
    """
    üü¢ Junior level
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ä—É—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    
    >>> count_frequency_manual(['a', 'b', 'a', 'c', 'b', 'a'])
    {'a': 3, 'b': 2, 'c': 1}
    """
    freq = {}
    for item in items:
        freq[item] = freq.get(item, 0) + 1
    return freq


def count_frequency_counter(items):
    """
    –ò—Å–ø–æ–ª—å–∑—É—è Counter –∏–∑ collections
    """
    return dict(Counter(items))


def most_common_elements(items, n=3):
    """
    –ù–∞—Ö–æ–¥–∏—Ç n —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    >>> most_common_elements(['a', 'b', 'a', 'c', 'b', 'a'], 2)
    [('a', 3), ('b', 2)]
    """
    return Counter(items).most_common(n)


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ - –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏
# ============================================================================

def get_nested_value(data, path, default=None):
    """
    üü° Middle level
    –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ –ø—É—Ç–∏
    
    >>> data = {'a': {'b': {'c': 42}}}
    >>> get_nested_value(data, ['a', 'b', 'c'])
    42
    >>> get_nested_value(data, ['a', 'x', 'y'], default='not found')
    'not found'
    """
    current = data
    for key in path:
        if isinstance(current, dict) and key in current:
            current = current[key]
        else:
            return default
    return current


def set_nested_value(data, path, value):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    
    >>> data = {}
    >>> set_nested_value(data, ['a', 'b', 'c'], 42)
    >>> data
    {'a': {'b': {'c': 42}}}
    """
    current = data
    for key in path[:-1]:
        if key not in current:
            current[key] = {}
        current = current[key]
    current[path[-1]] = value


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π
# ============================================================================

def merge_with_sum(dict1, dict2):
    """
    üü° Middle level
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏, —Å—É–º–º–∏—Ä—É—è –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±—â–∏—Ö –∫–ª—é—á–µ–π
    
    >>> merge_with_sum({'a': 1, 'b': 2}, {'b': 3, 'c': 4})
    {'a': 1, 'b': 5, 'c': 4}
    """
    result = dict1.copy()
    for key, value in dict2.items():
        result[key] = result.get(key, 0) + value
    return result


def merge_dicts_custom(dict1, dict2, merge_func):
    """
    –û–±–æ–±—â–µ–Ω–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    """
    result = dict1.copy()
    for key, value in dict2.items():
        if key in result:
            result[key] = merge_func(result[key], value)
        else:
            result[key] = value
    return result


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è
# ============================================================================

def filter_dict_by_value(d, predicate):
    """
    üü¢ Junior level
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ —É—Å–ª–æ–≤–∏—é –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
    
    >>> filter_dict_by_value({'a': 1, 'b': 2, 'c': 3, 'd': 4}, lambda x: x > 2)
    {'c': 3, 'd': 4}
    """
    return {k: v for k, v in d.items() if predicate(v)}


def filter_dict_by_key(d, predicate):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –∫–ª—é—á–∞–º
    """
    return {k: v for k, v in d.items() if predicate(k)}


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–º–æ—Ä—Ñ–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫
# ============================================================================

def is_isomorphic(s1, s2):
    """
    üü° Middle level
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∏ –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã–º–∏
    (–º–æ–∂–Ω–æ –ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –æ–¥–Ω–æ–π –Ω–∞ –¥—Ä—É–≥—É—é 1-–∫-1)
    
    >>> is_isomorphic("egg", "add")
    True
    >>> is_isomorphic("foo", "bar")
    False
    """
    if len(s1) != len(s2):
        return False
    
    mapping1 = {}
    mapping2 = {}
    
    for c1, c2 in zip(s1, s2):
        if c1 in mapping1:
            if mapping1[c1] != c2:
                return False
        else:
            mapping1[c1] = c2
        
        if c2 in mapping2:
            if mapping2[c2] != c1:
                return False
        else:
            mapping2[c2] = c1
    
    return True


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: LRU Cache (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
# ============================================================================

class LRUCache:
    """
    üî¥ Senior level
    Least Recently Used Cache - –∫–µ—à —Å –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ–º –¥–∞–≤–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self, capacity):
        self.capacity = capacity
        self.cache = OrderedDict()
    
    def get(self, key):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—Å—Ç–∏–≤ –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü (–∫–∞–∫ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ)
        """
        if key not in self.cache:
            return -1
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
        self.cache.move_to_end(key)
        return self.cache[key]
    
    def put(self, key, value):
        """
        –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if key in self.cache:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
            self.cache.move_to_end(key)
        else:
            # –ï—Å–ª–∏ –∫–µ—à –ø–æ–ª–æ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if len(self.cache) >= self.capacity:
                self.cache.popitem(last=False)
        
        self.cache[key] = value


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –°–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
# ============================================================================

class DefaultDict:
    """
    üü° Middle level
    –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è defaultdict
    """
    
    def __init__(self, default_factory):
        self.default_factory = default_factory
        self.data = {}
    
    def __getitem__(self, key):
        if key not in self.data:
            self.data[key] = self.default_factory()
        return self.data[key]
    
    def __setitem__(self, key, value):
        self.data[key] = value


# ============================================================================
# Dict Comprehension –ø—Ä–∏–º–µ—Ä—ã
# ============================================================================

def dict_comprehension_examples():
    """
    üü¢ Junior level
    –ü—Ä–∏–º–µ—Ä—ã dict comprehensions
    """
    
    # –ö–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª
    squares = {x: x**2 for x in range(1, 6)}
    print(f"Squares: {squares}")
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    original = {'a': 1, 'b': 2, 'c': 3}
    inverted = {v: k for k, v in original.items()}
    print(f"Inverted: {inverted}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered = {k: v for k, v in squares.items() if v > 10}
    print(f"Filtered: {filtered}")
    
    # –ò–∑ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
    keys = ['name', 'age', 'city']
    values = ['Alice', 30, 'NYC']
    person = {k: v for k, v in zip(keys, values)}
    print(f"Person: {person}")


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–°–õ–û–í–ê–†–ò - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
    print("\n1. –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è:")
    d = {'a': 1, 'b': 2, 'c': 1, 'd': 3}
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π: {d}")
    print(f"   –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–ø—Ä–æ—Å—Ç–æ–π): {invert_dict({'a': 1, 'b': 2})}")
    print(f"   –° –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {invert_dict_with_duplicates(d)}")
    
    # –¢–µ—Å—Ç 2: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    print("\n2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –ø–æ –¥–ª–∏–Ω–µ:")
    words = ['apple', 'bat', 'car', 'elephant', 'dog', 'cat']
    print(f"   –°–ª–æ–≤–∞: {words}")
    print(f"   –ì—Ä—É–ø–ø—ã: {group_by_length(words)}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã
    print("\n3. –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã:")
    items = ['a', 'b', 'a', 'c', 'b', 'a', 'd', 'b']
    print(f"   –≠–ª–µ–º–µ–Ω—Ç—ã: {items}")
    print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {count_frequency_counter(items)}")
    print(f"   –¢–æ–ø-2: {most_common_elements(items, 2)}")
    
    # –¢–µ—Å—Ç 4: –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
    print("\n4. –†–∞–±–æ—Ç–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞—Ä—è–º–∏:")
    data = {'user': {'profile': {'name': 'Alice', 'age': 30}}}
    print(f"   –î–∞–Ω–Ω—ã–µ: {data}")
    print(f"   –ü–æ–ª—É—á–∏—Ç—å name: {get_nested_value(data, ['user', 'profile', 'name'])}")
    print(f"   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å: {get_nested_value(data, ['user', 'x'], 'N/A')}")
    
    # –¢–µ—Å—Ç 5: –°–ª–∏—è–Ω–∏–µ —Å —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    print("\n5. –°–ª–∏—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Å—É–º–º–æ–π:")
    d1 = {'a': 1, 'b': 2, 'c': 3}
    d2 = {'b': 3, 'c': 4, 'd': 5}
    print(f"   Dict1: {d1}")
    print(f"   Dict2: {d2}")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {merge_with_sum(d1, d2)}")
    
    # –¢–µ—Å—Ç 6: LRU Cache
    print("\n6. LRU Cache:")
    cache = LRUCache(2)
    cache.put(1, 'one')
    cache.put(2, 'two')
    print(f"   get(1): {cache.get(1)}")
    cache.put(3, 'three')  # –í—ã—Ç–µ—Å–Ω–∏—Ç –∫–ª—é—á 2
    print(f"   get(2) –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 3: {cache.get(2)}")  # -1
    print(f"   get(3): {cache.get(3)}")
    
    # –¢–µ—Å—Ç 7: Dict comprehensions
    print("\n7. Dict Comprehension –ø—Ä–∏–º–µ—Ä—ã:")
    dict_comprehension_examples()
    
    print("\n" + "=" * 60)

