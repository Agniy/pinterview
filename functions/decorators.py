"""
üü° –î–ï–ö–û–†–ê–¢–û–†–´ (Decorators) - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
- –ó–∞–º—ã–∫–∞–Ω–∏—è
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∫–ª–∞—Å—Å–æ–≤
- functools.wraps
"""

import time
import functools
from typing import Callable


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä?
A: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é,
—Ä–∞—Å—à–∏—Ä—è—è/–∏–∑–º–µ–Ω—è—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –µ—ë –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏.

Q2: –ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ (closure)?
A: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–∫—Ä—É–∂–∞—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏,
–¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏.

Q3: –ó–∞—á–µ–º –Ω—É–∂–µ–Ω functools.wraps?
A: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–∏–º—è, docstring –∏ —Ç.–¥.) –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞.

Q4: –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏?
A: –î–∞, –æ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö:
@decorator1
@decorator2
def func(): ...
—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ: decorator1(decorator2(func))

Q5: –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?
A: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –ü—Ä–æ—Å—Ç–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä - —Ç–∞–π–º–µ—Ä
# ============================================================================

def timer(func):
    """
    üü¢ Junior level
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f"{func.__name__} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∑–∞ {end - start:.4f}—Å")
        return result
    return wrapper


@timer
def slow_function():
    """–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    time.sleep(0.1)
    return "Done"


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# ============================================================================

def logger(func):
    """
    üü¢ Junior level
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        args_repr = [repr(a) for a in args]
        kwargs_repr = [f"{k}={v!r}" for k, v in kwargs.items()]
        signature = ", ".join(args_repr + kwargs_repr)
        print(f"–í—ã–∑–æ–≤ {func.__name__}({signature})")
        result = func(*args, **kwargs)
        print(f"{func.__name__} –≤–µ—Ä–Ω—É–ª–∞ {result!r}")
        return result
    return wrapper


@logger
def add(a, b):
    """–°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞"""
    return a + b


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–∑–æ–≤–æ–≤
# ============================================================================

def count_calls(func):
    """
    üü° Middle level
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        wrapper.call_count += 1
        print(f"–í—ã–∑–æ–≤ #{wrapper.call_count} —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
        return func(*args, **kwargs)
    
    wrapper.call_count = 0
    return wrapper


@count_calls
def say_hello():
    return "Hello!"


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª—å
# ============================================================================

def repeat(times=2):
    """
    üü° Middle level
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º - –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            result = None
            for i in range(times):
                print(f"–í—ã–∑–æ–≤ {i+1}/{times}")
                result = func(*args, **kwargs)
            return result
        return wrapper
    return decorator


@repeat(times=3)
def greet(name):
    print(f"Hello, {name}!")


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –ö–µ—à–∏—Ä—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä (Memoization)
# ============================================================================

def memoize(func):
    """
    üî¥ Senior level
    –ö–µ—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
    """
    cache = {}
    
    @functools.wraps(func)
    def wrapper(*args):
        if args not in cache:
            cache[args] = func(*args)
        else:
            print(f"–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∫–µ—à–∞ –¥–ª—è {args}")
        return cache[args]
    
    wrapper.cache = cache
    wrapper.cache_clear = lambda: cache.clear()
    return wrapper


@memoize
def fibonacci(n):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏"""
    if n < 2:
        return n
    return fibonacci(n-1) + fibonacci(n-2)


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π lru_cache
from functools import lru_cache

@lru_cache(maxsize=128)
def fibonacci_lru(n):
    """–§–∏–±–æ–Ω–∞—á—á–∏ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–µ—à–µ–º"""
    if n < 2:
        return n
    return fibonacci_lru(n-1) + fibonacci_lru(n-2)


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
# ============================================================================

def type_check(*expected_types):
    """
    üü° Middle level
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            for arg, expected_type in zip(args, expected_types):
                if not isinstance(arg, expected_type):
                    raise TypeError(
                        f"–û–∂–∏–¥–∞–ª—Å—è {expected_type.__name__}, "
                        f"–ø–æ–ª—É—á–µ–Ω {type(arg).__name__}"
                    )
            return func(*args, **kwargs)
        return wrapper
    return decorator


@type_check(int, int)
def multiply(a, b):
    return a * b


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
# ============================================================================

def retry(max_attempts=3, delay=1):
    """
    üî¥ Senior level
    –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            for attempt in range(max_attempts):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_attempts - 1:
                        raise
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {e}")
                    print(f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
                    time.sleep(delay)
        return wrapper
    return decorator


@retry(max_attempts=3, delay=0.5)
def unstable_function():
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å"""
    import random
    if random.random() < 0.7:
        raise ValueError("–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞!")
    return "–£—Å–ø–µ—Ö!"


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä-—Å–∏–Ω–≥–ª—Ç–æ–Ω
# ============================================================================

def singleton(cls):
    """
    üî¥ Senior level
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton
    """
    instances = {}
    
    @functools.wraps(cls)
    def get_instance(*args, **kwargs):
        if cls not in instances:
            instances[cls] = cls(*args, **kwargs)
        return instances[cls]
    
    return get_instance


@singleton
class Database:
    """–ö–ª–∞—Å—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä"""
    
    def __init__(self):
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        self.connection = "Connected"


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
# ============================================================================

def validate_range(min_val, max_val):
    """
    üü° Middle level
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            if not (min_val <= result <= max_val):
                raise ValueError(
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç {result} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [{min_val}, {max_val}]"
                )
            return result
        return wrapper
    return decorator


@validate_range(0, 100)
def calculate_percentage(part, whole):
    return (part / whole) * 100


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting
# ============================================================================

def rate_limit(max_calls, time_window):
    """
    üî¥ Senior level
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    """
    def decorator(func):
        calls = []
        
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            now = time.time()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã
            calls[:] = [c for c in calls if now - c < time_window]
            
            if len(calls) >= max_calls:
                raise Exception(
                    f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: {max_calls} –≤—ã–∑–æ–≤–æ–≤ –∑–∞ {time_window}—Å"
                )
            
            calls.append(now)
            return func(*args, **kwargs)
        
        return wrapper
    return decorator


@rate_limit(max_calls=3, time_window=5)
def api_call():
    return "API –æ—Ç–≤–µ—Ç"


# ============================================================================
# –ó–ê–î–ê–ß–ê 11: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–µ–ø—Ä–µ–∫–∞—Ü–∏–∏
# ============================================================================

import warnings

def deprecated(reason):
    """
    üü° Middle level
    –ü–æ–º–µ—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à—É—é
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            warnings.warn(
                f"{func.__name__} —É—Å—Ç–∞—Ä–µ–ª–∞. {reason}",
                category=DeprecationWarning,
                stacklevel=2
            )
            return func(*args, **kwargs)
        return wrapper
    return decorator


@deprecated("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ new_function() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ")
def old_function():
    return "–°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è"


# ============================================================================
# –ó–ê–î–ê–ß–ê 12: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
# ============================================================================

@timer
@logger
@count_calls
def complex_function(x, y):
    """–§—É–Ω–∫—Ü–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    time.sleep(0.1)
    return x + y


# ============================================================================
# –ó–ê–î–ê–ß–ê 13: –ö–ª–∞—Å—Å –∫–∞–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
# ============================================================================

class CallCounter:
    """
    üü° Middle level
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä-–∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–∑–æ–≤–æ–≤
    """
    
    def __init__(self, func):
        functools.update_wrapper(self, func)
        self.func = func
        self.count = 0
    
    def __call__(self, *args, **kwargs):
        self.count += 1
        print(f"–í—ã–∑–æ–≤ #{self.count}")
        return self.func(*args, **kwargs)


@CallCounter
def test_function():
    return "Test"


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–î–ï–ö–û–†–ê–¢–û–†–´ - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –¢–∞–π–º–µ—Ä
    print("\n1. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä-—Ç–∞–π–º–µ—Ä:")
    slow_function()
    
    # –¢–µ—Å—Ç 2: –õ–æ–≥–≥–µ—Ä
    print("\n2. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä-–ª–æ–≥–≥–µ—Ä:")
    add(5, 3)
    
    # –¢–µ—Å—Ç 3: –°—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤
    print("\n3. –°—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤:")
    say_hello()
    say_hello()
    say_hello()
    
    # –¢–µ—Å—Ç 4: –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª—å
    print("\n4. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–ø–æ–≤—Ç–æ—Ä):")
    greet("Alice")
    
    # –¢–µ—Å—Ç 5: –ú–µ–º–æ–∏–∑–∞—Ü–∏—è
    print("\n5. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (Memoization):")
    print(f"fibonacci(10) = {fibonacci(10)}")
    print(f"fibonacci(10) —Å–Ω–æ–≤–∞ = {fibonacci(10)}")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤:")
    print(f"multiply(5, 3) = {multiply(5, 3)}")
    try:
        multiply("5", 3)
    except TypeError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 7: –°–∏–Ω–≥–ª—Ç–æ–Ω
    print("\n7. Singleton:")
    db1 = Database()
    db2 = Database()
    print(f"db1 is db2: {db1 is db2}")
    
    # –¢–µ—Å—Ç 8: –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\n8. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞:")
    print(f"50 –∏–∑ 100 = {calculate_percentage(50, 100)}%")
    try:
        calculate_percentage(150, 100)
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 9: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n9. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤:")
    complex_function(10, 20)
    
    # –¢–µ—Å—Ç 10: –ö–ª–∞—Å—Å-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    print("\n10. –ö–ª–∞—Å—Å –∫–∞–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä:")
    test_function()
    test_function()
    
    print("\n" + "=" * 60)

