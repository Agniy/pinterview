"""
üü° –ì–ï–ù–ï–†–ê–¢–û–†–´ (Generators) - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- yield
- Generator expressions
- –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã vs –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
- send(), throw(), close()
- yield from
"""

import sys


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ß—Ç–æ —Ç–∞–∫–æ–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä?
A: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç yield –≤–º–µ—Å—Ç–æ return –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
–∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é (lazy evaluation).

Q2: –í —á–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤?
A:
- –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏ (–Ω–µ —Ö—Ä–∞–Ω—è—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è)
- –õ–µ–Ω–∏–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–≤—ã—á–∏—Å–ª—è—é—Ç –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
- –ú–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏

Q3: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É yield –∏ return?
A:
- return –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
- yield –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ,
  —Å–æ—Ö—Ä–∞–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

Q4: –ß—Ç–æ —Ç–∞–∫–æ–µ generator expression?
A: –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: (x**2 for x in range(10))
–ê–Ω–∞–ª–æ–≥ list comprehension, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫.

Q5: –ß—Ç–æ –¥–µ–ª–∞—é—Ç –º–µ—Ç–æ–¥—ã send(), throw(), close()?
A:
- send(value) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
- throw(exception) - –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
- close() - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä

Q6: –ß—Ç–æ —Ç–∞–∫–æ–µ yield from?
A: –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É (Python 3.3+)
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
# ============================================================================

def count_up_to(n):
    """
    üü¢ Junior level
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n
    
    >>> list(count_up_to(5))
    [1, 2, 3, 4, 5]
    """
    count = 1
    while count <= n:
        yield count
        count += 1


def demo_count():
    print("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç 1 –¥–æ 5:")
    for num in count_up_to(5):
        print(num, end=' ')
    print()


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
# ============================================================================

def infinite_sequence():
    """
    üü¢ Junior level
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
    """
    num = 0
    while True:
        yield num
        num += 1


def demo_infinite():
    print("\n–ü–µ—Ä–≤—ã–µ 10 —á–∏—Å–µ–ª –∏–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
    gen = infinite_sequence()
    for _ in range(10):
        print(next(gen), end=' ')
    print()


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –§–∏–±–æ–Ω–∞—á—á–∏
# ============================================================================

def fibonacci():
    """
    üü° Middle level
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
    """
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b


def fibonacci_up_to(n):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –§–∏–±–æ–Ω–∞—á—á–∏ –¥–æ n
    """
    a, b = 0, 1
    while a <= n:
        yield a
        a, b = b, a + b


def demo_fibonacci():
    print("\n–ü–µ—Ä–≤—ã–µ 10 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏:")
    fib = fibonacci()
    for _ in range(10):
        print(next(fib), end=' ')
    print()
    
    print("–§–∏–±–æ–Ω–∞—á—á–∏ –¥–æ 100:")
    print(list(fibonacci_up_to(100)))


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: Generator Expression
# ============================================================================

def demo_generator_expression():
    """
    üü¢ Junior level
    –ü—Ä–∏–º–µ—Ä—ã generator expressions
    """
    
    # –ö–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª
    squares = (x**2 for x in range(10))
    print("\n–ö–≤–∞–¥—Ä–∞—Ç—ã (generator):")
    print(list(squares))
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: list vs generator
    list_comp = [x**2 for x in range(1000)]
    gen_exp = (x**2 for x in range(1000))
    
    print(f"\n–†–∞–∑–º–µ—Ä list comprehension: {sys.getsizeof(list_comp)} bytes")
    print(f"–†–∞–∑–º–µ—Ä generator expression: {sys.getsizeof(gen_exp)} bytes")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
    even_squares = (x**2 for x in range(20) if x % 2 == 0)
    print(f"–ß–µ—Ç–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã: {list(even_squares)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –ß—Ç–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
# ============================================================================

def read_large_file(file_path):
    """
    üü° Middle level
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    """
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            yield line.strip()


def read_in_chunks(file_path, chunk_size=1024):
    """
    –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫—É—Å–∫–∞–º–∏
    """
    with open(file_path, 'r', encoding='utf-8') as file:
        while True:
            chunk = file.read(chunk_size)
            if not chunk:
                break
            yield chunk


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
# ============================================================================

def is_prime(n):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ"""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def primes_generator(limit=None):
    """
    üü° Middle level
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
    """
    num = 2
    while limit is None or num <= limit:
        if is_prime(num):
            yield num
        num += 1


def demo_primes():
    print("\n–ü–µ—Ä–≤—ã–µ 10 –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª:")
    gen = primes_generator()
    for _ in range(10):
        print(next(gen), end=' ')
    print()


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫
# ============================================================================

def permutations(items):
    """
    üî¥ Senior level
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Å–µ—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
    """
    if len(items) <= 1:
        yield items
    else:
        for i, item in enumerate(items):
            rest = items[:i] + items[i+1:]
            for p in permutations(rest):
                yield [item] + p


def demo_permutations():
    print("\n–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ [1, 2, 3]:")
    for perm in permutations([1, 2, 3]):
        print(perm)


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å send()
# ============================================================================

def running_average():
    """
    üî¥ Senior level
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ã—á–∏—Å–ª—è—é—â–∏–π —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
    """
    total = 0
    count = 0
    average = None
    
    while True:
        value = yield average
        if value is not None:
            total += value
            count += 1
            average = total / count


def demo_send():
    print("\n–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Å send():")
    avg_gen = running_average()
    next(avg_gen)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    
    print(f"–î–æ–±–∞–≤–ª—è–µ–º 10: {avg_gen.send(10)}")
    print(f"–î–æ–±–∞–≤–ª—è–µ–º 20: {avg_gen.send(20)}")
    print(f"–î–æ–±–∞–≤–ª—è–µ–º 30: {avg_gen.send(30)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: yield from
# ============================================================================

def chain(*iterables):
    """
    üü° Middle level
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤
    """
    for iterable in iterables:
        yield from iterable


def demo_yield_from():
    print("\nyield from - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤:")
    result = list(chain([1, 2, 3], [4, 5], [6, 7, 8]))
    print(result)


def flatten(nested_list):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    """
    for item in nested_list:
        if isinstance(item, list):
            yield from flatten(item)
        else:
            yield item


def demo_flatten():
    print("\n–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:")
    nested = [1, [2, 3, [4, 5]], 6, [7, [8, 9]]]
    print(f"–í–ª–æ–∂–µ–Ω–Ω—ã–π: {nested}")
    print(f"–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π: {list(flatten(nested))}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–∫–æ–Ω (sliding window)
# ============================================================================

def sliding_window(iterable, window_size):
    """
    üü° Middle level
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
    
    >>> list(sliding_window([1, 2, 3, 4, 5], 3))
    [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
    """
    from collections import deque
    
    iterator = iter(iterable)
    window = deque(maxlen=window_size)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –æ–∫–Ω–æ
    for _ in range(window_size):
        try:
            window.append(next(iterator))
        except StopIteration:
            return
    
    yield list(window)
    
    # –°–∫–æ–ª—å–∑–∏–º
    for item in iterator:
        window.append(item)
        yield list(window)


def demo_sliding_window():
    print("\n–°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–º 3:")
    for window in sliding_window([1, 2, 3, 4, 5, 6], 3):
        print(window)


# ============================================================================
# –ó–ê–î–ê–ß–ê 11: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∞—Ç—á–µ–π
# ============================================================================

def batch_generator(iterable, batch_size):
    """
    üü° Middle level
    –†–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –±–∞—Ç—á–∏
    """
    batch = []
    for item in iterable:
        batch.append(item)
        if len(batch) == batch_size:
            yield batch
            batch = []
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π –±–∞—Ç—á
    if batch:
        yield batch


def demo_batches():
    print("\n–ë–∞—Ç—á–∏ —Ä–∞–∑–º–µ—Ä–æ–º 3:")
    for batch in batch_generator(range(10), 3):
        print(batch)


# ============================================================================
# –ó–ê–î–ê–ß–ê 12: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç)
# ============================================================================

def traffic_light():
    """
    üî¥ Senior level
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä-—Å–≤–µ—Ç–æ—Ñ–æ—Ä (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç)
    """
    states = ['Red', 'Yellow', 'Green', 'Yellow']
    index = 0
    
    while True:
        command = yield states[index]
        
        if command == 'next':
            index = (index + 1) % len(states)
        elif command == 'reset':
            index = 0


def demo_traffic_light():
    print("\n–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä-—Å–≤–µ—Ç–æ—Ñ–æ—Ä:")
    light = traffic_light()
    print(f"–°—Ç–∞—Ä—Ç: {next(light)}")
    print(f"Next: {light.send('next')}")
    print(f"Next: {light.send('next')}")
    print(f"Next: {light.send('next')}")
    print(f"Reset: {light.send('reset')}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 13: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
# ============================================================================

def process_pipeline(data):
    """
    üî¥ Senior level
    –¶–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    """
    
    def read_data():
        for item in data:
            yield item
    
    def filter_even(gen):
        for item in gen:
            if item % 2 == 0:
                yield item
    
    def square(gen):
        for item in gen:
            yield item ** 2
    
    def multiply_by_10(gen):
        for item in gen:
            yield item * 10
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ pipeline
    pipeline = read_data()
    pipeline = filter_even(pipeline)
    pipeline = square(pipeline)
    pipeline = multiply_by_10(pipeline)
    
    return pipeline


def demo_pipeline():
    print("\nPipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    data = range(1, 11)
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {list(data)}")
    
    result = list(process_pipeline(data))
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç (—á–µ—Ç–Ω—ã–µ -> –∫–≤–∞–¥—Ä–∞—Ç -> *10): {result}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 14: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–µ—Ä–µ–≤—É
# ============================================================================

class TreeNode:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right


def inorder_traversal(root):
    """
    üî¥ Senior level
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ (in-order)
    """
    if root:
        yield from inorder_traversal(root.left)
        yield root.value
        yield from inorder_traversal(root.right)


def demo_tree():
    print("\n–û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞:")
    #       4
    #      / \
    #     2   6
    #    / \ / \
    #   1  3 5  7
    
    tree = TreeNode(4,
        TreeNode(2, TreeNode(1), TreeNode(3)),
        TreeNode(6, TreeNode(5), TreeNode(7))
    )
    
    print("In-order:", list(inorder_traversal(tree)))


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ì–ï–ù–ï–†–ê–¢–û–†–´ - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    demo_count()
    
    # –¢–µ—Å—Ç 2: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    demo_infinite()
    
    # –¢–µ—Å—Ç 3: –§–∏–±–æ–Ω–∞—á—á–∏
    demo_fibonacci()
    
    # –¢–µ—Å—Ç 4: Generator expressions
    demo_generator_expression()
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
    demo_primes()
    
    # –¢–µ—Å—Ç 6: –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
    demo_permutations()
    
    # –¢–µ—Å—Ç 7: send()
    demo_send()
    
    # –¢–µ—Å—Ç 8: yield from
    demo_yield_from()
    demo_flatten()
    
    # –¢–µ—Å—Ç 9: –°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ
    demo_sliding_window()
    
    # –¢–µ—Å—Ç 10: –ë–∞—Ç—á–∏
    demo_batches()
    
    # –¢–µ—Å—Ç 11: –°–≤–µ—Ç–æ—Ñ–æ—Ä (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    demo_traffic_light()
    
    # –¢–µ—Å—Ç 12: Pipeline
    demo_pipeline()
    
    # –¢–µ—Å—Ç 13: –û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞
    demo_tree()
    
    print("\n" + "=" * 60)

