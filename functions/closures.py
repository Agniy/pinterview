"""
üü° –ó–ê–ú–´–ö–ê–ù–ò–Ø (Closures) - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ (scope)
- –ó–∞–º—ã–∫–∞–Ω–∏—è
- nonlocal
- –§–∞–±—Ä–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
"""


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ (closure)?
A: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è "–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç" –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–∫—Ä—É–∂–∞—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏,
–¥–∞–∂–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å.

Q2: –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–º—ã–∫–∞–Ω–∏—è?
A:
- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π-—Ñ–∞–±—Ä–∏–∫
- –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
- –°–æ–∑–¥–∞–Ω–∏–µ callback-—Ñ—É–Ω–∫—Ü–∏–π

Q3: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É global –∏ nonlocal?
A:
- global - –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
- nonlocal - –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π)

Q4: –ß—Ç–æ —Ç–∞–∫–æ–µ LEGB –ø—Ä–∞–≤–∏–ª–æ?
A: –ü–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
- Local (–ª–æ–∫–∞–ª—å–Ω–∞—è)
- Enclosing (–≤–æ –≤–Ω–µ—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö)
- Global (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)
- Built-in (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è)
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ - —Å—á–µ—Ç—á–∏–∫
# ============================================================================

def make_counter():
    """
    üü¢ Junior level
    –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-—Å—á–µ—Ç—á–∏–∫
    """
    count = 0
    
    def counter():
        nonlocal count
        count += 1
        return count
    
    return counter


def demo_counter():
    counter1 = make_counter()
    counter2 = make_counter()
    
    print(f"counter1: {counter1()}")  # 1
    print(f"counter1: {counter1()}")  # 2
    print(f"counter2: {counter2()}")  # 1
    print(f"counter1: {counter1()}")  # 3


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –°—á–µ—Ç—á–∏–∫ —Å reset
# ============================================================================

def make_counter_with_reset():
    """
    üü° Middle level
    –°—á–µ—Ç—á–∏–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∞
    """
    count = 0
    
    def counter():
        nonlocal count
        count += 1
        return count
    
    def reset():
        nonlocal count
        count = 0
    
    def get_count():
        return count
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π
    counter.reset = reset
    counter.get_count = get_count
    
    return counter


def demo_counter_reset():
    counter = make_counter_with_reset()
    
    print(f"–í—ã–∑–æ–≤ 1: {counter()}")
    print(f"–í—ã–∑–æ–≤ 2: {counter()}")
    print(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {counter.get_count()}")
    counter.reset()
    print(f"–ü–æ—Å–ª–µ reset: {counter.get_count()}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –§–∞–±—Ä–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —É–º–Ω–æ–∂–µ–Ω–∏—è
# ============================================================================

def make_multiplier(factor):
    """
    üü¢ Junior level
    –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    """
    def multiplier(number):
        return number * factor
    
    return multiplier


def demo_multiplier():
    double = make_multiplier(2)
    triple = make_multiplier(3)
    
    print(f"double(5) = {double(5)}")    # 10
    print(f"triple(5) = {triple(5)}")    # 15


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –§–∞–±—Ä–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
# ============================================================================

def make_validator(min_val, max_val):
    """
    üü° Middle level
    –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    """
    def validator(value):
        if value < min_val:
            return f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –º–µ–Ω—å—à–µ {min_val}"
        elif value > max_val:
            return f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –±–æ–ª—å—à–µ {max_val}"
        else:
            return f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ"
    
    return validator


def demo_validator():
    age_validator = make_validator(0, 120)
    percent_validator = make_validator(0, 100)
    
    print(age_validator(25))
    print(age_validator(150))
    print(percent_validator(50))
    print(percent_validator(101))


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä
# ============================================================================

def make_accumulator(initial=0):
    """
    üü° Middle level
    –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä
    """
    total = initial
    
    def accumulator(value=0):
        nonlocal total
        total += value
        return total
    
    return accumulator


def demo_accumulator():
    acc = make_accumulator(100)
    
    print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ: {acc()}")      # 100
    print(f"+ 10: {acc(10)}")         # 110
    print(f"+ 5: {acc(5)}")           # 115
    print(f"–¢–µ–∫—É—â–µ–µ: {acc()}")        # 115


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –§—É–Ω–∫—Ü–∏—è-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID
# ============================================================================

def make_id_generator(prefix="ID"):
    """
    üü° Middle level
    –°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    """
    counter = 0
    
    def generate():
        nonlocal counter
        counter += 1
        return f"{prefix}_{counter:04d}"
    
    return generate


def demo_id_generator():
    user_id = make_id_generator("USER")
    order_id = make_id_generator("ORDER")
    
    print(user_id())   # USER_0001
    print(user_id())   # USER_0002
    print(order_id())  # ORDER_0001


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
# ============================================================================

def make_remembering_function(func):
    """
    üü° Middle level
    –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤
    """
    last_args = None
    last_kwargs = None
    last_result = None
    
    def wrapper(*args, **kwargs):
        nonlocal last_args, last_kwargs, last_result
        
        last_args = args
        last_kwargs = kwargs
        last_result = func(*args, **kwargs)
        
        return last_result
    
    def get_last_call():
        return {
            'args': last_args,
            'kwargs': last_kwargs,
            'result': last_result
        }
    
    wrapper.get_last_call = get_last_call
    return wrapper


def demo_remembering():
    @make_remembering_function
    def add(a, b):
        return a + b
    
    add(5, 3)
    add(10, 20)
    
    last = add.get_last_call()
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤: add{last['args']} = {last['result']}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç
# ============================================================================

def make_bank_account(initial_balance=0):
    """
    üî¥ Senior level
    –°–æ–∑–¥–∞–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç —Å –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–µ–π
    """
    balance = initial_balance
    transaction_history = []
    
    def deposit(amount):
        nonlocal balance
        if amount > 0:
            balance += amount
            transaction_history.append(('deposit', amount))
            return f"–î–µ–ø–æ–∑–∏—Ç: {amount}. –ë–∞–ª–∞–Ω—Å: {balance}"
        return "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
    
    def withdraw(amount):
        nonlocal balance
        if amount > balance:
            return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {balance}"
        if amount > 0:
            balance -= amount
            transaction_history.append(('withdraw', amount))
            return f"–°–Ω—è—Ç–∏–µ: {amount}. –ë–∞–ª–∞–Ω—Å: {balance}"
        return "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
    
    def get_balance():
        return balance
    
    def get_history():
        return transaction_history.copy()
    
    return {
        'deposit': deposit,
        'withdraw': withdraw,
        'balance': get_balance,
        'history': get_history
    }


def demo_bank_account():
    account = make_bank_account(1000)
    
    print(account['deposit'](500))
    print(account['withdraw'](200))
    print(account['withdraw'](2000))
    print(f"–ë–∞–ª–∞–Ω—Å: {account['balance']()}")
    print(f"–ò—Å—Ç–æ—Ä–∏—è: {account['history']()}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (partial)
# ============================================================================

def make_partial(func, *fixed_args, **fixed_kwargs):
    """
    üî¥ Senior level
    –°–æ–∑–¥–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    """
    def partial(*args, **kwargs):
        combined_args = fixed_args + args
        combined_kwargs = {**fixed_kwargs, **kwargs}
        return func(*combined_args, **combined_kwargs)
    
    return partial


def demo_partial():
    def power(base, exponent):
        return base ** exponent
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞
    square = make_partial(power, exponent=2)
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫—É–±–∞
    cube = make_partial(power, exponent=3)
    
    print(f"square(5) = {square(5)}")  # 25
    print(f"cube(3) = {cube(3)}")      # 27


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –§—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
# ============================================================================

def make_stateful_function():
    """
    üü° Middle level
    –§—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (—Å–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤)
    """
    calls = []
    
    def function(value):
        calls.append(value)
        return sum(calls) / len(calls)  # –°—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤
    
    def get_calls():
        return calls.copy()
    
    def clear():
        calls.clear()
    
    function.get_calls = get_calls
    function.clear = clear
    
    return function


def demo_stateful():
    avg = make_stateful_function()
    
    print(f"avg(10) = {avg(10)}")     # 10
    print(f"avg(20) = {avg(20)}")     # 15
    print(f"avg(30) = {avg(30)}")     # 20
    print(f"–í—ã–∑–æ–≤—ã: {avg.get_calls()}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 11: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è
# ============================================================================

def compose(*functions):
    """
    üî¥ Senior level
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π
    """
    def composed(x):
        result = x
        for func in reversed(functions):
            result = func(result)
        return result
    
    return composed


def demo_compose():
    def add_one(x):
        return x + 1
    
    def double(x):
        return x * 2
    
    def square(x):
        return x ** 2
    
    # (x + 1) * 2 ** 2
    f = compose(square, double, add_one)
    
    print(f"f(3) = {f(3)}")  # ((3 + 1) * 2) ** 2 = 64


# ============================================================================
# –ó–ê–î–ê–ß–ê 12: –ö–µ—à —Å TTL (Time To Live)
# ============================================================================

import time

def make_cache_with_ttl(ttl_seconds):
    """
    üî¥ Senior level
    –°–æ–∑–¥–∞–µ—Ç –∫–µ—à —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–µ–π
    """
    cache = {}
    
    def get(key):
        if key in cache:
            value, timestamp = cache[key]
            if time.time() - timestamp < ttl_seconds:
                return value
            else:
                del cache[key]
        return None
    
    def set(key, value):
        cache[key] = (value, time.time())
    
    def clear():
        cache.clear()
    
    def size():
        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–º–µ—Ä
        current_time = time.time()
        expired = [k for k, (_, ts) in cache.items() 
                   if current_time - ts >= ttl_seconds]
        for k in expired:
            del cache[k]
        return len(cache)
    
    return {
        'get': get,
        'set': set,
        'clear': clear,
        'size': size
    }


def demo_cache_ttl():
    cache = make_cache_with_ttl(ttl_seconds=2)
    
    cache['set']('key1', 'value1')
    print(f"–°—Ä–∞–∑—É: {cache['get']('key1')}")
    
    time.sleep(1)
    print(f"–ß–µ—Ä–µ–∑ 1—Å: {cache['get']('key1')}")
    
    time.sleep(1.5)
    print(f"–ß–µ—Ä–µ–∑ 2.5—Å: {cache['get']('key1')}")  # None


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ó–ê–ú–´–ö–ê–ù–ò–Ø - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫
    print("\n1. –ü—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫:")
    demo_counter()
    
    # –¢–µ—Å—Ç 2: –°—á–µ—Ç—á–∏–∫ —Å reset
    print("\n2. –°—á–µ—Ç—á–∏–∫ —Å reset:")
    demo_counter_reset()
    
    # –¢–µ—Å—Ç 3: –§–∞–±—Ä–∏–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
    print("\n3. –§–∞–±—Ä–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —É–º–Ω–æ–∂–µ–Ω–∏—è:")
    demo_multiplier()
    
    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
    print("\n4. –§–∞–±—Ä–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤:")
    demo_validator()
    
    # –¢–µ—Å—Ç 5: –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä
    print("\n5. –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä:")
    demo_accumulator()
    
    # –¢–µ—Å—Ç 6: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID
    print("\n6. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID:")
    demo_id_generator()
    
    # –¢–µ—Å—Ç 7: –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞
    print("\n7. –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞:")
    demo_remembering()
    
    # –¢–µ—Å—Ç 8: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç
    print("\n8. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç:")
    demo_bank_account()
    
    # –¢–µ—Å—Ç 9: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    print("\n9. –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    demo_partial()
    
    # –¢–µ—Å—Ç 10: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    print("\n10. –§—É–Ω–∫—Ü–∏—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:")
    demo_stateful()
    
    # –¢–µ—Å—Ç 11: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
    print("\n11. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π:")
    demo_compose()
    
    # –¢–µ—Å—Ç 12: –ö–µ—à —Å TTL
    print("\n12. –ö–µ—à —Å TTL:")
    demo_cache_ttl()
    
    print("\n" + "=" * 60)

