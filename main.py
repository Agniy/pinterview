#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ Python
"""

import sys


def show_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("=" * 60)
    print("Python Interview Questions & Tasks")
    print("–ö–æ–ª–ª–µ–∫—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π")
    print("=" * 60)
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:")
    print("\nüìä –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:")
    print("  1. –°–ø–∏—Å–∫–∏ (Lists)")
    print("  2. –°–ª–æ–≤–∞—Ä–∏ (Dictionaries)")
    print("  3. –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ (Sets)")
    print("  4. –ö–æ—Ä—Ç–µ–∂–∏ (Tuples)")
    
    print("\nüìù –°–¢–†–û–ö–ò:")
    print("  5. –°—Ç—Ä–æ–∫–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏")
    
    print("\nüîß –§–£–ù–ö–¶–ò–ò:")
    print("  6. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã (Decorators)")
    print("  7. –ó–∞–º—ã–∫–∞–Ω–∏—è (Closures)")
    print("  8. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã (Generators)")
    
    print("\nüèóÔ∏è  –û–û–ü:")
    print("  9. –ö–ª–∞—Å—Å—ã –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
    print("  10. –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã (Magic Methods)")
    
    print("\nüßÆ –ê–õ–ì–û–†–ò–¢–ú–´:")
    print("  11. –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    print("  12. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞")
    print("  13. –†–µ–∫—É—Ä—Å–∏—è")
    
    print("\nüöÄ –ü–†–û–î–í–ò–ù–£–¢–´–ï –¢–ï–ú–´:")
    print("  14. –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã")
    print("  15. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã")
    print("  16. –ú–µ—Ç–∞–∫–ª–∞—Å—Å—ã")
    
    print("\n  0. –í—ã—Ö–æ–¥")
    print("=" * 60)


def run_module(choice):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å"""
    
    modules = {
        '1': ('data_structures.lists', '–°–ø–∏—Å–∫–∏'),
        '2': ('data_structures.dicts', '–°–ª–æ–≤–∞—Ä–∏'),
        '3': ('data_structures.sets', '–ú–Ω–æ–∂–µ—Å—Ç–≤–∞'),
        '4': ('data_structures.tuples', '–ö–æ—Ä—Ç–µ–∂–∏'),
        '5': ('strings.string_operations', '–°—Ç—Ä–æ–∫–∏'),
        '6': ('functions.decorators', '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã'),
        '7': ('functions.closures', '–ó–∞–º—ã–∫–∞–Ω–∏—è'),
        '8': ('functions.generators', '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã'),
        '9': ('oop.classes', '–ö–ª–∞—Å—Å—ã –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'),
        '10': ('oop.magic_methods', '–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã'),
        '11': ('algorithms.sorting', '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞'),
        '12': ('algorithms.searching', '–ü–æ–∏—Å–∫'),
        '13': ('algorithms.recursion', '–†–µ–∫—É—Ä—Å–∏—è'),
        '14': ('advanced.iterators', '–ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã'),
        '15': ('advanced.context_managers', '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã'),
        '16': ('advanced.metaclasses', '–ú–µ—Ç–∞–∫–ª–∞—Å—Å—ã'),
    }
    
    if choice == '0':
        print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return False
    
    if choice not in modules:
        print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return True
    
    module_name, display_name = modules[choice]
    
    print(f"\n{'=' * 60}")
    print(f"–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è: {display_name}")
    print(f"{'=' * 60}\n")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å
        module = __import__(module_name, fromlist=[''])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –º–æ–¥—É–ª—è
        if hasattr(module, '__file__'):
            exec(open(module.__file__).read(), {'__name__': '__main__'})
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è: {e}")
        import traceback
        traceback.print_exc()
    
    print(f"\n{'=' * 60}")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    return True


def run_all():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π...\n")
    
    for i in range(1, 17):
        run_module(str(i))
    
    print("\n‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == '--all':
            run_all()
            return
        elif sys.argv[1] == '--help' or sys.argv[1] == '-h':
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python main.py          # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é")
            print("  python main.py --all    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏")
            print("  python main.py <–Ω–æ–º–µ—Ä>  # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å")
            print("\n–ü—Ä–∏–º–µ—Ä—ã:")
            print("  python main.py 1        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å '–°–ø–∏—Å–∫–∏'")
            print("  python main.py 6        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã'")
            return
        else:
            # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            run_module(sys.argv[1])
            return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    while True:
        show_menu()
        
        try:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if not run_module(choice):
                break
        
        except KeyboardInterrupt:
            print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except EOFError:
            print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break


if __name__ == "__main__":
    main()

