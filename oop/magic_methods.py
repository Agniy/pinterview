"""
üü° –ú–ê–ì–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- __init__, __new__, __del__
- __str__, __repr__
- __eq__, __lt__, __gt__ –∏ –¥—Ä.
- __len__, __getitem__, __setitem__
- __call__, __enter__, __exit__
- __add__, __sub__ –∏ –¥—Ä. –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
"""


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã (dunder methods)?
A: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å –¥–≤–æ–π–Ω—ã–º–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ (__method__),
–æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.

Q2: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É __str__ –∏ __repr__?
A:
- __str__ - —á–∏—Ç–∞–µ–º–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
- __repr__ - –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ—Å—Å–æ–∑–¥–∞–≤–∞–µ–º—ã–º)

Q3: –ö–∞–∫–∏–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è?
A: __eq__, __ne__, __lt__, __le__, __gt__, __ge__

Q4: –ß—Ç–æ —Ç–∞–∫–æ–µ __call__?
A: –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é

Q5: –ó–∞—á–µ–º –Ω—É–∂–µ–Ω __enter__ –∏ __exit__?
A: –î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (with statement)
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
# ============================================================================

class Book:
    """
    üü¢ Junior level
    –ö–ª–∞—Å—Å —Å __str__ –∏ __repr__
    """
    
    def __init__(self, title, author, pages):
        self.title = title
        self.author = author
        self.pages = pages
    
    def __str__(self):
        """–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f'"{self.title}" by {self.author}'
    
    def __repr__(self):
        """–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        return f"Book('{self.title}', '{self.author}', {self.pages})"


def demo_book():
    book = Book("1984", "George Orwell", 328)
    
    print(f"str(book): {str(book)}")
    print(f"repr(book): {repr(book)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ú–µ—Ç–æ–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
# ============================================================================

from functools import total_ordering

@total_ordering
class Person:
    """
    üü° Middle level
    –ö–ª–∞—Å—Å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—è @total_ordering)
    """
    
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def __eq__(self, other):
        """–†–∞–≤–µ–Ω—Å—Ç–≤–æ"""
        if not isinstance(other, Person):
            return NotImplemented
        return self.age == other.age
    
    def __lt__(self, other):
        """–ú–µ–Ω—å—à–µ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"""
        if not isinstance(other, Person):
            return NotImplemented
        return self.age < other.age
    
    def __str__(self):
        return f"{self.name} ({self.age})"


def demo_comparison():
    alice = Person("Alice", 30)
    bob = Person("Bob", 25)
    charlie = Person("Charlie", 30)
    
    print(f"{alice} == {charlie}: {alice == charlie}")
    print(f"{alice} > {bob}: {alice > bob}")
    print(f"{bob} < {alice}: {bob < alice}")
    
    people = [alice, bob, charlie]
    print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {sorted(people, key=lambda p: p.age)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
# ============================================================================

class Vector:
    """
    üü° Middle level
    –í–µ–∫—Ç–æ—Ä —Å –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    """
    
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __add__(self, other):
        """–°–ª–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤"""
        return Vector(self.x + other.x, self.y + other.y)
    
    def __sub__(self, other):
        """–í—ã—á–∏—Ç–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤"""
        return Vector(self.x - other.x, self.y - other.y)
    
    def __mul__(self, scalar):
        """–£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞–ª—è—Ä"""
        return Vector(self.x * scalar, self.y * scalar)
    
    def __abs__(self):
        """–î–ª–∏–Ω–∞ –≤–µ–∫—Ç–æ—Ä–∞"""
        return (self.x ** 2 + self.y ** 2) ** 0.5
    
    def __str__(self):
        return f"Vector({self.x}, {self.y})"
    
    def __repr__(self):
        return f"Vector({self.x}, {self.y})"


def demo_vector():
    v1 = Vector(2, 3)
    v2 = Vector(1, 1)
    
    print(f"v1 = {v1}")
    print(f"v2 = {v2}")
    print(f"v1 + v2 = {v1 + v2}")
    print(f"v1 - v2 = {v1 - v2}")
    print(f"v1 * 3 = {v1 * 3}")
    print(f"|v1| = {abs(v1):.2f}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
# ============================================================================

class CustomList:
    """
    üü° Middle level
    –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –º–µ—Ç–æ–¥–∞–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    """
    
    def __init__(self, items=None):
        self.items = items if items is not None else []
    
    def __len__(self):
        """len(obj)"""
        return len(self.items)
    
    def __getitem__(self, index):
        """obj[index]"""
        return self.items[index]
    
    def __setitem__(self, index, value):
        """obj[index] = value"""
        self.items[index] = value
    
    def __delitem__(self, index):
        """del obj[index]"""
        del self.items[index]
    
    def __contains__(self, item):
        """item in obj"""
        return item in self.items
    
    def __iter__(self):
        """for item in obj"""
        return iter(self.items)
    
    def __reversed__(self):
        """reversed(obj)"""
        return reversed(self.items)
    
    def append(self, item):
        self.items.append(item)
    
    def __str__(self):
        return f"CustomList({self.items})"


def demo_custom_list():
    cl = CustomList([1, 2, 3, 4, 5])
    
    print(f"–°–ø–∏—Å–æ–∫: {cl}")
    print(f"–î–ª–∏–Ω–∞: {len(cl)}")
    print(f"cl[2] = {cl[2]}")
    print(f"3 in cl: {3 in cl}")
    
    print("–ò—Ç–µ—Ä–∞—Ü–∏—è:")
    for item in cl:
        print(item, end=' ')
    print()


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: __call__ - –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
# ============================================================================

class Multiplier:
    """
    üü° Middle level
    –í—ã–∑—ã–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è
    """
    
    def __init__(self, factor):
        self.factor = factor
    
    def __call__(self, x):
        """–î–µ–ª–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –≤—ã–∑—ã–≤–∞–µ–º—ã–º"""
        return x * self.factor


class Counter:
    """
    üü° Middle level
    –°—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤
    """
    
    def __init__(self):
        self.count = 0
    
    def __call__(self):
        self.count += 1
        return self.count


def demo_callable():
    # Multiplier
    double = Multiplier(2)
    triple = Multiplier(3)
    
    print(f"double(5) = {double(5)}")
    print(f"triple(5) = {triple(5)}")
    
    # Counter
    counter = Counter()
    print(f"–í—ã–∑–æ–≤ 1: {counter()}")
    print(f"–í—ã–∑–æ–≤ 2: {counter()}")
    print(f"–í—ã–∑–æ–≤ 3: {counter()}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
# ============================================================================

class FileManager:
    """
    üî¥ Senior level
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    """
    
    def __init__(self, filename, mode):
        self.filename = filename
        self.mode = mode
        self.file = None
    
    def __enter__(self):
        """–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        print(f"–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ {self.filename}")
        self.file = open(self.filename, self.mode)
        return self.file
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        print(f"–ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ {self.filename}")
        if self.file:
            self.file.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–±—Ä–æ—Å–∏–ª–æ—Å—å –¥–∞–ª—å—à–µ
        return False


class Timer:
    """
    üü° Middle level
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    """
    
    def __enter__(self):
        import time
        self.start = time.time()
        return self
    
    def __exit__(self, *args):
        import time
        self.end = time.time()
        self.elapsed = self.end - self.start
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.elapsed:.4f}—Å")
        return False


def demo_context_manager():
    # Timer
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Timer:")
    with Timer() as timer:
        import time
        time.sleep(0.1)
        sum([i**2 for i in range(1000)])


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –ê—Ç—Ä–∏–±—É—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
# ============================================================================

class DynamicAttributes:
    """
    üî¥ Senior level
    –ö–ª–∞—Å—Å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    """
    
    def __init__(self):
        self._attributes = {}
    
    def __getattr__(self, name):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        if name in self._attributes:
            return self._attributes[name]
        raise AttributeError(f"'{type(self).__name__}' object has no attribute '{name}'")
    
    def __setattr__(self, name, value):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞—Ç—Ä–∏–±—É—Ç–∞"""
        if name.startswith('_'):
            # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            super().__setattr__(name, value)
        else:
            self._attributes[name] = value
    
    def __delattr__(self, name):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞"""
        if name in self._attributes:
            del self._attributes[name]
        else:
            raise AttributeError(name)


def demo_dynamic_attrs():
    obj = DynamicAttributes()
    
    obj.name = "Alice"
    obj.age = 30
    
    print(f"name: {obj.name}")
    print(f"age: {obj.age}")
    
    del obj.age
    try:
        print(obj.age)
    except AttributeError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–Ω—ã–π –∫–ª–∞—Å—Å
# ============================================================================

class ValidatedString:
    """
    üî¥ Senior level
    –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
    """
    
    def __init__(self, min_length=0, max_length=100):
        self.min_length = min_length
        self.max_length = max_length
    
    def __set_name__(self, owner, name):
        self.name = name
    
    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        return obj.__dict__.get(self.name, '')
    
    def __set__(self, obj, value):
        if not isinstance(value, str):
            raise TypeError(f"{self.name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if len(value) < self.min_length:
            raise ValueError(f"{self.name} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        if len(value) > self.max_length:
            raise ValueError(f"{self.name} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
        obj.__dict__[self.name] = value


class User:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    username = ValidatedString(min_length=3, max_length=20)
    email = ValidatedString(min_length=5, max_length=100)
    
    def __init__(self, username, email):
        self.username = username
        self.email = email


def demo_descriptor():
    try:
        user = User("alice123", "alice@example.com")
        print(f"User: {user.username}, {user.email}")
        
        user.username = "ab"  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –ú–µ—Ç–∞–∫–ª–∞—Å—Å—ã —á–µ—Ä–µ–∑ __init_subclass__
# ============================================================================

class PluginBase:
    """
    üî¥ Senior level
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤
    """
    
    plugins = {}
    
    def __init_subclass__(cls, plugin_name=None, **kwargs):
        super().__init_subclass__(**kwargs)
        if plugin_name:
            cls.plugins[plugin_name] = cls


class ImagePlugin(PluginBase, plugin_name='image'):
    def process(self):
        return "Processing image"


class VideoPlugin(PluginBase, plugin_name='video'):
    def process(self):
        return "Processing video"


def demo_init_subclass():
    print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:")
    for name, plugin_class in PluginBase.plugins.items():
        plugin = plugin_class()
        print(f"  {name}: {plugin.process()}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Ç–∏–ø–∞
# ============================================================================

class Fraction:
    """
    üî¥ Senior level
    –î—Ä–æ–±—å —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    """
    
    def __init__(self, numerator, denominator):
        if denominator == 0:
            raise ValueError("–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0")
        
        # –£–ø—Ä–æ—â–∞–µ–º –¥—Ä–æ–±—å
        from math import gcd
        g = gcd(abs(numerator), abs(denominator))
        self.numerator = numerator // g
        self.denominator = denominator // g
        
        # –ó–Ω–∞–∫ –≤—Å–µ–≥–¥–∞ –≤ —á–∏—Å–ª–∏—Ç–µ–ª–µ
        if self.denominator < 0:
            self.numerator = -self.numerator
            self.denominator = -self.denominator
    
    def __add__(self, other):
        if isinstance(other, int):
            other = Fraction(other, 1)
        return Fraction(
            self.numerator * other.denominator + other.numerator * self.denominator,
            self.denominator * other.denominator
        )
    
    def __sub__(self, other):
        if isinstance(other, int):
            other = Fraction(other, 1)
        return Fraction(
            self.numerator * other.denominator - other.numerator * self.denominator,
            self.denominator * other.denominator
        )
    
    def __mul__(self, other):
        if isinstance(other, int):
            other = Fraction(other, 1)
        return Fraction(
            self.numerator * other.numerator,
            self.denominator * other.denominator
        )
    
    def __truediv__(self, other):
        if isinstance(other, int):
            other = Fraction(other, 1)
        return Fraction(
            self.numerator * other.denominator,
            self.denominator * other.numerator
        )
    
    def __eq__(self, other):
        if isinstance(other, int):
            other = Fraction(other, 1)
        return (self.numerator == other.numerator and 
                self.denominator == other.denominator)
    
    def __float__(self):
        return self.numerator / self.denominator
    
    def __str__(self):
        return f"{self.numerator}/{self.denominator}"
    
    def __repr__(self):
        return f"Fraction({self.numerator}, {self.denominator})"


def demo_fraction():
    f1 = Fraction(1, 2)
    f2 = Fraction(1, 3)
    
    print(f"f1 = {f1}")
    print(f"f2 = {f2}")
    print(f"f1 + f2 = {f1 + f2}")
    print(f"f1 - f2 = {f1 - f2}")
    print(f"f1 * f2 = {f1 * f2}")
    print(f"f1 / f2 = {f1 / f2}")
    print(f"float(f1) = {float(f1)}")


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ú–ê–ì–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: __str__ –∏ __repr__
    print("\n1. __str__ –∏ __repr__:")
    demo_book()
    
    # –¢–µ—Å—Ç 2: –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("\n2. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    demo_comparison()
    
    # –¢–µ—Å—Ç 3: –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    print("\n3. –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (Vector):")
    demo_vector()
    
    # –¢–µ—Å—Ç 4: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    print("\n4. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
    demo_custom_list()
    
    # –¢–µ—Å—Ç 5: __call__
    print("\n5. __call__ (–≤—ã–∑—ã–≤–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã):")
    demo_callable()
    
    # –¢–µ—Å—Ç 6: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    print("\n6. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:")
    demo_context_manager()
    
    # –¢–µ—Å—Ç 7: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    print("\n7. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã:")
    demo_dynamic_attrs()
    
    # –¢–µ—Å—Ç 8: –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
    print("\n8. –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    demo_descriptor()
    
    # –¢–µ—Å—Ç 9: __init_subclass__
    print("\n9. __init_subclass__ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤):")
    demo_init_subclass()
    
    # –¢–µ—Å—Ç 10: –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Ç–∏–ø–∞
    print("\n10. Fraction (–ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è):")
    demo_fraction()
    
    print("\n" + "=" * 60)

