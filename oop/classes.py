"""
üü° –ö–õ–ê–°–°–´ –ò –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã
- –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
- –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º
- –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ MRO
- –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
"""

from abc import ABC, abstractmethod


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–ª–∞—Å—Å –∏ –æ–±—ä–µ–∫—Ç?
A:
- –ö–ª–∞—Å—Å - —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
- –û–±—ä–µ–∫—Ç - —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞

Q2: –ß—Ç–æ —Ç–∞–∫–æ–µ self?
A: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞

Q3: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É __init__ –∏ __new__?
A:
- __new__ - —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º)
- __init__ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä

Q4: –ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?
A: –ú–µ—Ö–∞–Ω–∏–∑–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ,
–Ω–∞—Å–ª–µ–¥—É—è –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã.

Q5: –ß—Ç–æ —Ç–∞–∫–æ–µ MRO (Method Resolution Order)?
A: –ü–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–ª–∞—Å—Å–æ–≤.
–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ ClassName.__mro__ –∏–ª–∏ ClassName.mro()

Q6: –ö–∞–∫–∏–µ –≤–∏–¥—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –µ—Å—Ç—å –≤ Python?
A:
- –ê—Ç—Ä–∏–±—É—Ç—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (instance attributes)
- –ê—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞ (class attributes)
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å - –¢–æ—á–∫–∞
# ============================================================================

class Point:
    """
    üü¢ Junior level
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤ 2D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    """
    
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
    
    def distance_from_origin(self):
        """–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        return (self.x ** 2 + self.y ** 2) ** 0.5
    
    def distance_to(self, other):
        """–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥—Ä—É–≥–æ–π —Ç–æ—á–∫–∏"""
        return ((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5
    
    def __str__(self):
        return f"Point({self.x}, {self.y})"


def demo_point():
    p1 = Point(3, 4)
    p2 = Point(0, 0)
    
    print(f"–¢–æ—á–∫–∞: {p1}")
    print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞: {p1.distance_from_origin()}")
    print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ {p2}: {p1.distance_to(p2)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã
# ============================================================================

class Shape(ABC):
    """
    üü° Middle level
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–∏–≥—É—Ä
    """
    
    @abstractmethod
    def area(self):
        """–ü–ª–æ—â–∞–¥—å —Ñ–∏–≥—É—Ä—ã"""
        pass
    
    @abstractmethod
    def perimeter(self):
        """–ü–µ—Ä–∏–º–µ—Ç—Ä —Ñ–∏–≥—É—Ä—ã"""
        pass


class Rectangle(Shape):
    """–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫"""
    
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height
    
    def perimeter(self):
        return 2 * (self.width + self.height)
    
    def __str__(self):
        return f"Rectangle({self.width}x{self.height})"


class Circle(Shape):
    """–ö—Ä—É–≥"""
    
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        import math
        return math.pi * self.radius ** 2
    
    def perimeter(self):
        import math
        return 2 * math.pi * self.radius
    
    def __str__(self):
        return f"Circle(r={self.radius})"


def demo_shapes():
    shapes = [
        Rectangle(5, 3),
        Circle(4),
        Rectangle(2, 2)
    ]
    
    for shape in shapes:
        print(f"{shape}: Area={shape.area():.2f}, Perimeter={shape.perimeter():.2f}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ê—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞ vs –∞—Ç—Ä–∏–±—É—Ç—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
# ============================================================================

class Employee:
    """
    üü° Middle level
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    """
    
    company = "TechCorp"  # –ê—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
    employee_count = 0     # –ê—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
    
    def __init__(self, name, salary):
        self.name = name       # –ê—Ç—Ä–∏–±—É—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        self.salary = salary   # –ê—Ç—Ä–∏–±—É—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        Employee.employee_count += 1
    
    @classmethod
    def get_employee_count(cls):
        """–ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞"""
        return cls.employee_count
    
    @staticmethod
    def is_valid_salary(salary):
        """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥"""
        return salary > 0
    
    def __str__(self):
        return f"{self.name} (${self.salary})"


def demo_employee():
    emp1 = Employee("Alice", 50000)
    emp2 = Employee("Bob", 60000)
    
    print(f"–ö–æ–º–ø–∞–Ω–∏—è: {Employee.company}")
    print(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {Employee.get_employee_count()}")
    print(f"emp1: {emp1}")
    print(f"emp2: {emp2}")
    print(f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞: {Employee.is_valid_salary(50000)}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
# ============================================================================

class Flyable:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –ª–µ—Ç–∞—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    
    def fly(self):
        return f"{self.__class__.__name__} –ª–µ—Ç–∏—Ç"


class Swimmable:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –ø–ª–∞–≤–∞—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    
    def swim(self):
        return f"{self.__class__.__name__} –ø–ª—ã–≤–µ—Ç"


class Animal:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
    
    def __init__(self, name):
        self.name = name
    
    def speak(self):
        return f"{self.name} –∏–∑–¥–∞–µ—Ç –∑–≤—É–∫"


class Duck(Animal, Flyable, Swimmable):
    """
    üî¥ Senior level
    –£—Ç–∫–∞ - –ª–µ—Ç–∞–µ—Ç –∏ –ø–ª–∞–≤–∞–µ—Ç
    """
    
    def speak(self):
        return f"{self.name} –≥–æ–≤–æ—Ä–∏—Ç: –ö—Ä—è-–∫—Ä—è!"


def demo_multiple_inheritance():
    duck = Duck("–î–æ–Ω–∞–ª—å–¥")
    
    print(duck.speak())
    print(duck.fly())
    print(duck.swim())
    
    print(f"\nMRO: {[c.__name__ for c in Duck.__mro__]}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: Property –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
# ============================================================================

class Temperature:
    """
    üü° Middle level
    –ö–ª–∞—Å—Å —Å property –¥–ª—è –≥–µ—Ç—Ç–µ—Ä–æ–≤ –∏ —Å–µ—Ç—Ç–µ—Ä–æ–≤
    """
    
    def __init__(self, celsius=0):
        self._celsius = celsius
    
    @property
    def celsius(self):
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¶–µ–ª—å—Å–∏—è"""
        return self._celsius
    
    @celsius.setter
    def celsius(self, value):
        """–°–µ—Ç—Ç–µ—Ä –¥–ª—è –¶–µ–ª—å—Å–∏—è"""
        if value < -273.15:
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –Ω—É–ª—è!")
        self._celsius = value
    
    @property
    def fahrenheit(self):
        """–§–∞—Ä–µ–Ω–≥–µ–π—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)"""
        return self._celsius * 9/5 + 32
    
    @property
    def kelvin(self):
        """–ö–µ–ª—å–≤–∏–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)"""
        return self._celsius + 273.15


def demo_property():
    temp = Temperature(25)
    
    print(f"–¶–µ–ª—å—Å–∏–π: {temp.celsius}¬∞C")
    print(f"–§–∞—Ä–µ–Ω–≥–µ–π—Ç: {temp.fahrenheit}¬∞F")
    print(f"–ö–µ–ª—å–≤–∏–Ω: {temp.kelvin}K")
    
    temp.celsius = 0
    print(f"\n–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {temp.celsius}¬∞C = {temp.fahrenheit}¬∞F")


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è vs –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
# ============================================================================

class Engine:
    """–î–≤–∏–≥–∞—Ç–µ–ª—å (–∫–æ–º–ø–æ–∑–∏—Ü–∏—è)"""
    
    def __init__(self, horsepower):
        self.horsepower = horsepower
    
    def start(self):
        return f"–î–≤–∏–≥–∞—Ç–µ–ª—å {self.horsepower}HP –∑–∞–ø—É—â–µ–Ω"


class Car:
    """
    üü° Middle level
    –ê–≤—Ç–æ–º–æ–±–∏–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é (has-a relationship)
    """
    
    def __init__(self, brand, engine):
        self.brand = brand
        self.engine = engine  # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
    
    def start(self):
        return f"{self.brand}: {self.engine.start()}"


def demo_composition():
    engine = Engine(200)
    car = Car("Toyota", engine)
    
    print(car.start())


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –ü–∞—Ç—Ç–µ—Ä–Ω –°–∏–Ω–≥–ª—Ç–æ–Ω —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å
# ============================================================================

class Singleton:
    """
    üî¥ Senior level
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton —á–µ—Ä–µ–∑ __new__
    """
    
    _instance = None
    
    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self, value=None):
        if not hasattr(self, 'initialized'):
            self.value = value
            self.initialized = True


def demo_singleton():
    s1 = Singleton("first")
    s2 = Singleton("second")
    
    print(f"s1.value: {s1.value}")
    print(f"s2.value: {s2.value}")
    print(f"s1 is s2: {s1 is s2}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
# ============================================================================

class PositiveNumber:
    """
    üî¥ Senior level
    –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    """
    
    def __init__(self, name):
        self.name = name
    
    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        return obj.__dict__.get(self.name, 0)
    
    def __set__(self, obj, value):
        if value < 0:
            raise ValueError(f"{self.name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        obj.__dict__[self.name] = value


class Product:
    """–¢–æ–≤–∞—Ä —Å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏"""
    
    price = PositiveNumber('price')
    quantity = PositiveNumber('quantity')
    
    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity
    
    def total_cost(self):
        return self.price * self.quantity


def demo_descriptor():
    product = Product("Laptop", 1000, 5)
    print(f"{product.name}: ${product.total_cost()}")
    
    try:
        product.price = -100
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –°—á–µ—Ç—á–∏–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
# ============================================================================

class CountedClass:
    """
    üü° Middle level
    –ö–ª–∞—Å—Å, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    """
    
    instance_count = 0
    
    def __init__(self, name):
        self.name = name
        CountedClass.instance_count += 1
        self.instance_number = CountedClass.instance_count
    
    def __del__(self):
        CountedClass.instance_count -= 1
    
    def __str__(self):
        return f"Instance #{self.instance_number}: {self.name}"


def demo_counted():
    obj1 = CountedClass("First")
    obj2 = CountedClass("Second")
    obj3 = CountedClass("Third")
    
    print(f"–í—Å–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {CountedClass.instance_count}")
    print(obj1)
    print(obj2)
    print(obj3)


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
# ============================================================================

class Pizza(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–∏—Ü—Ü—ã"""
    
    @abstractmethod
    def prepare(self):
        pass


class MargheritaPizza(Pizza):
    def prepare(self):
        return "–ì–æ—Ç–æ–≤–∏–º –ú–∞—Ä–≥–∞—Ä–∏—Ç—É: —Ç–µ—Å—Ç–æ, —Ç–æ–º–∞—Ç—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫"


class PepperoniPizza(Pizza):
    def prepare(self):
        return "–ì–æ—Ç–æ–≤–∏–º –ü–µ–ø–ø–µ—Ä–æ–Ω–∏: —Ç–µ—Å—Ç–æ, —Ç–æ–º–∞—Ç—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏"


class PizzaFactory:
    """
    üü° Middle level
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ü—Ü
    """
    
    @staticmethod
    def create_pizza(pizza_type):
        if pizza_type == "margherita":
            return MargheritaPizza()
        elif pizza_type == "pepperoni":
            return PepperoniPizza()
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏—Ü—Ü—ã: {pizza_type}")


def demo_factory():
    factory = PizzaFactory()
    
    pizza1 = factory.create_pizza("margherita")
    pizza2 = factory.create_pizza("pepperoni")
    
    print(pizza1.prepare())
    print(pizza2.prepare())


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ö–õ–ê–°–°–´ –ò –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å
    print("\n1. –ö–ª–∞—Å—Å Point:")
    demo_point()
    
    # –¢–µ—Å—Ç 2: –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    print("\n2. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (—Ñ–∏–≥—É—Ä—ã):")
    demo_shapes()
    
    # –¢–µ—Å—Ç 3: –ê—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
    print("\n3. –ê—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞ –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:")
    demo_employee()
    
    # –¢–µ—Å—Ç 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    print("\n4. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:")
    demo_multiple_inheritance()
    
    # –¢–µ—Å—Ç 5: Property
    print("\n5. Property –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä:")
    demo_property()
    
    # –¢–µ—Å—Ç 6: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
    print("\n6. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è:")
    demo_composition()
    
    # –¢–µ—Å—Ç 7: –°–∏–Ω–≥–ª—Ç–æ–Ω
    print("\n7. Singleton:")
    demo_singleton()
    
    # –¢–µ—Å—Ç 8: –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
    print("\n8. –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã:")
    demo_descriptor()
    
    # –¢–µ—Å—Ç 9: –°—á–µ—Ç—á–∏–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    print("\n9. –°—á–µ—Ç—á–∏–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:")
    demo_counted()
    
    # –¢–µ—Å—Ç 10: –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
    print("\n10. –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥:")
    demo_factory()
    
    print("\n" + "=" * 60)

