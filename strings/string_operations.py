"""
üü¢ –°–¢–†–û–ö–ò (Strings) - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –ú–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- String slicing
- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
- –ö–æ–¥–∏—Ä–æ–≤–∫–∏
"""

import re
from collections import Counter


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –°—Ç—Ä–æ–∫–∏ –≤ Python –∏–∑–º–µ–Ω—è–µ–º—ã –∏–ª–∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã?
A: –ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã (immutable). –õ—é–±–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.

Q2: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ' ', " " –∏ ''' '''?
A:
- 'single' –∏ "double" - —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã
- '''triple''' –∏–ª–∏ \"\"\"triple\"\"\" - –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

Q3: –ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫?
A:
- % —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: "Hello %s" % name
- str.format(): "Hello {}".format(name)
- f-strings (Python 3.6+): f"Hello {name}"

Q4: –ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã split() –∏ join()?
A:
- split() - —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫
- join() - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É

Q5: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É find() –∏ index()?
A:
- find() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
- index() –≤—ã–∑—ã–≤–∞–µ—Ç ValueError –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

Q6: –ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å—Ä–µ–∑—ã (slicing)?
A: s[start:end:step] - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –†–∞–∑–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏
# ============================================================================

def reverse_string(s):
    """
    üü¢ Junior level
    –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É
    
    >>> reverse_string("hello")
    'olleh'
    """
    return s[::-1]


def reverse_words(s):
    """
    –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    
    >>> reverse_words("hello world python")
    'python world hello'
    """
    return ' '.join(s.split()[::-1])


def reverse_each_word(s):
    """
    –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    
    >>> reverse_each_word("hello world")
    'olleh dlrow'
    """
    return ' '.join(word[::-1] for word in s.split())


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
# ============================================================================

def is_palindrome(s):
    """
    üü¢ Junior level
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
    
    >>> is_palindrome("racecar")
    True
    >>> is_palindrome("hello")
    False
    """
    return s == s[::-1]


def is_palindrome_ignore_case(s):
    """
    –ò–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã
    
    >>> is_palindrome_ignore_case("A man a plan a canal Panama")
    True
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned = ''.join(c.lower() for c in s if c.isalnum())
    return cleaned == cleaned[::-1]


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
# ============================================================================

def count_characters(s):
    """
    üü¢ Junior level
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    
    >>> count_characters("hello")
    {'h': 1, 'e': 1, 'l': 2, 'o': 1}
    """
    return dict(Counter(s))


def count_vowels_consonants(s):
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥–ª–∞—Å–Ω—ã–µ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã–µ
    
    >>> count_vowels_consonants("hello world")
    {'vowels': 3, 'consonants': 7}
    """
    vowels = "aeiouAEIOU"
    v_count = sum(1 for c in s if c in vowels)
    c_count = sum(1 for c in s if c.isalpha() and c not in vowels)
    
    return {'vowels': v_count, 'consonants': c_count}


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
# ============================================================================

def remove_duplicates(s):
    """
    üü¢ Junior level
    –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    
    >>> remove_duplicates("hello")
    'helo'
    """
    seen = set()
    result = []
    for char in s:
        if char not in seen:
            seen.add(char)
            result.append(char)
    return ''.join(result)


def remove_duplicate_words(s):
    """
    –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    
    >>> remove_duplicate_words("hello world hello python world")
    'hello world python'
    """
    seen = set()
    result = []
    for word in s.split():
        if word not in seen:
            seen.add(word)
            result.append(word)
    return ' '.join(result)


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –°–∂–∞—Ç–∏–µ —Å—Ç—Ä–æ–∫–∏
# ============================================================================

def compress_string(s):
    """
    üü° Middle level
    –°–∂–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (run-length encoding)
    
    >>> compress_string("aabcccccaaa")
    'a2b1c5a3'
    >>> compress_string("abc")
    'abc'  # –ù–µ —Å–∂–∏–º–∞–µ–º –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∫–æ—Ä–æ—á–µ
    """
    if not s:
        return s
    
    compressed = []
    count = 1
    
    for i in range(1, len(s)):
        if s[i] == s[i-1]:
            count += 1
        else:
            compressed.append(s[i-1] + str(count))
            count = 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
    compressed.append(s[-1] + str(count))
    
    result = ''.join(compressed)
    return result if len(result) < len(s) else s


def decompress_string(s):
    """
    –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç —Å–∂–∞—Ç—É—é —Å—Ç—Ä–æ–∫—É
    
    >>> decompress_string("a2b1c5")
    'aabccccc'
    """
    result = []
    i = 0
    
    while i < len(s):
        char = s[i]
        i += 1
        
        # –°–æ–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ
        num_str = ''
        while i < len(s) and s[i].isdigit():
            num_str += s[i]
            i += 1
        
        count = int(num_str) if num_str else 1
        result.append(char * count)
    
    return ''.join(result)


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –ü–µ—Ä–≤—ã–π –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª
# ============================================================================

def first_unique_char(s):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª
    
    >>> first_unique_char("leetcode")
    'l'
    >>> first_unique_char("loveleetcode")
    'v'
    """
    counts = Counter(s)
    
    for char in s:
        if counts[char] == 1:
            return char
    
    return None


def first_unique_char_index(s):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    """
    counts = Counter(s)
    
    for i, char in enumerate(s):
        if counts[char] == 1:
            return i
    
    return -1


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
# ============================================================================

def longest_substring_without_repeating(s):
    """
    üî¥ Senior level
    –ù–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
    
    >>> longest_substring_without_repeating("abcabcbb")
    3  # "abc"
    >>> longest_substring_without_repeating("bbbbb")
    1  # "b"
    """
    char_index = {}
    max_length = 0
    start = 0
    
    for end, char in enumerate(s):
        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –∏ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
        if char in char_index and char_index[char] >= start:
            start = char_index[char] + 1
        
        char_index[char] = end
        max_length = max(max_length, end - start + 1)
    
    return max_length


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
# ============================================================================

def is_substring(s1, s2):
    """
    üü¢ Junior level
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ s2 –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π s1
    
    >>> is_substring("hello world", "world")
    True
    """
    return s2 in s1


def is_rotation(s1, s2):
    """
    üü° Middle level
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ s2 —Ä–æ—Ç–∞—Ü–∏–µ–π s1
    
    >>> is_rotation("waterbottle", "erbottlewat")
    True
    """
    if len(s1) != len(s2):
        return False
    
    # –•–∏—Ç—Ä–æ—Å—Ç—å: –µ—Å–ª–∏ s2 - —Ä–æ—Ç–∞—Ü–∏—è s1, —Ç–æ s2 –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π s1+s1
    return s2 in (s1 + s1)


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
# ============================================================================

def string_formatting_examples():
    """
    üü¢ Junior level
    –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    name = "Alice"
    age = 30
    pi = 3.14159
    
    # % —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å)
    print("% formatting:")
    print("  Hello %s, you are %d years old" % (name, age))
    print("  Pi: %.2f" % pi)
    
    # str.format()
    print("\nstr.format():")
    print("  Hello {}, you are {} years old".format(name, age))
    print("  Hello {name}, you are {age} years old".format(name=name, age=age))
    print("  Pi: {:.2f}".format(pi))
    
    # f-strings (Python 3.6+)
    print("\nf-strings:")
    print(f"  Hello {name}, you are {age} years old")
    print(f"  Pi: {pi:.2f}")
    print(f"  Expression: {2 + 2 = }")  # Python 3.8+
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ:")
    print(f"  Left:   '{name:<10}'")
    print(f"  Right:  '{name:>10}'")
    print(f"  Center: '{name:^10}'")
    print(f"  Fill:   '{name:*^10}'")


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# ============================================================================

def regex_examples():
    """
    üü° Middle level
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    """
    
    # –ü–æ–∏—Å–∫ email
    text = "Contact: john@example.com or jane@test.org"
    emails = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', text)
    print(f"Emails: {emails}")
    
    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    text = "Call 123-456-7890 or (987) 654-3210"
    phones = re.findall(r'\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}', text)
    print(f"Phones: {phones}")
    
    # –ó–∞–º–µ–Ω–∞
    text = "Hello 123 World 456"
    no_digits = re.sub(r'\d+', 'NUM', text)
    print(f"–ó–∞–º–µ–Ω–∞ —Ü–∏—Ñ—Ä: {no_digits}")
    
    # –†–∞–∑–±–∏–µ–Ω–∏–µ
    text = "apple,banana;orange|grape"
    fruits = re.split(r'[,;|]', text)
    print(f"Fruits: {fruits}")
    
    # –ì—Ä—É–ø–ø—ã
    pattern = r'(\w+)@(\w+)\.(\w+)'
    match = re.search(pattern, "user@example.com")
    if match:
        print(f"Username: {match.group(1)}")
        print(f"Domain: {match.group(2)}")
        print(f"TLD: {match.group(3)}")


def validate_email(email):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è email
    """
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))


def extract_urls(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞
    """
    pattern = r'https?://(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&/=]*)'
    return re.findall(pattern, text)


# ============================================================================
# –ó–ê–î–ê–ß–ê 11: –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
# ============================================================================

def string_methods_examples():
    """
    üü¢ Junior level
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    """
    s = "  Hello World  "
    
    print(f"–ò—Å—Ö–æ–¥–Ω–∞—è: '{s}'")
    print(f"strip():  '{s.strip()}'")
    print(f"lstrip(): '{s.lstrip()}'")
    print(f"rstrip(): '{s.rstrip()}'")
    
    s = "hello world"
    print(f"\n–ò—Å—Ö–æ–¥–Ω–∞—è: '{s}'")
    print(f"upper():      '{s.upper()}'")
    print(f"lower():      '{s.lower()}'")
    print(f"capitalize(): '{s.capitalize()}'")
    print(f"title():      '{s.title()}'")
    print(f"swapcase():   '{s.swapcase()}'")
    
    s = "apple,banana,orange"
    print(f"\n–ò—Å—Ö–æ–¥–Ω–∞—è: '{s}'")
    print(f"split(','): {s.split(',')}")
    
    words = ['apple', 'banana', 'orange']
    print(f"–°–ø–∏—Å–æ–∫: {words}")
    print(f"join('-'): '{'-'.join(words)}'")
    
    s = "hello"
    print(f"\n–ò—Å—Ö–æ–¥–Ω–∞—è: '{s}'")
    print(f"startswith('he'): {s.startswith('he')}")
    print(f"endswith('lo'):   {s.endswith('lo')}")
    print(f"find('ll'):       {s.find('ll')}")
    print(f"replace('l', 'L'): '{s.replace('l', 'L')}'")


# ============================================================================
# –ó–ê–î–ê–ß–ê 12: –ê–Ω–∞–≥—Ä–∞–º–º—ã
# ============================================================================

def are_anagrams(s1, s2):
    """
    üü¢ Junior level
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏
    
    >>> are_anagrams("listen", "silent")
    True
    """
    return sorted(s1.lower()) == sorted(s2.lower())


def group_anagrams(words):
    """
    üü° Middle level
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞-–∞–Ω–∞–≥—Ä–∞–º–º—ã
    
    >>> group_anagrams(["eat", "tea", "tan", "ate", "nat", "bat"])
    [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]
    """
    from collections import defaultdict
    
    groups = defaultdict(list)
    for word in words:
        key = ''.join(sorted(word.lower()))
        groups[key].append(word)
    
    return list(groups.values())


# ============================================================================
# –ó–ê–î–ê–ß–ê 13: –ö–æ–¥–∏—Ä–æ–≤–∫–∏
# ============================================================================

def encoding_examples():
    """
    üü° Middle level
    –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
    """
    
    # Unicode —Å—Ç—Ä–æ–∫–∞
    s = "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! ‰Ω†Â•Ω‰∏ñÁïå"
    print(f"–°—Ç—Ä–æ–∫–∞: {s}")
    print(f"–î–ª–∏–Ω–∞: {len(s)}")
    
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ bytes
    utf8_bytes = s.encode('utf-8')
    print(f"\nUTF-8 bytes: {utf8_bytes}")
    print(f"–†–∞–∑–º–µ—Ä: {len(utf8_bytes)} –±–∞–π—Ç")
    
    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
    decoded = utf8_bytes.decode('utf-8')
    print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ: {decoded}")
    
    # –†–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    try:
        latin1 = s.encode('latin-1')
    except UnicodeEncodeError:
        print("\n–ù–µ–ª—å–∑—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ latin-1 (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É/–∫–∏—Ç–∞–π—Å–∫–∏–π)")
    
    # ASCII —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    ascii_ignore = s.encode('ascii', errors='ignore')
    ascii_replace = s.encode('ascii', errors='replace')
    print(f"\nASCII (ignore): {ascii_ignore}")
    print(f"ASCII (replace): {ascii_replace}")


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–°–¢–†–û–ö–ò - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –†–∞–∑–≤–æ—Ä–æ—Ç
    print("\n1. –†–∞–∑–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫:")
    print(f"   –°—Ç—Ä–æ–∫–∞: {reverse_string('hello world')}")
    print(f"   –°–ª–æ–≤–∞: {reverse_words('hello world python')}")
    print(f"   –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ: {reverse_each_word('hello world')}")
    
    # –¢–µ—Å—Ç 2: –ü–∞–ª–∏–Ω–¥—Ä–æ–º
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞:")
    print(f"   'racecar': {is_palindrome('racecar')}")
    print(f"   'A man a plan a canal Panama': {is_palindrome_ignore_case('A man a plan a canal Panama')}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤
    print("\n3. –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤:")
    print(f"   'hello': {count_characters('hello')}")
    print(f"   –ì–ª–∞—Å–Ω—ã–µ/—Å–æ–≥–ª–∞—Å–Ω—ã–µ –≤ 'hello world': {count_vowels_consonants('hello world')}")
    
    # –¢–µ—Å—Ç 4: –°–∂–∞—Ç–∏–µ
    print("\n4. –°–∂–∞—Ç–∏–µ —Å—Ç—Ä–æ–∫–∏:")
    test = "aabcccccaaa"
    compressed = compress_string(test)
    print(f"   '{test}' -> '{compressed}'")
    print(f"   –û–±—Ä–∞—Ç–Ω–æ: '{decompress_string(compressed)}'")
    
    # –¢–µ—Å—Ç 5: –ü–µ—Ä–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
    print("\n5. –ü–µ—Ä–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª:")
    print(f"   'leetcode': {first_unique_char('leetcode')}")
    print(f"   'loveleetcode': {first_unique_char('loveleetcode')}")
    
    # –¢–µ—Å—Ç 6: –î–ª–∏–Ω–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    print("\n6. Longest substring without repeating:")
    print(f"   'abcabcbb': {longest_substring_without_repeating('abcabcbb')}")
    print(f"   'pwwkew': {longest_substring_without_repeating('pwwkew')}")
    
    # –¢–µ—Å—Ç 7: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n7. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫:")
    string_formatting_examples()
    
    # –¢–µ—Å—Ç 8: –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    print("\n8. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:")
    regex_examples()
    
    # –¢–µ—Å—Ç 9: –°—Ç—Ä–æ–∫–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    print("\n9. –°—Ç—Ä–æ–∫–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:")
    string_methods_examples()
    
    # –¢–µ—Å—Ç 10: –ê–Ω–∞–≥—Ä–∞–º–º—ã
    print("\n10. –ê–Ω–∞–≥—Ä–∞–º–º—ã:")
    words = ["eat", "tea", "tan", "ate", "nat", "bat"]
    print(f"    –°–ª–æ–≤–∞: {words}")
    print(f"    –ì—Ä—É–ø–ø—ã: {group_anagrams(words)}")
    
    print("\n" + "=" * 60)

