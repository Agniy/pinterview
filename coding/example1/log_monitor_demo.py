#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ (–∫–∞–∫ tail -f)

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è.

–ó–∞–ø—É—Å–∫:
    python3 log_monitor_demo.py [log_file]
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

from log_analyzer import LogEntry
from log_analyzer_advanced import LogMonitor, AlertManager, AlertRule


def create_alert_rules() -> AlertManager:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤ —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AlertManager
    """
    alert_mgr = AlertManager()
    
    # –ü—Ä–∞–≤–∏–ª–æ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    def critical_error(entry: LogEntry):
        print(f"\nüî¥ –ö–†–ò–¢–ò–ß–ù–û: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!")
        print(f"   –°—Ç–∞—Ç—É—Å: {entry.status}")
        print(f"   URL: {entry.path}")
        print(f"   IP: {entry.ip}")
        print(f"   –í—Ä–µ–º—è: {entry.timestamp}")
    
    alert_mgr.add_rule(AlertRule(
        name="critical_errors",
        condition=lambda e: e.status >= 500,
        action=critical_error,
        cooldown=10.0
    ))
    
    # –ü—Ä–∞–≤–∏–ª–æ 2: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
    def unauthorized_access(entry: LogEntry):
        print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø")
        print(f"   IP: {entry.ip}")
        print(f"   URL: {entry.path}")
    
    alert_mgr.add_rule(AlertRule(
        name="unauthorized",
        condition=lambda e: e.status == 401,
        action=unauthorized_access,
        cooldown=30.0
    ))
    
    # –ü—Ä–∞–≤–∏–ª–æ 3: 404 –æ—à–∏–±–∫–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    def not_found_alert(entry: LogEntry):
        print(f"\n‚ö†Ô∏è  404: {entry.path} –æ—Ç {entry.ip}")
    
    alert_mgr.add_rule(AlertRule(
        name="not_found",
        condition=lambda e: e.status == 404,
        action=not_found_alert,
        cooldown=60.0
    ))
    
    # –ü—Ä–∞–≤–∏–ª–æ 4: –ë–æ–ª—å—à–∏–µ –æ—Ç–≤–µ—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–∞—è —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
    def large_response(entry: LogEntry):
        print(f"\nüìä –ò–ù–§–û: –ë–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç")
        print(f"   –†–∞–∑–º–µ—Ä: {entry.size:,} –±–∞–π—Ç")
        print(f"   URL: {entry.path}")
    
    alert_mgr.add_rule(AlertRule(
        name="large_response",
        condition=lambda e: e.size > 100000,  # > 100KB
        action=large_response,
        cooldown=120.0
    ))
    
    return alert_mgr


class RealTimeAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç—ã.
    """
    
    def __init__(self):
        self.total_requests = 0
        self.status_counts = {}
        self.method_counts = {}
        self.total_bytes = 0
        self.start_time = datetime.now()
    
    def process_entry(self, entry: LogEntry):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å."""
        self.total_requests += 1
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–¥—ã
        self.status_counts[entry.status] = \
            self.status_counts.get(entry.status, 0) + 1
        
        # HTTP –º–µ—Ç–æ–¥—ã
        self.method_counts[entry.method] = \
            self.method_counts.get(entry.method, 0) + 1
        
        # –†–∞–∑–º–µ—Ä
        self.total_bytes += entry.size
    
    def get_stats(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        uptime = datetime.now() - self.start_time
        
        stats = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò              ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]:>37} ‚ïë
‚ïë –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.total_requests:>35} ‚ïë
‚ïë –ü–µ—Ä–µ–¥–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {self.total_bytes:>34,} ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë –°—Ç–∞—Ç—É—Å –∫–æ–¥—ã:                                         ‚ïë
"""
        
        for status in sorted(self.status_counts.keys()):
            count = self.status_counts[status]
            stats += f"‚ïë   {status}: {count:>47} ‚ïë\n"
        
        stats += "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n"
        stats += "‚ïë HTTP –º–µ—Ç–æ–¥—ã:                                         ‚ïë\n"
        
        for method, count in sorted(self.method_counts.items()):
            stats += f"‚ïë   {method}: {count:>47} ‚ïë\n"
        
        stats += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        
        return stats


async def monitor_with_stats(
    log_file: str,
    stats_interval: int = 10
):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    
    Args:
        log_file: –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
        stats_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
    """
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
    alert_mgr = create_alert_rules()
    analyzer = RealTimeAnalyzer()
    
    # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    def process_log(entry: LogEntry):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        timestamp = entry.timestamp.strftime("%H:%M:%S")
        status_emoji = "‚úÖ" if entry.status < 400 else "‚ùå"
        
        print(f"{status_emoji} [{timestamp}] {entry.method:6s} {entry.status} {entry.path:30s} {entry.size:>8,}b")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        analyzer.process_entry(entry)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
        alert_mgr.check_entry(entry)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = LogMonitor(log_file, process_log, poll_interval=0.5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async def print_stats_periodically():
        while True:
            await asyncio.sleep(stats_interval)
            print("\n" + analyzer.get_stats())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏
    try:
        await asyncio.gather(
            monitor.start(),
            print_stats_periodically()
        )
    except KeyboardInterrupt:
        monitor.stop()
        print("\n\n" + analyzer.get_stats())
        print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def simulate_log_generation(log_file: str, duration: int = 30):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)
    """
    import random
    from datetime import datetime, timezone
    
    methods = ['GET', 'POST', 'PUT', 'DELETE']
    paths = [
        '/api/users', '/api/products', '/api/orders',
        '/api/login', '/api/logout', '/admin/dashboard',
        '/api/stats', '/health', '/'
    ]
    statuses = [200, 200, 200, 201, 204, 400, 401, 404, 500]
    ips = ['127.0.0.1', '192.168.1.1', '10.0.0.1', '172.16.0.1']
    
    print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –≤ {log_file}")
    print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
    print(f"   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    start_time = asyncio.get_event_loop().time()
    
    with open(log_file, 'a', encoding='utf-8') as f:
        while asyncio.get_event_loop().time() - start_time < duration:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–ø–∏—Å—å
            ip = random.choice(ips)
            timestamp = datetime.now(timezone.utc)
            method = random.choice(methods)
            path = random.choice(paths)
            status = random.choice(statuses)
            size = random.randint(50, 10000)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
            log_line = f'{ip} - - [{timestamp.strftime("%d/%b/%Y:%H:%M:%S %z")}] "{method} {path} HTTP/1.1" {status} {size}\n'
            
            f.write(log_line)
            f.flush()  # –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(random.uniform(0.1, 2.0))
    
    print(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    if len(sys.argv) > 1:
        log_file = sys.argv[1]
    else:
        log_file = 'sample_logs.txt'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not Path(log_file).exists():
        print(f"‚ö†Ô∏è  –§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"\n–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª? (y/n): ", end='')
        
        response = input().lower()
        if response == 'y':
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª
            with open(log_file, 'w') as f:
                f.write('127.0.0.1 - - [10/Oct/2023:13:55:36 +0000] "GET /api/users HTTP/1.1" 200 1234\n')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω {log_file}")
        else:
            return
    
    print("=" * 60)
    print("üîç REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì –õ–û–ì–û–í")
    print("=" * 60)
    print(f"\nüìÅ –§–∞–π–ª: {log_file}")
    print("\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("  1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")
    print("  2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("\n–í—ã–±–æ—Ä (1/2): ", end='')
    
    choice = input().strip()
    
    if choice == '2':
        # –†–µ–∂–∏–º —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
        print("\nüé¨ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        print("   –ë—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –ª–æ–≥–∏")
        print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        await asyncio.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –º–æ–Ω–∏—Ç–æ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        try:
            await asyncio.gather(
                simulate_log_generation(log_file, duration=60),
                monitor_with_stats(log_file, stats_interval=15)
            )
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    else:
        # –û–±—ã—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        print("\nüé¨ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        print("   –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ")
        print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        await asyncio.sleep(1)
        
        try:
            await monitor_with_stats(log_file, stats_interval=30)
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
