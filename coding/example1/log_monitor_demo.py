#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤.

–ó–∞–ø—É—Å–∫:
    python3 log_monitor_demo.py <log_file>
"""

import asyncio
import sys
from datetime import datetime
from log_analyzer_advanced import LogMonitor, AlertManager, AlertRule
from log_analyzer import LogEntry


def create_alert_system():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    alert_mgr = AlertManager()
    
    # –ê–ª–µ—Ä—Ç –Ω–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    def server_error_alert(entry: LogEntry):
        print(f"\nüö® [{datetime.now().strftime('%H:%M:%S')}] "
              f"–û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê: {entry.status} - {entry.method} {entry.path} "
              f"(IP: {entry.ip})")
    
    alert_mgr.add_rule(AlertRule(
        name="server_errors",
        condition=lambda e: e.status >= 500,
        action=server_error_alert,
        cooldown=10.0
    ))
    
    # –ê–ª–µ—Ä—Ç –Ω–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
    def auth_error_alert(entry: LogEntry):
        print(f"\n‚ö†Ô∏è  [{datetime.now().strftime('%H:%M:%S')}] "
              f"–û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò: {entry.method} {entry.path} "
              f"(IP: {entry.ip})")
    
    alert_mgr.add_rule(AlertRule(
        name="auth_errors",
        condition=lambda e: e.status in (401, 403),
        action=auth_error_alert,
        cooldown=30.0
    ))
    
    # –ê–ª–µ—Ä—Ç –Ω–∞ –±–æ–ª—å—à–∏–µ –æ—Ç–≤–µ—Ç—ã
    def large_response_alert(entry: LogEntry):
        size_mb = entry.size / (1024 * 1024)
        print(f"\nüì¶ [{datetime.now().strftime('%H:%M:%S')}] "
              f"–ë–û–õ–¨–®–û–ô –û–¢–í–ï–¢: {size_mb:.2f} MB - {entry.path}")
    
    alert_mgr.add_rule(AlertRule(
        name="large_responses",
        condition=lambda e: e.size > 1000000,  # > 1MB
        action=large_response_alert,
        cooldown=60.0
    ))
    
    return alert_mgr


async def monitor_with_stats(log_file: str):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ñ–∞–π–ª —Å –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    
    Args:
        log_file: –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
    """
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': 0,
        'by_status': {},
        'by_method': {},
        'errors': 0
    }
    
    # –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤
    alert_mgr = create_alert_system()
    
    def process_entry(entry: LogEntry):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats['total'] += 1
        stats['by_status'][entry.status] = stats['by_status'].get(entry.status, 0) + 1
        stats['by_method'][entry.method] = stats['by_method'].get(entry.method, 0) + 1
        
        if entry.status >= 400:
            stats['errors'] += 1
        
        # –í—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å—å
        status_emoji = "‚úÖ" if entry.status < 400 else "‚ùå"
        print(f"{status_emoji} [{datetime.now().strftime('%H:%M:%S')}] "
              f"{entry.status} {entry.method:6s} {entry.path:30s} "
              f"({entry.size:6d} B)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
        alert_mgr.check_entry(entry)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = LogMonitor(log_file, process_entry, poll_interval=0.5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
    monitor_task = asyncio.create_task(monitor.start())
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async def print_stats_periodically():
        while monitor.running:
            await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
            if stats['total'] > 0:
                error_rate = (stats['errors'] / stats['total']) * 100
                
                print("\n" + "=" * 60)
                print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è)")
                print("=" * 60)
                print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total']}")
                print(f"–û—à–∏–±–æ–∫: {stats['errors']} ({error_rate:.1f}%)")
                print(f"\n–ü–æ –º–µ—Ç–æ–¥–∞–º:")
                for method, count in sorted(stats['by_method'].items()):
                    print(f"  {method}: {count}")
                print(f"\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
                for status, count in sorted(stats['by_status'].items()):
                    print(f"  {status}: {count}")
                print("=" * 60 + "\n")
    
    stats_task = asyncio.create_task(print_stats_periodically())
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.gather(monitor_task, stats_task)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        monitor.stop()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if stats['total'] > 0:
            print("\n" + "=" * 60)
            print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            print("=" * 60)
            print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total']}")
            print(f"–û—à–∏–±–æ–∫: {stats['errors']}")
            
            # –ê–ª–µ—Ä—Ç—ã
            alert_stats = alert_mgr.get_alert_stats()
            print(f"\n–°—Ä–∞–±–æ—Ç–∞–ª–æ –∞–ª–µ—Ä—Ç–æ–≤: {alert_stats['total_alerts']}")
            if alert_stats['by_rule']:
                print("–ü–æ —Ç–∏–ø–∞–º:")
                for rule, count in alert_stats['by_rule'].items():
                    print(f"  {rule}: {count}")
            
            print("=" * 60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 log_monitor_demo.py <log_file>")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print("  python3 log_monitor_demo.py sample_logs.txt")
        print("\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        print("  echo '127.0.0.1 - - [10/Oct/2023:13:55:36 +0000] \"GET /test HTTP/1.1\" 200 1234' >> sample_logs.txt")
        return 1
    
    log_file = sys.argv[1]
    
    print("=" * 60)
    print("üîç REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì –õ–û–ì–û–í")
    print("=" * 60)
    print(f"\nüìÅ –§–∞–π–ª: {log_file}")
    print("\n‚ö° –§—É–Ω–∫—Ü–∏–∏:")
    print("  ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    print("  ‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)")
    print("\nüí° –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    try:
        asyncio.run(monitor_with_stats(log_file))
    except KeyboardInterrupt:
        pass
    
    return 0


if __name__ == "__main__":
    sys.exit(main())

