#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤.

–ó–∞–ø—É—Å–∫:
    python main.py                    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç sample_logs.txt
    python main.py <path/to/log>      # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
"""

import sys
from pathlib import Path
from log_analyzer import LogParser, LogAnalyzer, LogFilter, print_summary


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if len(sys.argv) > 1:
        log_file = sys.argv[1]
    else:
        log_file = 'sample_logs.txt'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not Path(log_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        print(f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python {sys.argv[0]} [–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É]")
        return 1
    
    print("=" * 60)
    print("üîç –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –õ–û–ì–û–í –í–ï–ë–ï–†–°–ï–†–í–ï–†–ê")
    print("=" * 60)
    print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª: {log_file}\n")
    
    try:
        # –®–ê–ì 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
        print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤...")
        parser = LogParser(log_file)
        logs = parser.parse()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(logs)}\n")
        
        if not logs:
            print("‚ö†Ô∏è  –í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ.")
            return 0
        
        # –®–ê–ì 2: –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        print("‚è≥ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...\n")
        analyzer = LogAnalyzer(logs)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_summary(analyzer)
        
        # –®–ê–ì 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê")
        print("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
        print("\n‚è∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —á–∞—Å–∞–º:")
        hourly = analyzer.requests_by_hour()
        for hour in sorted(hourly.keys()):
            bar = '‚ñà' * (hourly[hour] // 2)  # –ü—Ä–æ—Å—Ç–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            print(f"  {hour:02d}:00 - {hourly[hour]:3d} {bar}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:")
        errors = LogFilter(logs).by_status_range(400, 599).get_logs()
        
        if errors:
            error_analyzer = LogAnalyzer(errors)
            print(f"  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {len(errors)}")
            print(f"  –¢–∏–ø—ã –æ—à–∏–±–æ–∫:")
            
            for status, count in sorted(
                error_analyzer.count_by_status().items()
            ):
                print(f"    {status}: {count:3d} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            print(f"\n  URL —Å –æ—à–∏–±–∫–∞–º–∏:")
            for url, count in error_analyzer.top_urls(5):
                print(f"    {count:3d} - {url}")
        else:
            print("  –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! üéâ")
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        print("\n‚úÖ –¢–æ–ø —É—Å–ø–µ—à–Ω—ã—Ö endpoint'–æ–≤ (2xx):")
        successful = LogFilter(logs).by_status_range(200, 299).get_logs()
        
        if successful:
            success_analyzer = LogAnalyzer(successful)
            for url, count in success_analyzer.top_urls(5):
                print(f"  {count:3d} - {url}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n" + "=" * 60)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("=" * 60)
        
        error_rate = analyzer.error_rate()
        
        if error_rate > 10:
            print("‚ö†Ô∏è  –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ (>10%)!")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
            print("   - –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
            print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
            print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        elif error_rate > 5:
            print("‚ö†Ô∏è  –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ (>5%)")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        else:
            print("‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ –≤ –Ω–æ—Ä–º–µ (<5%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 5xx –æ—à–∏–±–∫–∏
        server_errors = LogFilter(logs).by_status_range(500, 599).get_logs()
        if server_errors:
            print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (5xx): {len(server_errors)}")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 60)
        
        return 0
    
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())

