"""
üü¢ FIBONACCI (–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –ù–∞–∏–≤–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏—è: O(2^n) - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è
- –ú–µ–º–æ–∏–∑–∞—Ü–∏—è: O(n)
- –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(n)
- –ú–∞—Ç—Ä–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(log n)

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –ù–∞–∏–≤–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏—è: O(n) - –≥–ª—É–±–∏–Ω–∞ —Å—Ç–µ–∫–∞
- –ú–µ–º–æ–∏–∑–∞—Ü–∏—è: O(n)
- –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(1)
- –ú–∞—Ç—Ä–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(log n)

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
- –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –º–µ–º–æ–∏–∑–∞—Ü–∏–∏
- –ú–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: F(n) = F(n-1) + F(n-2)
"""


def fibonacci_naive(n):
    """
    üü¢ Junior level
    –ù–∞–∏–≤–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è (–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è)
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏: F(0) = 0, F(1) = 1
    2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π: F(n) = F(n-1) + F(n-2)
    
    –ü—Ä–æ–±–ª–µ–º–∞: –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
    
    Args:
        n: –Ω–æ–º–µ—Ä —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
        
    Returns:
        n-–Ω–æ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏
        
    >>> fibonacci_naive(6)
    8
    """
    if n < 0:
        raise ValueError("–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    # –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    if n <= 1:
        return n
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
    return fibonacci_naive(n - 1) + fibonacci_naive(n - 2)


def fibonacci_memoized(n, memo=None):
    """
    üü° Middle level
    –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - O(n)
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    """
    if memo is None:
        memo = {}
    
    if n < 0:
        raise ValueError("–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n in memo:
        return memo[n]
    
    if n <= 1:
        return n
    
    memo[n] = fibonacci_memoized(n - 1, memo) + fibonacci_memoized(n - 2, memo)
    return memo[n]


def fibonacci_iterative(n):
    """
    –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è - O(n), O(1) –ø–∞–º—è—Ç–∏
    """
    if n < 0:
        raise ValueError("–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n <= 1:
        return n
    
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    
    return b


def fibonacci_matrix(n):
    """
    üî¥ Senior level
    –ú–∞—Ç—Ä–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è - O(log n)
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–µ–ø–µ–Ω—å
    """
    if n < 0:
        raise ValueError("–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n <= 1:
        return n
    
    def matrix_multiply(A, B):
        return [[A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]],
                [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]]]
    
    def matrix_power(matrix, power):
        if power == 1:
            return matrix
        
        if power % 2 == 0:
            half = matrix_power(matrix, power // 2)
            return matrix_multiply(half, half)
        else:
            return matrix_multiply(matrix, matrix_power(matrix, power - 1))
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è F(n)
    fib_matrix = [[1, 1], [1, 0]]
    result_matrix = matrix_power(fib_matrix, n - 1)
    
    return result_matrix[0][0]


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def fibonacci_with_steps(n, level=0, memo=None):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    if memo is None:
        memo = {}
    
    indent = "  " * level
    print(f"{indent}–í—ã–∑—ã–≤–∞–µ–º fibonacci({n})")
    
    if n < 0:
        raise ValueError("–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n in memo:
        print(f"{indent}–ù–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à–µ: {memo[n]}")
        return memo[n]
    
    if n <= 1:
        print(f"{indent}–ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {n}")
        return n
    
    print(f"{indent}–í—ã—á–∏—Å–ª—è–µ–º fibonacci({n-1}) + fibonacci({n-2})")
    result = (fibonacci_with_steps(n - 1, level + 1, memo) + 
              fibonacci_with_steps(n - 2, level + 1, memo))
    
    memo[n] = result
    print(f"{indent}–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return result


# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ï–†–°–ò–ò
# ============================================================================

def fibonacci_sequence(n):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏ –¥–æ n-–Ω–æ–≥–æ —á–∏—Å–ª–∞
    """
    if n < 0:
        raise ValueError("–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n == 0:
        return [0]
    elif n == 1:
        return [0, 1]
    
    sequence = [0, 1]
    for i in range(2, n + 1):
        sequence.append(sequence[i-1] + sequence[i-2])
    
    return sequence


def fibonacci_generator(n):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
    """
    if n < 0:
        raise ValueError("–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    a, b = 0, 1
    for _ in range(n + 1):
        yield a
        a, b = b, a + b


def fibonacci_big_int(n):
    """
    –í–µ—Ä—Å–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
    """
    if n < 0:
        raise ValueError("–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n <= 1:
        return str(n)
    
    a, b = "0", "1"
    for _ in range(2, n + 1):
        a, b = b, add_strings(a, b)
    
    return b


def add_strings(num1, num2):
    """
    –°–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫
    """
    result = []
    carry = 0
    i, j = len(num1) - 1, len(num2) - 1
    
    while i >= 0 or j >= 0 or carry:
        total = carry
        if i >= 0:
            total += int(num1[i])
            i -= 1
        if j >= 0:
            total += int(num2[j])
            j -= 1
        
        result.append(str(total % 10))
        carry = total // 10
    
    return ''.join(reversed(result))


# ============================================================================
# –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –°–í–û–ô–°–¢–í–ê
# ============================================================================

def fibonacci_ratio_convergence(n):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è F(n+1)/F(n) –∫ –∑–æ–ª–æ—Ç–æ–º—É —Å–µ—á–µ–Ω–∏—é
    """
    if n < 1:
        return None
    
    fib_n = fibonacci_iterative(n)
    fib_n_plus_1 = fibonacci_iterative(n + 1)
    
    return fib_n_plus_1 / fib_n


def golden_ratio():
    """
    –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ œÜ = (1 + ‚àö5) / 2
    """
    import math
    return (1 + math.sqrt(5)) / 2


def fibonacci_binet(n):
    """
    –§–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è F(n)
    F(n) = (œÜ^n - œà^n) / ‚àö5
    –≥–¥–µ œÜ = (1 + ‚àö5)/2, œà = (1 - ‚àö5)/2
    """
    import math
    
    phi = (1 + math.sqrt(5)) / 2
    psi = (1 - math.sqrt(5)) / 2
    
    return round((phi**n - psi**n) / math.sqrt(5))


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_fibonacci():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("FIBONACCI - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    test_cases = [0, 1, 2, 3, 4, 5, 6, 10, 15]
    
    print("\n–¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    for n in test_cases:
        result = fibonacci_iterative(n)
        print(f"F({n}) = {result}")
    
    # –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    print(f"\n–¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π")
    n = 10
    print(f"n = {n}")
    print(f"–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: {fibonacci_iterative(n)}")
    print(f"–ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {fibonacci_memoized(n)}")
    print(f"–ú–∞—Ç—Ä–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: {fibonacci_matrix(n)}")
    print(f"–§–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ: {fibonacci_binet(n)}")
    
    # –¢–µ—Å—Ç 3: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print(f"\n–¢–µ—Å—Ç 3: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏")
    sequence = fibonacci_sequence(10)
    print(f"F(0) –¥–æ F(10): {sequence}")
    
    # –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    print(f"\n–¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
    fib_gen = fibonacci_generator(10)
    print(f"–ß–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: {list(fib_gen)}")
    
    # –¢–µ—Å—Ç 5: –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ
    print(f"\n–¢–µ—Å—Ç 5: –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –∑–æ–ª–æ—Ç–æ–º—É —Å–µ—á–µ–Ω–∏—é")
    phi = golden_ratio()
    print(f"–ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ œÜ = {phi:.10f}")
    
    for n in [5, 10, 15, 20]:
        ratio = fibonacci_ratio_convergence(n)
        print(f"F({n+1})/F({n}) = {ratio:.10f}, –æ—à–∏–±–∫–∞: {abs(ratio - phi):.2e}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï (—Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π)")
    print("=" * 60)
    fibonacci_with_steps(6)


# ============================================================================
# –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# ============================================================================

def performance_analysis():
    """
    –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
    """
    import time
    
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    test_values = [10, 20, 30, 35]
    
    print("n\t–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è\t–ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è\t–ú–∞—Ç—Ä–∏—á–Ω–∞—è\t–§–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ")
    print("-" * 70)
    
    for n in test_values:
        # –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è
        start = time.time()
        result1 = fibonacci_iterative(n)
        time1 = time.time() - start
        
        # –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        start = time.time()
        result2 = fibonacci_memoized(n)
        time2 = time.time() - start
        
        # –ú–∞—Ç—Ä–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è
        start = time.time()
        result3 = fibonacci_matrix(n)
        time3 = time.time() - start
        
        # –§–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ
        start = time.time()
        result4 = fibonacci_binet(n)
        time4 = time.time() - start
        
        print(f"{n}\t{time1*1000:.3f}ms\t\t{time2*1000:.3f}ms\t\t{time3*1000:.3f}ms\t\t{time4*1000:.3f}ms")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        if not (result1 == result2 == result3 == result4):
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –¥–ª—è n={n}")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
# ============================================================================

def practical_applications():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    print("1. –ü—Ä–∏—Ä–æ–¥–∞ –∏ –±–∏–æ–ª–æ–≥–∏—è:")
    print("   - –°–ø–∏—Ä–∞–ª–∏ –≤ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö (–ø–æ–¥—Å–æ–ª–Ω—É—Ö–∏, —Å–æ—Å–Ω–æ–≤—ã–µ —à–∏—à–∫–∏)")
    print("   - –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –∫—Ä–æ–ª–∏–∫–æ–≤")
    print("   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç—å–µ–≤")
    
    print("\n2. –ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω:")
    print("   - –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ")
    print("   - –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –≤ –∂–∏–≤–æ–ø–∏—Å–∏")
    print("   - –î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
    
    print("\n3. –§–∏–Ω–∞–Ω—Å—ã:")
    print("   - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏)")
    print("   - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
    print("   - –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")
    
    print("\n4. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏:")
    print("   - –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    print("   - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–∫—É—á–∏ –§–∏–±–æ–Ω–∞—á—á–∏)")
    print("   - –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    print("\n5. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:")
    print("   - –¢–µ–æ—Ä–∏—è —á–∏—Å–µ–ª")
    print("   - –ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞")
    print("   - –î–∏–æ—Ñ–∞–Ω—Ç–æ–≤—ã —É—Ä–∞–≤–Ω–µ–Ω–∏—è")


# ============================================================================
# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ò –¢–†–Æ–ö–ò
# ============================================================================

def optimizations_and_tricks():
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ç—Ä—é–∫–∏ –¥–ª—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
    """
    print("\n" + "=" * 60)
    print("–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ò –¢–†–Æ–ö–ò")
    print("=" * 60)
    
    print("1. –ú–µ–º–æ–∏–∑–∞—Ü–∏—è:")
    print("   - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("   - –ò–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
    print("   - –°–Ω–∏–∂–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å O(2^n) –¥–æ O(n)")
    
    print("\n2. –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è:")
    print("   - O(1) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏")
    print("   - –ò–∑–±–µ–∂–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞")
    print("   - –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é")
    
    print("\n3. –ú–∞—Ç—Ä–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è:")
    print("   - O(log n) –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    print("   - –ë—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å")
    print("   - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö n")
    
    print("\n4. –§–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ:")
    print("   - O(1) –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ")
    print("   - –¢–æ—á–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å—é float")
    print("   - –•–æ—Ä–æ—à–∞ –¥–ª—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
    
    print("\n5. –†–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏:")
    print("   - –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ")
    print("   - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    print("   - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞")


# ============================================================================
# –û–ë–©–ò–ï –û–®–ò–ë–ö–ò
# ============================================================================

def common_mistakes():
    """
    –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —á–∏—Å–ª–∞–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏
    """
    print("\n" + "=" * 60)
    print("–û–ë–©–ò–ï –û–®–ò–ë–ö–ò")
    print("=" * 60)
    
    print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–≤–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏:")
    print("   ‚ùå fibonacci_naive(50) –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ")
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–º–æ–∏–∑–∞—Ü–∏—é –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é")
    
    print("\n2. –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞:")
    print("   ‚ùå fibonacci_naive(1000) –≤—ã–∑–æ–≤–µ—Ç StackOverflow")
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—É—é –∏–ª–∏ –º–∞—Ç—Ä–∏—á–Ω—É—é –≤–µ—Ä—Å–∏—é")
    
    print("\n3. –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª:")
    print("   ‚ùå F(100) > 2^63, –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ")
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    
    print("\n4. –ù–µ—Ç–æ—á–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª—ã –ë–∏–Ω–µ:")
    print("   ‚ùå –î–ª—è –±–æ–ª—å—à–∏—Ö n –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ")
    print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã")


if __name__ == "__main__":
    demonstrate_fibonacci()
    performance_analysis()
    practical_applications()
    optimizations_and_tricks()
    common_mistakes()
