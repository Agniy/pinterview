"""
üü¢ FACTORIAL (–§–∞–∫—Ç–æ—Ä–∏–∞–ª)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(n)
- –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(n)

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(n) - –≥–ª—É–±–∏–Ω–∞ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤
- –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(1)

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä —Ä–µ–∫—É—Ä—Å–∏–∏
- –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
- –û—Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è: n! = n √ó (n-1) √ó (n-2) √ó ... √ó 1
"""


def factorial(n):
    """
    üü¢ Junior level
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ n <= 1, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1
    2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º n * factorial(n-1)
    
    –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
    n! = n √ó (n-1)!
    0! = 1
    1! = 1
    
    Args:
        n: –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        
    Returns:
        —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n
        
    >>> factorial(5)
    120
    >>> factorial(0)
    1
    >>> factorial(1)
    1
    """
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    if n <= 1:
        return 1
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
    return n * factorial(n - 1)


def factorial_iterative(n):
    """
    –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
    
    >>> factorial_iterative(5)
    120
    """
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    result = 1
    for i in range(2, n + 1):
        result *= i
    
    return result


def factorial_memoized(n, memo=None):
    """
    –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –∑–¥–µ—Å—å –Ω–µ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞)
    """
    if memo is None:
        memo = {}
    
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n in memo:
        return memo[n]
    
    if n <= 1:
        return 1
    
    memo[n] = n * factorial_memoized(n - 1, memo)
    return memo[n]


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def factorial_with_steps(n, level=0):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    indent = "  " * level
    print(f"{indent}–í—ã–∑—ã–≤–∞–µ–º factorial({n})")
    
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n <= 1:
        print(f"{indent}–ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1")
        return 1
    
    print(f"{indent}–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤: {n} * factorial({n-1})")
    result = n * factorial_with_steps(n - 1, level + 1)
    print(f"{indent}–†–µ–∑—É–ª—å—Ç–∞—Ç: {n} * {result // n} = {result}")
    
    return result


# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ï–†–°–ò–ò
# ============================================================================

def factorial_tail_recursive(n, accumulator=1):
    """
    –•–≤–æ—Å—Ç–æ–≤–∞—è —Ä–µ–∫—É—Ä—Å–∏—è (Python –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç, –Ω–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
    """
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n <= 1:
        return accumulator
    
    return factorial_tail_recursive(n - 1, n * accumulator)


def factorial_big_int(n):
    """
    –í–µ—Ä—Å–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫
    """
    if n < 0:
        raise ValueError("–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    if n <= 1:
        return "1"
    
    result = "1"
    for i in range(2, n + 1):
        result = multiply_strings(result, str(i))
    
    return result


def multiply_strings(num1, num2):
    """
    –£–º–Ω–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫
    """
    m, n = len(num1), len(num2)
    result = [0] * (m + n)
    
    # –£–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É
    for i in range(m - 1, -1, -1):
        for j in range(n - 1, -1, -1):
            mul = int(num1[i]) * int(num2[j])
            p1, p2 = i + j, i + j + 1
            total = mul + result[p2]
            
            result[p2] = total % 10
            result[p1] += total // 10
    
    # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
    start = 0
    while start < len(result) and result[start] == 0:
        start += 1
    
    return ''.join(map(str, result[start:])) if start < len(result) else '0'


# ============================================================================
# –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –°–í–û–ô–°–¢–í–ê
# ============================================================================

def stirling_approximation(n):
    """
    –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –°—Ç–∏—Ä–ª–∏–Ω–≥–∞ –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
    n! ‚âà ‚àö(2œÄn) * (n/e)^n
    """
    import math
    return math.sqrt(2 * math.pi * n) * (n / math.e) ** n


def factorial_ratio(n, k):
    """
    –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ n! / k!
    """
    if k > n:
        return 0
    
    result = 1
    for i in range(k + 1, n + 1):
        result *= i
    
    return result


def gamma_function_approximation(n):
    """
    –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–∞–º–º–∞-—Ñ—É–Ω–∫—Ü–∏—é
    n! = Œì(n+1)
    """
    import math
    return math.gamma(n + 1)


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_factorial():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("FACTORIAL - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [0, 1, 2, 3, 4, 5, 10]
    
    print("\n–¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    for n in test_cases:
        result = factorial(n)
        print(f"{n}! = {result}")
    
    # –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    print(f"\n–¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π")
    n = 5
    print(f"n = {n}")
    print(f"–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: {factorial(n)}")
    print(f"–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: {factorial_iterative(n)}")
    print(f"–ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {factorial_memoized(n)}")
    print(f"–•–≤–æ—Å—Ç–æ–≤–∞—è —Ä–µ–∫—É—Ä—Å–∏—è: {factorial_tail_recursive(n)}")
    
    # –¢–µ—Å—Ç 3: –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print(f"\n–¢–µ—Å—Ç 3: –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ factorial(4)")
    print("=" * 40)
    factorial_with_steps(4)
    
    # –¢–µ—Å—Ç 4: –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
    print(f"\n–¢–µ—Å—Ç 4: –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞")
    large_n = 20
    print(f"{large_n}! = {factorial_big_int(large_n)}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
    print(f"\n–¢–µ—Å—Ç 5: –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è")
    n = 10
    exact = factorial(n)
    stirling = stirling_approximation(n)
    gamma = gamma_function_approximation(n)
    
    print(f"n = {n}")
    print(f"–¢–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {exact}")
    print(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –°—Ç–∏—Ä–ª–∏–Ω–≥–∞: {stirling:.0f}")
    print(f"–ì–∞–º–º–∞-—Ñ—É–Ω–∫—Ü–∏—è: {gamma:.0f}")
    print(f"–û—à–∏–±–∫–∞ –°—Ç–∏—Ä–ª–∏–Ω–≥–∞: {abs(exact - stirling) / exact * 100:.2f}%")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# ============================================================================

def performance_analysis():
    """
    –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
    """
    import time
    
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    test_values = [5, 10, 15, 20]
    
    print("n\t–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è\t–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è\t–ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")
    print("-" * 55)
    
    for n in test_values:
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è
        start = time.time()
        factorial(n)
        recursive_time = time.time() - start
        
        # –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è
        start = time.time()
        factorial_iterative(n)
        iterative_time = time.time() - start
        
        # –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        start = time.time()
        factorial_memoized(n)
        memoized_time = time.time() - start
        
        print(f"{n}\t{recursive_time*1000:.3f}ms\t\t{iterative_time*1000:.3f}ms\t\t{memoized_time*1000:.3f}ms")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
# ============================================================================

def practical_applications():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –§–ê–ö–¢–û–†–ò–ê–õ–ê")
    print("=" * 60)
    
    print("1. –ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞:")
    print("   - –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏: n! —Å–ø–æ—Å–æ–±–æ–≤ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å n —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("   - –°–æ—á–µ—Ç–∞–Ω–∏—è: C(n,k) = n! / (k! * (n-k)!)")
    print("   - –†–∞–∑–º–µ—â–µ–Ω–∏—è: A(n,k) = n! / (n-k)!")
    
    print("\n2. –¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
    print("   - –†–∞–≤–Ω–æ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∏—Å—Ö–æ–¥—ã")
    print("   - –ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    
    print("\n3. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:")
    print("   - –†—è–¥—ã –¢–µ–π–ª–æ—Ä–∞")
    print("   - –ê—Å–∏–º–ø—Ç–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è")
    print("   - –ì–∞–º–º–∞-—Ñ—É–Ω–∫—Ü–∏—è")
    
    print("\n4. –ê–ª–≥–æ—Ä–∏—Ç–º—ã:")
    print("   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫")
    print("   - Backtracking")
    print("   - –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
    
    print("\n5. –§–∏–∑–∏–∫–∞:")
    print("   - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞")
    print("   - –ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞")
    print("   - –¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞")


# ============================================================================
# –û–ë–©–ò–ï –û–®–ò–ë–ö–ò
# ============================================================================

def common_mistakes():
    """
    –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º
    """
    print("\n" + "=" * 60)
    print("–û–ë–©–ò–ï –û–®–ò–ë–ö–ò")
    print("=" * 60)
    
    print("1. –ó–∞–±—ã–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è:")
    print("   ‚ùå def factorial(n): return n * factorial(n-1)")
    print("   ‚úÖ def factorial(n): return 1 if n <= 1 else n * factorial(n-1)")
    
    print("\n2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª:")
    print("   ‚ùå –§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!")
    print("   ‚úÖ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    print("\n3. –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞:")
    print("   ‚ùå factorial(1000) –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å StackOverflow")
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    
    print("\n4. –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª:")
    print("   ‚ùå 20! > 2^63, –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ")
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")


# ============================================================================
# –°–í–Ø–ó–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def related_functions():
    """
    –°–≤—è–∑–∞–Ω–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    print("\n" + "=" * 60)
    print("–°–í–Ø–ó–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò")
    print("=" * 60)
    
    print("1. –î–≤–æ–π–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª:")
    print("   n!! = n * (n-2) * (n-4) * ...")
    print("   5!! = 5 * 3 * 1 = 15")
    
    print("\n2. –°—É–ø–µ—Ä—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª:")
    print("   sf(n) = 1! * 2! * 3! * ... * n!")
    print("   sf(4) = 1! * 2! * 3! * 4! = 288")
    
    print("\n3. –ü—Ä–∞–π–º–æ—Ä–∏–∞–ª:")
    print("   p# = –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª ‚â§ p")
    print("   7# = 2 * 3 * 5 * 7 = 210")
    
    print("\n4. –ì–∞–º–º–∞-—Ñ—É–Ω–∫—Ü–∏—è:")
    print("   Œì(n) = (n-1)! –¥–ª—è —Ü–µ–ª—ã—Ö n")
    print("   –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–∞ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞")


if __name__ == "__main__":
    demonstrate_factorial()
    performance_analysis()
    practical_applications()
    common_mistakes()
    related_functions()
