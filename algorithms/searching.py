"""
üü° –ê–õ–ì–û–†–ò–¢–ú–´ –ü–û–ò–°–ö–ê - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫
- –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
- –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (DFS)
- –ü–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS)
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫
# ============================================================================

def linear_search(arr, target):
    """
    üü¢ Junior level
    –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ - O(n)
    
    >>> linear_search([1, 3, 5, 7, 9], 5)
    2
    """
    for i, val in enumerate(arr):
        if val == target:
            return i
    return -1


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
# ============================================================================

def binary_search(arr, target):
    """
    üü¢ Junior level
    –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π) - O(log n)
    –¢—Ä–µ–±—É–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    
    >>> binary_search([1, 3, 5, 7, 9, 11], 7)
    3
    """
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1


def binary_search_recursive(arr, target, left=0, right=None):
    """
    üü° Middle level
    –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π)
    """
    if right is None:
        right = len(arr) - 1
    
    if left > right:
        return -1
    
    mid = (left + right) // 2
    
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search_recursive(arr, target, mid + 1, right)
    else:
        return binary_search_recursive(arr, target, left, mid - 1)


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
# ============================================================================

def find_first_occurrence(arr, target):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    """
    left, right = 0, len(arr) - 1
    result = -1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            result = mid
            right = mid - 1  # –ò—â–µ–º –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return result


def find_last_occurrence(arr, target):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    """
    left, right = 0, len(arr) - 1
    result = -1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            result = mid
            left = mid + 1  # –ò—â–µ–º –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return result


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: –ü–æ–∏—Å–∫ –ø–∏–∫–∞ –≤ –º–∞—Å—Å–∏–≤–µ
# ============================================================================

def find_peak_element(arr):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç –ø–∏–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–±–æ–ª—å—à–µ —Å–æ—Å–µ–¥–µ–π)
    
    >>> find_peak_element([1, 3, 20, 4, 1, 0])
    2  # –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ 20
    """
    left, right = 0, len(arr) - 1
    
    while left < right:
        mid = (left + right) // 2
        
        if arr[mid] < arr[mid + 1]:
            left = mid + 1
        else:
            right = mid
    
    return left


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: –ü–æ–∏—Å–∫ –≤ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
# ============================================================================

def search_rotated(arr, target):
    """
    üî¥ Senior level
    –ü–æ–∏—Å–∫ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
    
    >>> search_rotated([4, 5, 6, 7, 0, 1, 2], 0)
    4
    """
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return mid
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
        if arr[left] <= arr[mid]:
            # –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            if arr[left] <= target < arr[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            # –ü—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            if arr[mid] < target <= arr[right]:
                left = mid + 1
            else:
                right = mid - 1
    
    return -1


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: –ü–æ–∏—Å–∫ –≤ 2D –º–∞—Ç—Ä–∏—Ü–µ
# ============================================================================

def search_2d_matrix(matrix, target):
    """
    üü° Middle level
    –ü–æ–∏—Å–∫ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π 2D –º–∞—Ç—Ä–∏—Ü–µ
    
    >>> matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]
    >>> search_2d_matrix(matrix, 3)
    True
    """
    if not matrix or not matrix[0]:
        return False
    
    rows, cols = len(matrix), len(matrix[0])
    left, right = 0, rows * cols - 1
    
    while left <= right:
        mid = (left + right) // 2
        mid_value = matrix[mid // cols][mid % cols]
        
        if mid_value == target:
            return True
        elif mid_value < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return False


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: DFS (Depth-First Search)
# ============================================================================

def dfs_recursive(graph, start, visited=None):
    """
    üü° Middle level
    –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π)
    
    >>> graph = {'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F'], 'D': [], 'E': [], 'F': []}
    >>> dfs_recursive(graph, 'A')
    ['A', 'B', 'D', 'E', 'C', 'F']
    """
    if visited is None:
        visited = set()
    
    visited.add(start)
    result = [start]
    
    for neighbor in graph.get(start, []):
        if neighbor not in visited:
            result.extend(dfs_recursive(graph, neighbor, visited))
    
    return result


def dfs_iterative(graph, start):
    """
    –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π)
    """
    visited = set()
    stack = [start]
    result = []
    
    while stack:
        vertex = stack.pop()
        
        if vertex not in visited:
            visited.add(vertex)
            result.append(vertex)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for neighbor in reversed(graph.get(vertex, [])):
                if neighbor not in visited:
                    stack.append(neighbor)
    
    return result


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: BFS (Breadth-First Search)
# ============================================================================

def bfs(graph, start):
    """
    üü° Middle level
    –ü–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É
    
    >>> graph = {'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F'], 'D': [], 'E': [], 'F': []}
    >>> bfs(graph, 'A')
    ['A', 'B', 'C', 'D', 'E', 'F']
    """
    from collections import deque
    
    visited = set()
    queue = deque([start])
    visited.add(start)
    result = []
    
    while queue:
        vertex = queue.popleft()
        result.append(vertex)
        
        for neighbor in graph.get(vertex, []):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    
    return result


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å (BFS)
# ============================================================================

def shortest_path(graph, start, end):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏
    """
    from collections import deque
    
    if start == end:
        return [start]
    
    queue = deque([(start, [start])])
    visited = {start}
    
    while queue:
        vertex, path = queue.popleft()
        
        for neighbor in graph.get(vertex, []):
            if neighbor == end:
                return path + [neighbor]
            
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [neighbor]))
    
    return None  # –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ (Naive)
# ============================================================================

def find_substring(text, pattern):
    """
    üü¢ Junior level
    –ù–∞–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ - O(n*m)
    
    >>> find_substring("hello world", "wor")
    6
    """
    n, m = len(text), len(pattern)
    
    for i in range(n - m + 1):
        if text[i:i+m] == pattern:
            return i
    
    return -1


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ê–õ–ì–û–†–ò–¢–ú–´ –ü–û–ò–°–ö–ê - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –õ–∏–Ω–µ–π–Ω—ã–π –∏ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    arr = [1, 3, 5, 7, 9, 11, 13]
    print(f"\n–ú–∞—Å—Å–∏–≤: {arr}")
    print(f"–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ (7): {linear_search(arr, 7)}")
    print(f"–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (7): {binary_search(arr, 7)}")
    
    # –¢–µ—Å—Ç 2: –ü–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    arr_dup = [1, 2, 2, 2, 3, 4, 5]
    print(f"\n–ú–∞—Å—Å–∏–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {arr_dup}")
    print(f"–ü–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (2): {find_first_occurrence(arr_dup, 2)}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (2): {find_last_occurrence(arr_dup, 2)}")
    
    # –¢–µ—Å—Ç 3: –ü–∏–∫
    arr_peak = [1, 3, 20, 4, 1, 0]
    print(f"\n–ú–∞—Å—Å–∏–≤: {arr_peak}")
    peak_idx = find_peak_element(arr_peak)
    print(f"–ü–∏–∫–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: –∏–Ω–¥–µ–∫—Å {peak_idx}, –∑–Ω–∞—á–µ–Ω–∏–µ {arr_peak[peak_idx]}")
    
    # –¢–µ—Å—Ç 4: –†–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    rotated = [4, 5, 6, 7, 0, 1, 2]
    print(f"\n–†–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {rotated}")
    print(f"–ü–æ–∏—Å–∫ 0: –∏–Ω–¥–µ–∫—Å {search_rotated(rotated, 0)}")
    
    # –¢–µ—Å—Ç 5: DFS –∏ BFS
    graph = {
        'A': ['B', 'C'],
        'B': ['D', 'E'],
        'C': ['F'],
        'D': [],
        'E': [],
        'F': []
    }
    
    print(f"\n–ì—Ä–∞—Ñ: {graph}")
    print(f"DFS –æ—Ç A: {dfs_recursive(graph, 'A')}")
    print(f"BFS –æ—Ç A: {bfs(graph, 'A')}")
    
    # –¢–µ—Å—Ç 6: –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å
    graph2 = {
        'A': ['B', 'C'],
        'B': ['D'],
        'C': ['D', 'E'],
        'D': ['E'],
        'E': []
    }
    
    print(f"\n–ì—Ä–∞—Ñ: {graph2}")
    print(f"–ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å A -> E: {shortest_path(graph2, 'A', 'E')}")
    
    print("\n" + "=" * 60)

