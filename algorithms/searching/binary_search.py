"""
üü¢ BINARY SEARCH (–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(1) - —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
- –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(log n)
- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(log n)

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 
- –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(1)
- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(log n) - –≥–ª—É–±–∏–Ω–∞ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –û—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
- –û—Å–Ω–æ–≤–∞ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞ "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π"
"""


def binary_search(arr, target):
    """
    üü¢ Junior level
    –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É –º–∞—Å—Å–∏–≤–∞
    2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å–∫–æ–º—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    3. –ï—Å–ª–∏ —Ä–∞–≤–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å
    4. –ï—Å–ª–∏ –º–µ–Ω—å—à–µ - –∏—â–µ–º –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
    5. –ï—Å–ª–∏ –±–æ–ª—å—à–µ - –∏—â–µ–º –≤ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ
    6. –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
    
    Args:
        arr: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        target: –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
        
    Returns:
        –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ -1 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        
    >>> binary_search([1, 3, 5, 7, 9, 11], 7)
    3
    >>> binary_search([1, 3, 5, 7, 9, 11], 6)
    -1
    """
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1


def binary_search_recursive(arr, target, left=0, right=None):
    """
    üü° Middle level
    –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    """
    if right is None:
        right = len(arr) - 1
    
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    if left > right:
        return -1
    
    mid = (left + right) // 2
    
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search_recursive(arr, target, mid + 1, right)
    else:
        return binary_search_recursive(arr, target, left, mid - 1)


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def binary_search_with_steps(arr, target):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    print(f"–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç {target} –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ {arr}")
    print("=" * 60)
    
    left, right = 0, len(arr) - 1
    step = 0
    
    while left <= right:
        step += 1
        mid = (left + right) // 2
        
        print(f"–®–∞–≥ {step}:")
        print(f"  –ì—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞: left={left}, right={right}")
        print(f"  –°—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç: arr[{mid}]={arr[mid]}")
        print(f"  –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º {arr[mid]} —Å {target}")
        
        if arr[mid] == target:
            print(f"  ‚úì –ù–∞–π–¥–µ–Ω! –≠–ª–µ–º–µ–Ω—Ç {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {mid}")
            return mid
        elif arr[mid] < target:
            print(f"  {arr[mid]} < {target}, –∏—â–µ–º –≤ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ")
            left = mid + 1
        else:
            print(f"  {arr[mid]} > {target}, –∏—â–µ–º –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ")
            right = mid - 1
        
        print(f"  –ù–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: left={left}, right={right}")
        if left <= right:
            print(f"  –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: {arr[left:right+1]}")
        print()
    
    print(f"‚úó –≠–ª–µ–º–µ–Ω—Ç {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ")
    return -1


# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ï–†–°–ò–ò
# ============================================================================

def find_first_occurrence(arr, target):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    
    >>> find_first_occurrence([1, 2, 2, 2, 3, 4], 2)
    1
    """
    left, right = 0, len(arr) - 1
    result = -1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            result = mid
            right = mid - 1  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return result


def find_last_occurrence(arr, target):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    
    >>> find_last_occurrence([1, 2, 2, 2, 3, 4], 2)
    3
    """
    left, right = 0, len(arr) - 1
    result = -1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            result = mid
            left = mid + 1  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return result


def find_closest_element(arr, target):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç, –±–ª–∏–∂–∞–π—à–∏–π –∫ —Ü–µ–ª–µ–≤–æ–º—É
    
    >>> find_closest_element([1, 3, 7, 10, 15], 8)
    7
    """
    left, right = 0, len(arr) - 1
    
    while left < right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return arr[mid]
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç
    if left > 0 and abs(arr[left - 1] - target) < abs(arr[left] - target):
        return arr[left - 1]
    return arr[left]


def count_occurrences(arr, target):
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–∞
    
    >>> count_occurrences([1, 2, 2, 2, 3, 4], 2)
    3
    """
    first = find_first_occurrence(arr, target)
    if first == -1:
        return 0
    
    last = find_last_occurrence(arr, target)
    return last - first + 1


# ============================================================================
# –ü–û–ò–°–ö –í –†–û–¢–ò–†–û–í–ê–ù–ù–û–ú –ú–ê–°–°–ò–í–ï
# ============================================================================

def search_rotated_array(arr, target):
    """
    üî¥ Senior level
    –ü–æ–∏—Å–∫ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
    
    >>> search_rotated_array([4, 5, 6, 7, 0, 1, 2], 0)
    4
    """
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return mid
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
        if arr[left] <= arr[mid]:
            # –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            if arr[left] <= target < arr[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:
            # –ü—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            if arr[mid] < target <= arr[right]:
                left = mid + 1
            else:
                right = mid - 1
    
    return -1


# ============================================================================
# –ü–û–ò–°–ö –í 2D –ú–ê–¢–†–ò–¶–ï
# ============================================================================

def search_2d_matrix(matrix, target):
    """
    üü° Middle level
    –ü–æ–∏—Å–∫ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π 2D –º–∞—Ç—Ä–∏—Ü–µ
    
    >>> matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]
    >>> search_2d_matrix(matrix, 3)
    True
    """
    if not matrix or not matrix[0]:
        return False
    
    rows, cols = len(matrix), len(matrix[0])
    left, right = 0, rows * cols - 1
    
    while left <= right:
        mid = (left + right) // 2
        mid_value = matrix[mid // cols][mid % cols]
        
        if mid_value == target:
            return True
        elif mid_value < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return False


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_binary_search():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("BINARY SEARCH - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
    test_arr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    target1 = 11
    print(f"\n–¢–µ—Å—Ç 1: –ò—â–µ–º {target1} –≤ {test_arr1}")
    result1 = binary_search(test_arr1, target1)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–Ω–¥–µ–∫—Å {result1}")
    
    # –¢–µ—Å—Ç 2: –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    test_arr2 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    target2 = 8
    print(f"\n–¢–µ—Å—Ç 2: –ò—â–µ–º {target2} –≤ {test_arr2}")
    result2 = binary_search(test_arr2, target2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # –¢–µ—Å—Ç 3: –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    test_arr3 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    target3 = 1
    print(f"\n–¢–µ—Å—Ç 3: –ò—â–µ–º {target3} –≤ {test_arr3}")
    result3 = binary_search(test_arr3, target3)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–Ω–¥–µ–∫—Å {result3}")
    
    # –¢–µ—Å—Ç 4: –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    test_arr4 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    target4 = 19
    print(f"\n–¢–µ—Å—Ç 4: –ò—â–µ–º {target4} –≤ {test_arr4}")
    result4 = binary_search(test_arr4, target4)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–Ω–¥–µ–∫—Å {result4}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï")
    print("=" * 60)
    binary_search_with_steps([1, 3, 5, 7, 9, 11, 13], 7)
    
    # –ü–æ–∏—Å–∫ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    print("\n" + "=" * 60)
    print("–ü–û–ò–°–ö –í –ú–ê–°–°–ò–í–ï –° –î–£–ë–õ–ò–ö–ê–¢–ê–ú–ò")
    print("=" * 60)
    
    test_arr5 = [1, 2, 2, 2, 3, 4, 5, 6, 7, 8]
    target5 = 2
    print(f"–ú–∞—Å—Å–∏–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {test_arr5}")
    print(f"–ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è {target5}:")
    print(f"–ü–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ: –∏–Ω–¥–µ–∫—Å {find_first_occurrence(test_arr5, target5)}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ: –∏–Ω–¥–µ–∫—Å {find_last_occurrence(test_arr5, target5)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π: {count_occurrences(test_arr5, target5)}")
    
    # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    test_arr6 = [1, 3, 7, 10, 15, 20, 25]
    target6 = 8
    print(f"\n–ë–ª–∏–∂–∞–π—à–∏–π –∫ {target6} –≤ {test_arr6}: {find_closest_element(test_arr6, target6)}")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# ============================================================================

def performance_analysis():
    """
    –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    import time
    import random
    
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    sizes = [1000, 10000, 100000, 1000000]
    
    print("–†–∞–∑–º–µ—Ä\t–õ–∏–Ω–µ–π–Ω—ã–π\t–ë–∏–Ω–∞—Ä–Ω—ã–π\t–£—Å–∫–æ—Ä–µ–Ω–∏–µ")
    print("-" * 50)
    
    for size in sizes:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        arr = sorted([random.randint(1, size * 2) for _ in range(size)])
        target = random.choice(arr)
        
        # –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫
        start = time.time()
        linear_search([i for i in range(size)], size - 1)
        linear_time = time.time() - start
        
        # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        start = time.time()
        binary_search([i for i in range(size)], size - 1)
        binary_time = time.time() - start
        
        speedup = linear_time / binary_time if binary_time > 0 else 0
        
        print(f"{size}\t{linear_time*1000:.3f}ms\t\t{binary_time*1000:.3f}ms\t\t{speedup:.1f}x")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
# ============================================================================

def practical_applications():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    print("1. –ü–æ–∏—Å–∫ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("   - –ò–Ω–¥–µ–∫—Å—ã –≤ SQL")
    print("   - –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É")
    
    print("\n2. –ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–∞—Ö:")
    print("   - –ü–æ–∏—Å–∫ –≤ –±–æ–ª—å—à–∏—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
    print("   - –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    print("\n3. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:")
    print("   - –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è")
    print("   - –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    print("\n4. –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
    print("   - –û—Å–Ω–æ–≤–∞ –¥–ª—è –º–Ω–æ–≥–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
    print("   - Merge Sort, Quick Sort")
    
    print("\n5. –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("   - –û—Å–Ω–æ–≤–∞ –¥–ª—è B-–¥–µ—Ä–µ–≤—å–µ–≤")
    print("   - Skip lists")
    
    print("\n6. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
    print("   - –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("   - –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ—Ç–≤–µ—Ç—É")


# ============================================================================
# –û–ë–©–ò–ï –û–®–ò–ë–ö–ò –ò –õ–û–í–£–®–ö–ò
# ============================================================================

def common_mistakes():
    """
    –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """
    print("\n" + "=" * 60)
    print("–û–ë–©–ò–ï –û–®–ò–ë–ö–ò –ò –õ–û–í–£–®–ö–ò")
    print("=" * 60)
    
    print("1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ —Ü–∏–∫–ª–∞:")
    print("   ‚ùå while left < right:")
    print("   ‚úÖ while left <= right:")
    
    print("\n2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–µ—Ä–µ–¥–∏–Ω—ã:")
    print("   ‚ùå mid = (left + right) / 2  # –ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ")
    print("   ‚úÖ mid = left + (right - left) // 2")
    
    print("\n3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã:")
    print("   ‚ùå right = mid")
    print("   ‚úÖ right = mid - 1")
    
    print("\n4. –ü–æ–∏—Å–∫ –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ:")
    print("   ‚ùå –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
    
    print("\n5. –û—à–∏–±–∫–∏ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:")
    print("   ‚ùå –ó–∞–±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞")
    print("   ‚úÖ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å 0 <= index < len(arr)")


# ============================================================================
# –í–ê–†–ò–ê–ù–¢–´ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================================================

def implementation_variants():
    """
    –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    print("\n" + "=" * 60)
    print("–í–ê–†–ò–ê–ù–¢–´ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    print("1. –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è vs –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è:")
    print("   - –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è: O(1) –ø–∞–º—è—Ç–∏, –±—ã—Å—Ç—Ä–µ–µ")
    print("   - –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è: O(log n) –ø–∞–º—è—Ç–∏, –ø—Ä–æ—â–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è")
    
    print("\n2. –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ/–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è:")
    print("   - –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")
    print("   - –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
    
    print("\n3. –ü–æ–∏—Å–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö:")
    print("   - –†–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã")
    print("   - 2D –º–∞—Ç—Ä–∏—Ü—ã")
    print("   - –ù–µ–ø–æ–ª–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã")


if __name__ == "__main__":
    demonstrate_binary_search()
    performance_analysis()
    practical_applications()
    common_mistakes()
    implementation_variants()
