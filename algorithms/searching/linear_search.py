"""
üü¢ LINEAR SEARCH (–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(1) - —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
- –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n) - —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n) - —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
- –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞–π–¥–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
"""


def linear_search(arr, target):
    """
    üü¢ Junior level
    –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å–∫–æ–º—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å
    4. –ï—Å–ª–∏ –Ω–µ—Ç - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    5. –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞
    
    Args:
        arr: –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        target: –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
        
    Returns:
        –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ -1 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        
    >>> linear_search([1, 3, 5, 7, 9], 5)
    2
    >>> linear_search([1, 3, 5, 7, 9], 6)
    -1
    """
    for i, val in enumerate(arr):
        if val == target:
            return i
    return -1


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def linear_search_with_steps(arr, target):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    print(f"–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç {target} –≤ –º–∞—Å—Å–∏–≤–µ {arr}")
    print("=" * 50)
    
    for i, val in enumerate(arr):
        print(f"–®–∞–≥ {i + 1}: –ü—Ä–æ–≤–µ—Ä—è–µ–º arr[{i}] = {val}")
        if val == target:
            print(f"‚úì –ù–∞–π–¥–µ–Ω! –≠–ª–µ–º–µ–Ω—Ç {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}")
            return i
        else:
            print(f"  {val} ‚â† {target}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫")
    
    print(f"‚úó –≠–ª–µ–º–µ–Ω—Ç {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ")
    return -1


# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ï–†–°–ò–ò
# ============================================================================

def linear_search_all_occurrences(arr, target):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    
    >>> linear_search_all_occurrences([1, 3, 5, 3, 7, 3], 3)
    [1, 3, 5]
    """
    indices = []
    for i, val in enumerate(arr):
        if val == target:
            indices.append(i)
    return indices


def linear_search_with_sentinel(arr, target):
    """
    –í–µ—Ä—Å–∏—è —Å –±–∞—Ä—å–µ—Ä–æ–º (sentinel) - –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–Ω–∏—Ü –º–∞—Å—Å–∏–≤–∞ –≤ —Ü–∏–∫–ª–µ
    """
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º sentinel
    arr_copy = arr.copy() + [target]
    
    i = 0
    while arr_copy[i] != target:
        i += 1
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º -1 –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ sentinel, –∏–Ω–∞—á–µ –∏–Ω–¥–µ–∫—Å
    return -1 if i == len(arr) else i


def linear_search_recursive(arr, target, index=0):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    if index >= len(arr):
        return -1
    
    # –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç
    if arr[index] == target:
        return index
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
    return linear_search_recursive(arr, target, index + 1)


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_linear_search():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("LINEAR SEARCH - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
    test_arr1 = [1, 3, 5, 7, 9, 11, 13]
    target1 = 7
    print(f"\n–¢–µ—Å—Ç 1: –ò—â–µ–º {target1} –≤ {test_arr1}")
    result1 = linear_search(test_arr1, target1)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–Ω–¥–µ–∫—Å {result1}")
    
    # –¢–µ—Å—Ç 2: –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    test_arr2 = [1, 3, 5, 7, 9, 11, 13]
    target2 = 6
    print(f"\n–¢–µ—Å—Ç 2: –ò—â–µ–º {target2} –≤ {test_arr2}")
    result2 = linear_search(test_arr2, target2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # –¢–µ—Å—Ç 3: –≠–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–µ
    test_arr3 = [5, 3, 8, 1, 9]
    target3 = 5
    print(f"\n–¢–µ—Å—Ç 3: –ò—â–µ–º {target3} –≤ {test_arr3}")
    result3 = linear_search(test_arr3, target3)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–Ω–¥–µ–∫—Å {result3}")
    
    # –¢–µ—Å—Ç 4: –≠–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ü–µ
    test_arr4 = [5, 3, 8, 1, 9]
    target4 = 9
    print(f"\n–¢–µ—Å—Ç 4: –ò—â–µ–º {target4} –≤ {test_arr4}")
    result4 = linear_search(test_arr4, target4)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–Ω–¥–µ–∫—Å {result4}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï")
    print("=" * 60)
    linear_search_with_steps([5, 2, 8, 1, 9], 8)
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
    print("\n" + "=" * 60)
    print("–ü–û–ò–°–ö –í–°–ï–• –í–•–û–ñ–î–ï–ù–ò–ô")
    print("=" * 60)
    
    test_arr5 = [1, 3, 5, 3, 7, 3, 9]
    target5 = 3
    print(f"–ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è {target5} –≤ {test_arr5}")
    result5 = linear_search_all_occurrences(test_arr5, target5)
    print(f"–ù–∞–π–¥–µ–Ω—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ö: {result5}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –í–ï–†–°–ò–ô")
    print("=" * 60)
    
    test_arr = [1, 3, 5, 7, 9, 11]
    target = 7
    print(f"–ú–∞—Å—Å–∏–≤: {test_arr}, –∏—â–µ–º: {target}")
    print(f"–û–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: {linear_search(test_arr, target)}")
    print(f"–° sentinel: {linear_search_with_sentinel(test_arr, target)}")
    print(f"–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è: {linear_search_recursive(test_arr, target)}")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# ============================================================================

def performance_analysis():
    """
    –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    import time
    import random
    
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    sizes = [1000, 10000, 100000]
    
    for size in sizes:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—Å–∏–≤
        arr = [random.randint(1, size * 2) for _ in range(size)]
        target = random.choice(arr)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        start = time.time()
        result = linear_search(arr, target)
        search_time = time.time() - start
        
        print(f"\n–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: {size}")
        print(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {result}")
        print(f"–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time*1000:.3f}ms")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {result + 1}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
    print("\n" + "=" * 40)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –° –ë–ò–ù–ê–†–ù–´–ú –ü–û–ò–°–ö–û–ú")
    print("=" * 40)
    
    sorted_arr = list(range(1000))
    target = 500
    
    # –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫
    start = time.time()
    linear_result = linear_search(sorted_arr, target)
    linear_time = time.time() - start
    
    # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–∏–º–∏—Ç–∞—Ü–∏—è)
    start = time.time()
    binary_result = sorted_arr.index(target)  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    binary_time = time.time() - start
    
    print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–º 1000, –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç 500:")
    print(f"–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫: {linear_time*1000:.3f}ms, {linear_result + 1} —Å—Ä–∞–≤–Ω–µ–Ω–∏–π")
    print(f"–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫: {binary_time*1000:.3f}ms, ~{10} —Å—Ä–∞–≤–Ω–µ–Ω–∏–π (log‚ÇÇ(1000))")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
# ============================================================================

def practical_applications():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    print("1. –ü–æ–∏—Å–∫ –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("   - –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ")
    print("   - –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∏–∑–º–µ–Ω—è—é—Ç—Å—è")
    
    print("\n2. –ú–∞–ª—ã–µ –º–∞—Å—Å–∏–≤—ã:")
    print("   - –î–ª—è n < 50 –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ")
    print("   - –ú–µ–Ω—å—à–µ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤")
    
    print("\n3. –ü–æ–∏—Å–∫ –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö:")
    print("   - –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –≤ linked list")
    print("   - –ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
    
    print("\n4. –ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–∞—Ö:")
    print("   - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞")
    print("   - –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ")
    
    print("\n5. –û—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("   - –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("   - –õ–µ–≥–∫–æ –ø–æ–Ω—è—Ç—å –∏ –æ—Ç–ª–∞–¥–∏—Ç—å")
    
    print("\n6. –û–Ω–ª–∞–π–Ω –∞–ª–≥–æ—Ä–∏—Ç–º—ã:")
    print("   - –ü–æ–∏—Å–∫ –≤ –ø–æ—Ç–æ–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    print("   - –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–∞–Ω–µ–µ")


# ============================================================================
# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ò –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò
# ============================================================================

def optimizations_examples():
    """
    –ü—Ä–∏–º–µ—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
    """
    print("\n" + "=" * 60)
    print("–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ò –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    print("1. –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥:")
    print("   - –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print("   - –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–¥–∫–∏")
    
    print("\n2. –ü–æ–∏—Å–∫ —Å –±–∞—Ä—å–µ—Ä–æ–º (Sentinel):")
    print("   - –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü")
    print("   - –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞–Ω–∏—Ü –≤ —Ü–∏–∫–ª–µ")
    
    print("\n3. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π:")
    print("   - –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –Ω–∞—Ö–æ–¥–∫–∏")
    print("   - –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã")
    
    print("\n4. –ü–æ–∏—Å–∫ —Å —É—Å–ª–æ–≤–∏–µ–º:")
    print("   - –ù–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ, –∞ –ª—é–±–æ–µ —É—Å–ª–æ–≤–∏–µ")
    print("   - –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —á–µ—Ç–Ω–æ–≥–æ, –ø–µ—Ä–≤–æ–≥–æ –±–æ–ª—å—à–µ 100, –∏ —Ç.–¥.")
    
    print("\n5. –ü–æ–∏—Å–∫ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:")
    print("   - –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞")
    print("   - –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è")


# ============================================================================
# –°–†–ê–í–ù–ï–ù–ò–ï –° –î–†–£–ì–ò–ú–ò –ê–õ–ì–û–†–ò–¢–ú–ê–ú–ò
# ============================================================================

def comparison_with_other_algorithms():
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –° –î–†–£–ì–ò–ú–ò –ê–õ–ì–û–†–ò–¢–ú–ê–ú–ò")
    print("=" * 60)
    
    print("–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ vs –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫:")
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞  ‚îÇ –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫  ‚îÇ –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫  ‚îÇ")
    print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
    print("‚îÇ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω.‚îÇ O(n)            ‚îÇ O(log n)        ‚îÇ")
    print("‚îÇ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è      ‚îÇ –õ—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ    ‚îÇ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ‚îÇ")
    print("‚îÇ –î–æ–ø. –ø–∞–º—è—Ç—å     ‚îÇ O(1)            ‚îÇ O(1)            ‚îÇ")
    print("‚îÇ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è      ‚îÇ –ü—Ä–æ—Å—Ç–∞—è         ‚îÇ –°—Ä–µ–¥–Ω—è—è         ‚îÇ")
    print("‚îÇ –°–∫–æ—Ä–æ—Å—Ç—å (n=1000‚îÇ ~500 —Å—Ä–∞–≤–Ω–µ–Ω–∏–π  ‚îÇ ~10 —Å—Ä–∞–≤–Ω–µ–Ω–∏–π   ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    
    print("\n–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫:")
    print("‚úì –ù–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("‚úì –ú–∞–ª—ã–µ –º–∞—Å—Å–∏–≤—ã (< 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
    print("‚úì –†–µ–¥–∫–∏–µ –ø–æ–∏—Å–∫–∏")
    print("‚úì –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏")
    
    print("\n–ö–æ–≥–¥–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫:")
    print("‚úó –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–π)")
    print("‚úó –ß–∞—Å—Ç—ã–µ –ø–æ–∏—Å–∫–∏ –≤ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö")
    print("‚úó –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")


if __name__ == "__main__":
    demonstrate_linear_search()
    performance_analysis()
    practical_applications()
    optimizations_examples()
    comparison_with_other_algorithms()