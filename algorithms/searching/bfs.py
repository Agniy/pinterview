"""
üü° BFS (BREADTH-FIRST SEARCH) - –ü–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- O(V + E) –≥–¥–µ V - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω, E - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- O(V) - —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—á–µ—Ä–µ–¥—å (FIFO)
- –ò–¥–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º, —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Å–æ—Å–µ–¥–∏, –ø–æ—Ç–æ–º —Å–æ—Å–µ–¥–∏ —Å–æ—Å–µ–¥–µ–π
- –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ (–¥–ª—è –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤)
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π, —É—Ä–æ–≤–Ω–µ–π
"""

from collections import deque


def bfs(graph, start):
    """
    üü° Middle level
    –ü–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≤–µ—Ä—à–∏–Ω—É –≤ –æ—á–µ—Ä–µ–¥—å
    2. –ü–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞:
       - –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—à–∏–Ω—É –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏
       - –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—É—é
       - –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
    
    Args:
        graph: –≥—Ä–∞—Ñ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è {–≤–µ—Ä—à–∏–Ω–∞: [—Å–æ—Å–µ–¥–∏]}
        start: –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞
        
    Returns:
        —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—à–∏–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –æ–±—Ö–æ–¥–∞ BFS
        
    >>> graph = {'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F'], 'D': [], 'E': [], 'F': []}
    >>> bfs(graph, 'A')
    ['A', 'B', 'C', 'D', 'E', 'F']
    """
    visited = set()
    queue = deque([start])
    visited.add(start)
    result = []
    
    while queue:
        vertex = queue.popleft()
        result.append(vertex)
        
        for neighbor in graph.get(vertex, []):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    
    return result


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def bfs_with_steps(graph, start):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    print(f"BFS –æ—Ç –≤–µ—Ä—à–∏–Ω—ã: {start}")
    print("=" * 50)
    
    visited = set()
    queue = deque([start])
    visited.add(start)
    result = []
    step = 0
    
    while queue:
        step += 1
        vertex = queue.popleft()
        result.append(vertex)
        
        print(f"–®–∞–≥ {step}:")
        print(f"  –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {vertex}")
        print(f"  –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å: {list(queue)}")
        print(f"  –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ: {visited}")
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        neighbors = graph.get(vertex, [])
        print(f"  –°–æ—Å–µ–¥–∏ {vertex}: {neighbors}")
        
        new_neighbors = []
        for neighbor in neighbors:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
                new_neighbors.append(neighbor)
        
        if new_neighbors:
            print(f"  –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: {new_neighbors}")
        
        print(f"  –ù–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å: {list(queue)}")
        print()
    
    print(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç BFS: {result}")
    return result


# ============================================================================
# –ö–†–ê–¢–ß–ê–ô–®–ò–ô –ü–£–¢–¨
# ============================================================================

def shortest_path(graph, start, end):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—à–∏–Ω–∞–º–∏
    
    >>> graph = {'A': ['B', 'C'], 'B': ['D'], 'C': ['D'], 'D': []}
    >>> shortest_path(graph, 'A', 'D')
    ['A', 'B', 'D']
    """
    if start == end:
        return [start]
    
    queue = deque([(start, [start])])
    visited = {start}
    
    while queue:
        vertex, path = queue.popleft()
        
        for neighbor in graph.get(vertex, []):
            if neighbor == end:
                return path + [neighbor]
            
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [neighbor]))
    
    return None  # –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω


def shortest_path_length(graph, start, end):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏
    """
    if start == end:
        return 0
    
    queue = deque([(start, 0)])
    visited = {start}
    
    while queue:
        vertex, distance = queue.popleft()
        
        for neighbor in graph.get(vertex, []):
            if neighbor == end:
                return distance + 1
            
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))
    
    return -1  # –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω


# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ï–†–°–ò–ò
# ============================================================================

def bfs_levels(graph, start):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—à–∏–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    
    >>> graph = {'A': ['B', 'C'], 'B': ['D'], 'C': ['D'], 'D': []}
    >>> bfs_levels(graph, 'A')
    [[['A'], ['B', 'C'], ['D']]]
    """
    visited = set()
    queue = deque([(start, 0)])
    visited.add(start)
    levels = defaultdict(list)
    levels[0] = [start]
    
    while queue:
        vertex, level = queue.popleft()
        
        for neighbor in graph.get(vertex, []):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, level + 1))
                levels[level + 1].append(neighbor)
    
    return [levels[i] for i in sorted(levels.keys())]


def bfs_components(graph):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è BFS
    """
    visited = set()
    components = []
    
    for vertex in graph:
        if vertex not in visited:
            component = bfs(graph, vertex)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ visited
            visited.update(component)
            components.append(component)
    
    return components


def bfs_bidirectional(graph, start, end):
    """
    –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π BFS –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
    """
    if start == end:
        return [start]
    
    # –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç start –∏ –æ—Ç end
    queue_start = deque([start])
    queue_end = deque([end])
    
    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π
    path_start = {start: [start]}
    path_end = {end: [end]}
    
    visited_start = {start}
    visited_end = {end}
    
    while queue_start and queue_end:
        # –ü–æ–∏—Å–∫ –æ—Ç start
        if queue_start:
            vertex = queue_start.popleft()
            
            for neighbor in graph.get(vertex, []):
                if neighbor in visited_end:
                    # –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    return path_start[vertex] + path_end[neighbor][::-1]
                
                if neighbor not in visited_start:
                    visited_start.add(neighbor)
                    queue_start.append(neighbor)
                    path_start[neighbor] = path_start[vertex] + [neighbor]
        
        # –ü–æ–∏—Å–∫ –æ—Ç end
        if queue_end:
            vertex = queue_end.popleft()
            
            for neighbor in graph.get(vertex, []):
                if neighbor in visited_start:
                    # –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    return path_start[neighbor] + path_end[vertex][::-1]
                
                if neighbor not in visited_end:
                    visited_end.add(neighbor)
                    queue_end.append(neighbor)
                    path_end[neighbor] = path_end[vertex] + [neighbor]
    
    return None


# ============================================================================
# BFS –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ì–†–ê–§–û–í
# ============================================================================

def bfs_matrix(matrix, start_row, start_col):
    """
    BFS –¥–ª—è 2D –º–∞—Ç—Ä–∏—Ü—ã (–ø–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ)
    """
    rows, cols = len(matrix), len(matrix[0])
    visited = set()
    queue = deque([(start_row, start_col, 0)])
    visited.add((start_row, start_col))
    
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    
    while queue:
        row, col, distance = queue.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã—Ö–æ–¥–∞)
        if matrix[row][col] == 'E':  # E - –≤—ã—Ö–æ–¥
            return distance
        
        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc
            
            if (0 <= new_row < rows and 0 <= new_col < cols and
                (new_row, new_col) not in visited and
                matrix[new_row][new_col] != '#'):  # # - —Å—Ç–µ–Ω–∞
                
                visited.add((new_row, new_col))
                queue.append((new_row, new_col, distance + 1))
    
    return -1  # –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω


def bfs_tree_levels(tree, root):
    """
    BFS –¥–ª—è –¥–µ—Ä–µ–≤–∞ - –æ–±—Ö–æ–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º
    """
    if not tree:
        return []
    
    result = []
    queue = deque([root])
    
    while queue:
        level_size = len(queue)
        level = []
        
        for _ in range(level_size):
            node = queue.popleft()
            level.append(node)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π –≤ –æ—á–µ—Ä–µ–¥—å
            for child in tree.get(node, []):
                queue.append(child)
        
        result.append(level)
    
    return result


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_bfs():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("BFS (BREADTH-FIRST SEARCH) - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
    graph = {
        'A': ['B', 'C'],
        'B': ['D', 'E'],
        'C': ['F'],
        'D': [],
        'E': ['F'],
        'F': []
    }
    
    print(f"–ì—Ä–∞—Ñ: {graph}")
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π BFS
    print(f"\n–¢–µ—Å—Ç 1: BFS –æ—Ç –≤–µ—Ä—à–∏–Ω—ã 'A'")
    result1 = bfs(graph, 'A')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    # –¢–µ—Å—Ç 2: –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å
    print(f"\n–¢–µ—Å—Ç 2: –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –æ—Ç 'A' –¥–æ 'F'")
    path = shortest_path(graph, 'A', 'F')
    print(f"–ü—É—Ç—å: {path}")
    print(f"–î–ª–∏–Ω–∞ –ø—É—Ç–∏: {len(path) - 1}")
    
    # –¢–µ—Å—Ç 3: –î–ª–∏–Ω–∞ –ø—É—Ç–∏
    print(f"\n–¢–µ—Å—Ç 3: –î–ª–∏–Ω–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –æ—Ç 'A' –¥–æ 'D'")
    length = shortest_path_length(graph, 'A', 'D')
    print(f"–î–ª–∏–Ω–∞: {length}")
    
    # –¢–µ—Å—Ç 4: –û–±—Ö–æ–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º
    print(f"\n–¢–µ—Å—Ç 4: –û–±—Ö–æ–¥ –ø–æ —É—Ä–æ–≤–Ω—è–º")
    levels = bfs_levels(graph, 'A')
    for i, level in enumerate(levels):
        print(f"–£—Ä–æ–≤–µ–Ω—å {i}: {level}")
    
    # –¢–µ—Å—Ç 5: –°–≤—è–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print(f"\n–¢–µ—Å—Ç 5: –°–≤—è–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    disconnected_graph = {
        'A': ['B'],
        'B': ['A'],
        'C': ['D'],
        'D': ['C'],
        'E': []
    }
    print(f"–ì—Ä–∞—Ñ: {disconnected_graph}")
    components = bfs_components(disconnected_graph)
    print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {components}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï")
    print("=" * 60)
    bfs_with_steps(graph, 'A')


# ============================================================================
# –°–†–ê–í–ù–ï–ù–ò–ï DFS –ò BFS
# ============================================================================

def compare_dfs_bfs():
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ DFS –∏ BFS
    """
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï DFS –ò BFS")
    print("=" * 60)
    
    graph = {
        'A': ['B', 'C'],
        'B': ['D', 'E'],
        'C': ['F'],
        'D': [],
        'E': ['F'],
        'F': []
    }
    
    print("–ì—Ä–∞—Ñ:")
    for vertex, neighbors in graph.items():
        print(f"  {vertex} -> {neighbors}")
    
    print(f"\nDFS –æ—Ç 'A': {dfs_recursive(graph, 'A')}")
    print(f"BFS –æ—Ç 'A': {bfs(graph, 'A')}")
    
    print("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞  ‚îÇ DFS             ‚îÇ BFS             ‚îÇ")
    print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
    print("‚îÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö‚îÇ –°—Ç–µ–∫            ‚îÇ –û—á–µ—Ä–µ–¥—å         ‚îÇ")
    print("‚îÇ –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥–∞  ‚îÇ –í–≥–ª—É–±—å          ‚îÇ –ü–æ —É—Ä–æ–≤–Ω—è–º      ‚îÇ")
    print("‚îÇ –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å ‚îÇ –ù–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω ‚îÇ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω    ‚îÇ")
    print("‚îÇ –ü–∞–º—è—Ç—å          ‚îÇ O(V)            ‚îÇ O(V)            ‚îÇ")
    print("‚îÇ –í—Ä–µ–º—è           ‚îÇ O(V + E)        ‚îÇ O(V + E)        ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò
# ============================================================================

def analyze_complexity():
    """
    –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    """
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò BFS")
    print("=" * 60)
    
    print("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
    print("- O(V + E) –≥–¥–µ V - –≤–µ—Ä—à–∏–Ω—ã, E - —Ä—ë–±—Ä–∞")
    print("- –ö–∞–∂–¥–∞—è –≤–µ—Ä—à–∏–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –æ–¥–∏–Ω —Ä–∞–∑")
    print("- –ö–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑")
    
    print("\n–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
    print("- O(V) - —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ")
    print("- O(V) - –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω")
    
    print("\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("- –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –¥–ª—è –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤")
    print("- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ —á–µ–º DFS (–æ—á–µ—Ä–µ–¥—å vs —Å—Ç–µ–∫)")
    print("- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
# ============================================================================

def practical_applications():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è BFS
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø BFS")
    print("=" * 60)
    
    print("1. –ö—Ä–∞—Ç—á–∞–π—à–∏–µ –ø—É—Ç–∏:")
    print("   - –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –≤ –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≥—Ä–∞—Ñ–µ")
    print("   - –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∏–≥—Ä–∞—Ö")
    print("   - –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã")
    
    print("\n2. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:")
    print("   - –ü–æ–∏—Å–∫ –ª—é–¥–µ–π –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ N")
    print("   - –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è")
    print("   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    print("\n3. –õ–∞–±–∏—Ä–∏–Ω—Ç—ã –∏ –∏–≥—Ä—ã:")
    print("   - –ü–æ–∏—Å–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞")
    print("   - –ò–ò –¥–ª—è –∏–≥—Ä")
    print("   - –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
    
    print("\n4. –°–µ—Ç–µ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:")
    print("   - –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
    print("   - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    print("   - –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø–æ–ª–æ–≥–∏–∏")
    
    print("\n5. –í–µ–±-–∫—Ä–∞—É–ª–µ—Ä—ã:")
    print("   - –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω–µ")
    print("   - –ö–æ–Ω—Ç—Ä–æ–ª—å –≥–ª—É–±–∏–Ω—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("   - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞")


def dfs_recursive(graph, start, visited=None):
    """–ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ DFS –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if visited is None:
        visited = set()
    
    visited.add(start)
    result = [start]
    
    for neighbor in graph.get(start, []):
        if neighbor not in visited:
            result.extend(dfs_recursive(graph, neighbor, visited))
    
    return result


if __name__ == "__main__":
    demonstrate_bfs()
    compare_dfs_bfs()
    analyze_complexity()
    practical_applications()
