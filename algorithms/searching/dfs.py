"""
üü° DFS (DEPTH-FIRST SEARCH) - –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- O(V + E) –≥–¥–µ V - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω, E - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(V) - –≥–ª—É–±–∏–Ω–∞ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤
- –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(V) - —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–µ–∫ (—è–≤–Ω—ã–π –∏–ª–∏ –Ω–µ—è–≤–Ω—ã–π)
- –ò–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ –ø–æ –æ–¥–Ω–æ–π –≤–µ—Ç–∫–µ
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–µ–π, —Ü–∏–∫–ª–æ–≤, —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
- –û—Å–Ω–æ–≤–∞ –¥–ª—è –º–Ω–æ–≥–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö
"""

from collections import defaultdict


def dfs_recursive(graph, start, visited=None):
    """
    üü° Middle level
    –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—à–∏–Ω—É –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—É—é
    2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—à–∏–Ω—É
    3. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ—Å–µ—â–∞–µ–º –≤—Å–µ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–æ—Å–µ–¥–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã
    
    Args:
        graph: –≥—Ä–∞—Ñ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è {–≤–µ—Ä—à–∏–Ω–∞: [—Å–æ—Å–µ–¥–∏]}
        start: –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞
        visited: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω
        
    Returns:
        —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—à–∏–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –æ–±—Ö–æ–¥–∞ DFS
        
    >>> graph = {'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F'], 'D': [], 'E': [], 'F': []}
    >>> dfs_recursive(graph, 'A')
    ['A', 'B', 'D', 'E', 'C', 'F']
    """
    if visited is None:
        visited = set()
    
    visited.add(start)
    result = [start]
    
    for neighbor in graph.get(start, []):
        if neighbor not in visited:
            result.extend(dfs_recursive(graph, neighbor, visited))
    
    return result


def dfs_iterative(graph, start):
    """
    –ü–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —è–≤–Ω—ã–π —Å—Ç–µ–∫ –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–∏
    """
    visited = set()
    stack = [start]
    result = []
    
    while stack:
        vertex = stack.pop()
        
        if vertex not in visited:
            visited.add(vertex)
            result.append(vertex)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
            for neighbor in reversed(graph.get(vertex, [])):
                if neighbor not in visited:
                    stack.append(neighbor)
    
    return result


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def dfs_with_steps(graph, start, visited=None, level=0):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    if visited is None:
        visited = set()
    
    indent = "  " * level
    print(f"{indent}–ü–æ—Å–µ—â–∞–µ–º –≤–µ—Ä—à–∏–Ω—É: {start}")
    print(f"{indent}–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {visited}")
    
    visited.add(start)
    result = [start]
    
    neighbors = graph.get(start, [])
    print(f"{indent}–°–æ—Å–µ–¥–∏ {start}: {neighbors}")
    
    for i, neighbor in enumerate(neighbors):
        if neighbor not in visited:
            print(f"{indent}–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å–µ–¥—É {i+1}/{len(neighbors)}: {neighbor}")
            result.extend(dfs_with_steps(graph, neighbor, visited, level + 1))
        else:
            print(f"{indent}–°–æ—Å–µ–¥ {neighbor} —É–∂–µ –ø–æ—Å–µ—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    print(f"{indent}–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ –≤–µ—Ä—à–∏–Ω—ã {start}")
    return result


# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ï–†–°–ò–ò
# ============================================================================

def dfs_path(graph, start, end, path=None):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –æ—Ç start –¥–æ end –∏—Å–ø–æ–ª—å–∑—É—è DFS
    
    >>> graph = {'A': ['B', 'C'], 'B': ['D'], 'C': ['D'], 'D': []}
    >>> dfs_path(graph, 'A', 'D')
    ['A', 'B', 'D']
    """
    if path is None:
        path = []
    
    path = path + [start]
    
    if start == end:
        return path
    
    for neighbor in graph.get(start, []):
        if neighbor not in path:  # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–≤
            new_path = dfs_path(graph, neighbor, end, path)
            if new_path:
                return new_path
    
    return None


def dfs_all_paths(graph, start, end, path=None):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø—É—Ç–∏ –æ—Ç start –¥–æ end
    """
    if path is None:
        path = []
    
    path = path + [start]
    
    if start == end:
        return [path]
    
    paths = []
    for neighbor in graph.get(start, []):
        if neighbor not in path:
            new_paths = dfs_all_paths(graph, neighbor, end, path)
            for new_path in new_paths:
                paths.append(new_path)
    
    return paths


def dfs_components(graph):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–≤—è–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥—Ä–∞—Ñ–∞
    """
    visited = set()
    components = []
    
    for vertex in graph:
        if vertex not in visited:
            component = dfs_recursive(graph, vertex, visited)
            components.append(component)
    
    return components


def dfs_cycle_detection(graph):
    """
    –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ü–∏–∫–ª—ã –≤ –≥—Ä–∞—Ñ–µ
    """
    def has_cycle(vertex, visited, rec_stack):
        visited.add(vertex)
        rec_stack.add(vertex)
        
        for neighbor in graph.get(vertex, []):
            if neighbor not in visited:
                if has_cycle(neighbor, visited, rec_stack):
                    return True
            elif neighbor in rec_stack:
                return True
        
        rec_stack.remove(vertex)
        return False
    
    visited = set()
    rec_stack = set()
    
    for vertex in graph:
        if vertex not in visited:
            if has_cycle(vertex, visited, rec_stack):
                return True
    
    return False


# ============================================================================
# DFS –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ì–†–ê–§–û–í
# ============================================================================

def dfs_tree(tree, root):
    """
    DFS –¥–ª—è –¥–µ—Ä–µ–≤–∞
    """
    result = []
    
    def traverse(node):
        if node is None:
            return
        result.append(node)
        for child in tree.get(node, []):
            traverse(child)
    
    traverse(root)
    return result


def dfs_matrix(matrix, start_row, start_col, visited=None):
    """
    DFS –¥–ª—è 2D –º–∞—Ç—Ä–∏—Ü—ã (–ø–æ–∏—Å–∫ –æ—Å—Ç—Ä–æ–≤–æ–≤, –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–≤)
    """
    if visited is None:
        visited = set()
    
    rows, cols = len(matrix), len(matrix[0])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
    if (start_row < 0 or start_row >= rows or 
        start_col < 0 or start_col >= cols or
        (start_row, start_col) in visited):
        return
    
    visited.add((start_row, start_col))
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ—Å–µ—â–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    for dr, dc in directions:
        dfs_matrix(matrix, start_row + dr, start_col + dc, visited)
    
    return visited


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_dfs():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("DFS (DEPTH-FIRST SEARCH) - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
    graph = {
        'A': ['B', 'C'],
        'B': ['D', 'E'],
        'C': ['F'],
        'D': [],
        'E': ['F'],
        'F': []
    }
    
    print(f"–ì—Ä–∞—Ñ: {graph}")
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π DFS
    print(f"\n–¢–µ—Å—Ç 1: DFS –æ—Ç –≤–µ—Ä—à–∏–Ω—ã 'A'")
    result1 = dfs_recursive(graph, 'A')
    print(f"–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: {result1}")
    
    result1_iter = dfs_iterative(graph, 'A')
    print(f"–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: {result1_iter}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø—É—Ç–∏
    print(f"\n–¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –æ—Ç 'A' –¥–æ 'F'")
    path = dfs_path(graph, 'A', 'F')
    print(f"–ü—É—Ç—å: {path}")
    
    # –¢–µ—Å—Ç 3: –í—Å–µ –ø—É—Ç–∏
    print(f"\n–¢–µ—Å—Ç 3: –í—Å–µ –ø—É—Ç–∏ –æ—Ç 'A' –¥–æ 'F'")
    all_paths = dfs_all_paths(graph, 'A', 'F')
    for i, path in enumerate(all_paths):
        print(f"–ü—É—Ç—å {i+1}: {path}")
    
    # –¢–µ—Å—Ç 4: –°–≤—è–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print(f"\n–¢–µ—Å—Ç 4: –°–≤—è–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    disconnected_graph = {
        'A': ['B'],
        'B': ['A'],
        'C': ['D'],
        'D': ['C'],
        'E': []
    }
    print(f"–ì—Ä–∞—Ñ: {disconnected_graph}")
    components = dfs_components(disconnected_graph)
    print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {components}")
    
    # –¢–µ—Å—Ç 5: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤
    print(f"\n–¢–µ—Å—Ç 5: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤")
    cyclic_graph = {
        'A': ['B'],
        'B': ['C'],
        'C': ['A']
    }
    print(f"–ì—Ä–∞—Ñ —Å —Ü–∏–∫–ª–æ–º: {cyclic_graph}")
    has_cycle = dfs_cycle_detection(cyclic_graph)
    print(f"–ï—Å—Ç—å —Ü–∏–∫–ª: {has_cycle}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï")
    print("=" * 60)
    dfs_with_steps(graph, 'A')


# ============================================================================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ì–†–ê–§–ê
# ============================================================================

def visualize_graph(graph):
    """
    –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞
    """
    print("\n" + "=" * 60)
    print("–í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ì–†–ê–§–ê")
    print("=" * 60)
    
    print("–ì—Ä–∞—Ñ:")
    for vertex, neighbors in graph.items():
        print(f"  {vertex} -> {neighbors}")
    
    print("\nASCII –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:")
    print("     A")
    print("    / \\")
    print("   B   C")
    print("  / \\   \\")
    print(" D   E   F")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò
# ============================================================================

def analyze_complexity():
    """
    –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    """
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò DFS")
    print("=" * 60)
    
    print("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
    print("- O(V + E) –≥–¥–µ V - –≤–µ—Ä—à–∏–Ω—ã, E - —Ä—ë–±—Ä–∞")
    print("- –ö–∞–∂–¥–∞—è –≤–µ—Ä—à–∏–Ω–∞ –ø–æ—Å–µ—â–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑")
    print("- –ö–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑")
    
    print("\n–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
    print("- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(V) - –≥–ª—É–±–∏–Ω–∞ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤")
    print("- –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(V) - —Ä–∞–∑–º–µ—Ä —è–≤–Ω–æ–≥–æ —Å—Ç–µ–∫–∞")
    print("- –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã: O(V)")
    
    print("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å BFS:")
    print("- DFS: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–µ–∫, –∏–¥–µ—Ç –≤–≥–ª—É–±—å")
    print("- BFS: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—á–µ—Ä–µ–¥—å, –∏–¥–µ—Ç –≤—à–∏—Ä—å")
    print("- –û–±–∞: O(V + E) –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
# ============================================================================

def practical_applications():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è DFS
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø DFS")
    print("=" * 60)
    
    print("1. –ü–æ–∏—Å–∫ –ø—É—Ç–µ–π:")
    print("   - –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—à–∏–Ω–∞–º–∏")
    print("   - –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π")
    print("   - –ü–æ–∏—Å–∫ –≥–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π")
    
    print("\n2. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤:")
    print("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–∏–∫–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ")
    print("   - –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    print("   - –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    print("\n3. –°–≤—è–∑–Ω–æ—Å—Ç—å:")
    print("   - –ü–æ–∏—Å–∫ —Å–≤—è–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞")
    print("   - –ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –∏ —Ç–æ—á–µ–∫ —Å–æ—á–ª–µ–Ω–µ–Ω–∏—è")
    
    print("\n4. –û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤—å–µ–≤:")
    print("   - Preorder, inorder, postorder –æ–±—Ö–æ–¥—ã")
    print("   - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
    print("   - –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤")
    
    print("\n5. –õ–∞–±–∏—Ä–∏–Ω—Ç—ã –∏ –∏–≥—Ä—ã:")
    print("   - –ü–æ–∏—Å–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞")
    print("   - –ò–≥—Ä—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (—à–∞—Ö–º–∞—Ç—ã, —Å—É–¥–æ–∫—É)")
    print("   - Backtracking –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
    
    print("\n6. –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã:")
    print("   - –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
    print("   - –û–±—Ö–æ–¥ AST (Abstract Syntax Tree)")
    print("   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞")


# ============================================================================
# –†–ï–ê–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´
# ============================================================================

def real_world_examples():
    """
    –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DFS
    """
    print("\n" + "=" * 60)
    print("–†–ï–ê–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´")
    print("=" * 60)
    
    print("1. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:")
    print("   - –ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ –æ–±—â–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö")
    print("   - –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤")
    print("   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π")
    
    print("\n2. –í–µ–±-–∫—Ä–∞—É–ª–µ—Ä—ã:")
    print("   - –û–±—Ö–æ–¥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ —Å—Å—ã–ª–∫–∞–º")
    print("   - –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å–∞–π—Ç–æ–≤")
    print("   - –ü–æ–∏—Å–∫ –º–µ—Ä—Ç–≤—ã—Ö —Å—Å—ã–ª–æ–∫")
    
    print("\n3. –§–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã:")
    print("   - –û–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    print("   - –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤")
    print("   - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫")
    
    print("\n4. –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã:")
    print("   - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤ —Å–µ—Ç—è—Ö")
    print("   - –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π")
    print("   - –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Å–µ—Ç–∏")


if __name__ == "__main__":
    demonstrate_dfs()
    visualize_graph({'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F'], 'D': [], 'E': ['F'], 'F': []})
    analyze_complexity()
    practical_applications()
    real_world_examples()