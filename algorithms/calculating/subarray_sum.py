"""
üü° SUBARRAY SUM (–ü–æ–∏—Å–∫ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- O(n) - –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–µ—â–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º –¥–≤–∞–∂–¥—ã

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ê–ª–≥–æ—Ä–∏—Ç–º —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ (sliding window)
- –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏–∫—É –¥–≤—É—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
"""


def subarray_sum(non_negative_arr, target):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ—Ö–Ω–∏–∫—É —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è: left –∏ right
    2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–∫–Ω–µ [left, right)
    3. –ï—Å–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ target - —Ä–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –≤–ø—Ä–∞–≤–æ
    4. –ï—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ target - —Å–∂–∏–º–∞–µ–º –æ–∫–Ω–æ —Å–ª–µ–≤–∞
    5. –ï—Å–ª–∏ —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ target - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
    
    Args:
        non_negative_arr: –º–∞—Å—Å–∏–≤ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
        target: —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞
        
    Returns:
        True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å —Å—É–º–º–æ–π target, –∏–Ω–∞—á–µ False
        
    >>> subarray_sum([1, 4, 20, 3, 10, 5], 33)
    True
    >>> subarray_sum([1, 4, 0, 0, 3, 10, 5], 7)
    True
    >>> subarray_sum([1, 4, 20, 3, 10, 5], 15)
    False
    """
    right, current_sum = 0, 0
    
    for left in range(len(non_negative_arr)):
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
        if left > 0:
            current_sum -= non_negative_arr[left - 1]
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –≤–ø—Ä–∞–≤–æ –ø–æ–∫–∞ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ target
        while right < len(non_negative_arr) and current_sum < target:
            current_sum += non_negative_arr[right]
            right += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º—ã
        if current_sum == target:
            return True
    
    return False


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def subarray_sum_with_steps(non_negative_arr, target):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    print(f"–ò—â–µ–º –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å —Å—É–º–º–æ–π {target} –≤ –º–∞—Å—Å–∏–≤–µ {non_negative_arr}")
    print("=" * 60)
    
    right, current_sum = 0, 0
    
    for left in range(len(non_negative_arr)):
        print(f"\n–ò—Ç–µ—Ä–∞—Ü–∏—è {left + 1}: left = {left}")
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
        if left > 0:
            print(f"  –£–±–∏—Ä–∞–µ–º arr[{left-1}] = {non_negative_arr[left-1]}")
            current_sum -= non_negative_arr[left - 1]
            print(f"  –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {current_sum}")
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –≤–ø—Ä–∞–≤–æ
        print(f"  –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ —Å right = {right}")
        while right < len(non_negative_arr) and current_sum < target:
            print(f"    –î–æ–±–∞–≤–ª—è–µ–º arr[{right}] = {non_negative_arr[right]}")
            current_sum += non_negative_arr[right]
            right += 1
            print(f"    –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {current_sum}, right = {right}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"  –û–∫–Ω–æ: [{left}:{right}] = {non_negative_arr[left:right]}")
        print(f"  –°—É–º–º–∞ –æ–∫–Ω–∞: {current_sum}")
        
        if current_sum == target:
            print(f"  ‚úì –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ {target}!")
            print(f"  –ü–æ–¥–º–∞—Å—Å–∏–≤: arr[{left}:{right}] = {non_negative_arr[left:right]}")
            return True
        elif current_sum > target:
            print(f"  –°—É–º–º–∞ {current_sum} > {target}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
        else:
            print(f"  –°—É–º–º–∞ {current_sum} < {target}, –Ω–æ –º–∞—Å—Å–∏–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
    
    print(f"\n‚úó –ü–æ–¥–º–∞—Å—Å–∏–≤ —Å —Å—É–º–º–æ–π {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return False


# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ï–†–°–ò–ò
# ============================================================================

def subarray_sum_with_indices(non_negative_arr, target):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
    """
    right, current_sum = 0, 0
    
    for left in range(len(non_negative_arr)):
        if left > 0:
            current_sum -= non_negative_arr[left - 1]
        
        while right < len(non_negative_arr) and current_sum < target:
            current_sum += non_negative_arr[right]
            right += 1
        
        if current_sum == target:
            return (left, right - 1)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    
    return None


def subarray_sum_all_occurrences(non_negative_arr, target):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
    """
    result = []
    right, current_sum = 0, 0
    
    for left in range(len(non_negative_arr)):
        if left > 0:
            current_sum -= non_negative_arr[left - 1]
        
        while right < len(non_negative_arr) and current_sum < target:
            current_sum += non_negative_arr[right]
            right += 1
        
        if current_sum == target:
            result.append((left, right - 1))
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫, —Å–¥–≤–∏–≥–∞—è –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã
    
    return result


def subarray_sum_min_length(non_negative_arr, target):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    """
    min_length = float('inf')
    result_indices = None
    right, current_sum = 0, 0
    
    for left in range(len(non_negative_arr)):
        if left > 0:
            current_sum -= non_negative_arr[left - 1]
        
        while right < len(non_negative_arr) and current_sum < target:
            current_sum += non_negative_arr[right]
            right += 1
        
        if current_sum == target:
            length = right - left
            if length < min_length:
                min_length = length
                result_indices = (left, right - 1)
    
    return result_indices if min_length != float('inf') else None


def subarray_sum_prefix_sums(non_negative_arr, target):
    """
    üü° Middle level
    –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–∏—Å–∫ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    2. –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏—â–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–∞—è —Å—É–º–º–∞ (prefix[i] - target)
    3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –ø–æ–¥–º–∞—Å—Å–∏–≤ –æ—Ç (prefix_sum_index + 1) –¥–æ i –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é —Å—É–º–º—É
    
    Args:
        non_negative_arr: –º–∞—Å—Å–∏–≤ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
        target: —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞
        
    Returns:
        True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–¥–º–∞—Å—Å–∏–≤ —Å —Å—É–º–º–æ–π target, –∏–Ω–∞—á–µ False
        
    >>> subarray_sum_prefix_sums([1, 4, 20, 3, 10, 5], 33)
    True
    >>> subarray_sum_prefix_sums([1, 4, 0, 0, 3, 10, 5], 7)
    True
    """
    prefix_sum = {0: -1}  # –°—É–º–º–∞ 0 –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ–º -1
    current_sum = 0
    
    for i, num in enumerate(non_negative_arr):
        current_sum += num
        
        # –ò—â–µ–º, –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å –ª–∏ —Ä–∞–Ω—å—à–µ —Å—É–º–º–∞ (current_sum - target)
        if current_sum - target in prefix_sum:
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        # –î–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
        if current_sum not in prefix_sum:
            prefix_sum[current_sum] = i
    
    return False


def subarray_sum_with_negative(arr, target):
    """
    –í–µ—Ä—Å–∏—è –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º
    """
    prefix_sum = {0: -1}  # –°—É–º–º–∞ 0 –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ–º -1
    current_sum = 0
    
    for i, num in enumerate(arr):
        current_sum += num
        
        # –ò—â–µ–º, –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å –ª–∏ —Ä–∞–Ω—å—à–µ —Å—É–º–º–∞ (current_sum - target)
        if current_sum - target in prefix_sum:
            start_idx = prefix_sum[current_sum - target] + 1
            return (start_idx, i)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É
        if current_sum not in prefix_sum:
            prefix_sum[current_sum] = i
    
    return None


def subarray_sum_prefix_sums_with_steps(non_negative_arr, target):
    """
    –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
    """
    print(f"–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ü–æ–∏—Å–∫ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Å —Å—É–º–º–æ–π {target} —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã")
    print(f"–ú–∞—Å—Å–∏–≤: {non_negative_arr}")
    print("=" * 70)
    
    prefix_sum = {0: -1}  # –°—É–º–º–∞ 0 –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–æ–º -1
    current_sum = 0
    
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:")
    print(f"  prefix_sum = {prefix_sum}")
    print(f"  current_sum = {current_sum}")
    print()
    
    for i, num in enumerate(non_negative_arr):
        print(f"–®–∞–≥ {i + 1}: arr[{i}] = {num}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–µ—Ñ–∏–∫—Å–Ω—É—é —Å—É–º–º—É
        current_sum += num
        print(f"  current_sum = {current_sum}")
        
        # –ò—â–µ–º –Ω—É–∂–Ω—É—é —Å—É–º–º—É
        needed_sum = current_sum - target
        print(f"  –ò—â–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—É—é —Å—É–º–º—É: {needed_sum}")
        print(f"  –¢–µ–∫—É—â–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã: {list(prefix_sum.keys())}")
        
        if needed_sum in prefix_sum:
            start_idx = prefix_sum[needed_sum] + 1
            print(f"  ‚úì –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–∞—è —Å—É–º–º–∞ {needed_sum} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {prefix_sum[needed_sum]}")
            print(f"  ‚úì –ü–æ–¥–º–∞—Å—Å–∏–≤ arr[{start_idx}:{i+1}] = {non_negative_arr[start_idx:i+1]}")
            print(f"  ‚úì –°—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞: {sum(non_negative_arr[start_idx:i+1])} = {target}")
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É
        if current_sum not in prefix_sum:
            prefix_sum[current_sum] = i
            print(f"  –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—É—é —Å—É–º–º—É {current_sum} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}")
        else:
            print(f"  –ü—Ä–µ—Ñ–∏–∫—Å–Ω–∞—è —Å—É–º–º–∞ {current_sum} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π prefix_sum: {prefix_sum}")
        print()
    
    print("‚úó –ü–æ–¥–º–∞—Å—Å–∏–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return False


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_subarray_sum():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("SUBARRAY SUM - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    test_arr1 = [1, 4, 20, 3, 10, 5]
    target1 = 33
    print(f"\n–¢–µ—Å—Ç 1: –ú–∞—Å—Å–∏–≤ {test_arr1}, –∏—â–µ–º —Å—É–º–º—É {target1}")
    result1 = subarray_sum(test_arr1, target1)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    # –¢–µ—Å—Ç 2: –° –Ω—É–ª—è–º–∏
    test_arr2 = [1, 4, 0, 0, 3, 10, 5]
    target2 = 7
    print(f"\n–¢–µ—Å—Ç 2: –ú–∞—Å—Å–∏–≤ {test_arr2}, –∏—â–µ–º —Å—É–º–º—É {target2}")
    result2 = subarray_sum(test_arr2, target2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    # –¢–µ—Å—Ç 3: –ù–µ –Ω–∞–π–¥–µ–Ω–æ
    test_arr3 = [1, 4, 20, 3, 10, 5]
    target3 = 15
    print(f"\n–¢–µ—Å—Ç 3: –ú–∞—Å—Å–∏–≤ {test_arr3}, –∏—â–µ–º —Å—É–º–º—É {target3}")
    result3 = subarray_sum(test_arr3, target3)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")
    
    # –¢–µ—Å—Ç 4: –û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
    test_arr4 = [5]
    target4 = 5
    print(f"\n–¢–µ—Å—Ç 4: –ú–∞—Å—Å–∏–≤ {test_arr4}, –∏—â–µ–º —Å—É–º–º—É {target4}")
    result4 = subarray_sum(test_arr4, target4)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    # –¢–µ—Å—Ç 5: –° –∏–Ω–¥–µ–∫—Å–∞–º–∏
    test_arr5 = [1, 4, 20, 3, 10, 5]
    target5 = 33
    print(f"\n–¢–µ—Å—Ç 5: –ú–∞—Å—Å–∏–≤ {test_arr5}, –∏—â–µ–º —Å—É–º–º—É {target5}")
    indices = subarray_sum_with_indices(test_arr5, target5)
    if indices:
        start, end = indices
        print(f"–ù–∞–π–¥–µ–Ω–æ: –∏–Ω–¥–µ–∫—Å—ã [{start}:{end+1}] = {test_arr5[start:end+1]}")
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –î–í–£–• –í–ê–†–ò–ê–ù–¢–û–í")
    print("=" * 60)
    
    test_arr = [1, 4, 20, 3, 10, 5]
    target = 33
    print(f"–ú–∞—Å—Å–∏–≤: {test_arr}, —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: {target}")
    print(f"–í–∞—Ä–∏–∞–Ω—Ç 1 (—Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ): {subarray_sum(test_arr, target)}")
    print(f"–í–∞—Ä–∏–∞–Ω—Ç 2 (–ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã): {subarray_sum_prefix_sums(test_arr, target)}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï - –í–ê–†–ò–ê–ù–¢ 1 (–°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ)")
    print("=" * 60)
    subarray_sum_with_steps([1, 4, 20, 3, 10, 5], 33)
    
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï - –í–ê–†–ò–ê–ù–¢ 2 (–ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã)")
    print("=" * 60)
    subarray_sum_prefix_sums_with_steps([1, 4, 20, 3, 10, 5], 33)


# ============================================================================
# –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# ============================================================================

def performance_analysis():
    """
    –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    import time
    import random
    
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    sizes = [100, 1000, 10000]
    
    for size in sizes:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—Å–∏–≤
        arr = [random.randint(1, 100) for _ in range(size)]
        target = random.randint(50, size * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        start = time.time()
        result = subarray_sum(arr, target)
        end = time.time()
        
        print(f"\n–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: {size}")
        print(f"–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: {target}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(end - start)*1000:.3f}ms")


# ============================================================================
# –°–†–ê–í–ù–ï–ù–ò–ï –° –î–†–£–ì–ò–ú–ò –ü–û–î–•–û–î–ê–ú–ò
# ============================================================================

def compare_approaches():
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏
    """
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –ü–û–î–•–û–î–û–í")
    print("=" * 60)
    
    print("1. –ù–∞–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–≤—Å–µ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã):")
    print("   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n¬≤)")
    print("   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã")
    print("   - –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –Ω–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è")
    
    print("\n2. –ê–ª–≥–æ—Ä–∏—Ç–º —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ (–í–∞—Ä–∏–∞–Ω—Ç 1):")
    print("   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n)")
    print("   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1)")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π")
    print("   - –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è: left –∏ right")
    
    print("\n3. –ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã (–í–∞—Ä–∏–∞–Ω—Ç 2):")
    print("   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n)")
    print("   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n)")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º")
    print("   - –ë–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
    print("   - –õ–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
    
    print("\n4. –•–µ—à-—Ç–∞–±–ª–∏—Ü–∞ (–¥–ª—è –ª—é–±—ã—Ö —á–∏—Å–µ–ª):")
    print("   - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n)")
    print("   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n)")
    print("   - –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
    print("   - –ê–Ω–∞–ª–æ–≥–∏—á–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç—É 2, –Ω–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
# ============================================================================

def practical_applications():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    print("1. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    print("   - –ü–æ–∏—Å–∫ –ø–µ—Ä–∏–æ–¥–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é")
    print("   - –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
    print("   - –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    print("\n2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
    print("   - –ü–æ–∏—Å–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏")
    print("   - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("   - –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    print("\n3. –ò–≥—Ä–æ–≤–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:")
    print("   - –ü–æ–∏—Å–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –∑–∞–¥–∞–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º")
    print("   - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫")
    print("   - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–∞")
    
    print("\n4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:")
    print("   - –ü–æ–∏—Å–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π")
    print("   - –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã—Ö")
    print("   - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")


# ============================================================================
# –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –¢–†–ï–ë–û–í–ê–ù–ò–Ø
# ============================================================================

def limitations_and_requirements():
    """
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("\n" + "=" * 60)
    print("–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –¢–†–ï–ë–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    print("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    print("‚úì –ú–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞")
    print("‚úì –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
    print("‚úì –ú–∞—Å—Å–∏–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    print("\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
    print("‚úó –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
    print("‚úó –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥–º–∞—Å—Å–∏–≤")
    print("‚úó –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ True/False (–Ω–µ –∏–Ω–¥–µ–∫—Å—ã)")
    
    print("\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:")
    print("- –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É")
    print("- –î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
    print("- –î–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é")


# ============================================================================
# –û–ë–©–ò–ï –û–®–ò–ë–ö–ò
# ============================================================================

def common_mistakes():
    """
    –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    print("\n" + "=" * 60)
    print("–û–ë–©–ò–ï –û–®–ò–ë–ö–ò")
    print("=" * 60)
    
    print("1. –ó–∞–±—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print("   ‚ùå –ê–ª–≥–æ—Ä–∏—Ç–º –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
    print("   ‚úÖ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    print("\n2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏:")
    print("   ‚ùå right –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞")
    print("   ‚úÖ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤ while —Ü–∏–∫–ª–µ")
    
    print("\n3. –ù–µ—Ç–æ—á–Ω–æ—Å—Ç—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É–º–º—ã:")
    print("   ‚ùå –ó–∞–±—ã–≤–∞–Ω–∏–µ –≤—ã—á–µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ left")
    print("   ‚úÖ –í—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ current_sum")
    
    print("\n4. –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:")
    print("   ‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ O(n¬≤)")
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ O(n)")


if __name__ == "__main__":
    demonstrate_subarray_sum()
    performance_analysis()
    compare_approaches()
    practical_applications()
    limitations_and_requirements()
    common_mistakes()
