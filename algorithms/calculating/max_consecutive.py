"""
üü° –ê–õ–ì–û–†–ò–¢–ú: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n)
–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1)

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:
- –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
- –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫ –∏ –º–∞—Å—Å–∏–≤–æ–≤
- –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ
"""


def get_next_dif_letter_idx(input_str, cur_letter_idx):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ.
    
    Args:
        input_str: –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        cur_letter_idx: –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
        
    Returns:
        –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        
    –ü—Ä–∏–º–µ—Ä:
        >>> get_next_dif_letter_idx("aaabbb", 0)
        3
        >>> get_next_dif_letter_idx("aaabbb", 3)
        6
    """
    next_letter_idx = cur_letter_idx
    while next_letter_idx < len(input_str) \
    and input_str[next_letter_idx] == input_str[cur_letter_idx]:
        next_letter_idx += 1
    return next_letter_idx


def max_consecutive_elements(input_str):
    """
    üü° Middle level
    –ù–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    
    –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) - –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–µ
    –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    
    Args:
        input_str: –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        
    Returns:
        –î–ª–∏–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
    –ü—Ä–∏–º–µ—Ä—ã:
        >>> max_consecutive_elements("aaabbbcc")
        3
        >>> max_consecutive_elements("a")
        1
        >>> max_consecutive_elements("")
        0
        >>> max_consecutive_elements("aabbbbcccc")
        4
    """
    if not input_str:
        return 0
        
    result, cur_letter_idx = 0, 0
    while cur_letter_idx < len(input_str):
        next_letter_idx = get_next_dif_letter_idx(input_str, cur_letter_idx)
        result = max(result, next_letter_idx - cur_letter_idx)
        cur_letter_idx = next_letter_idx
    return result


# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ï–†–°–ò–ò
# ============================================================================

def max_consecutive_with_char(input_str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –∏ —Å–∏–º–≤–æ–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    
    >>> max_consecutive_with_char("aaabbbcc")
    (3, 'a')
    """
    if not input_str:
        return (0, '')
    
    max_len = 0
    max_char = ''
    cur_idx = 0
    
    while cur_idx < len(input_str):
        next_idx = get_next_dif_letter_idx(input_str, cur_idx)
        length = next_idx - cur_idx
        
        if length > max_len:
            max_len = length
            max_char = input_str[cur_idx]
        
        cur_idx = next_idx
    
    return (max_len, max_char)


def all_consecutive_sequences(input_str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∏—Ö –¥–ª–∏–Ω–∞–º–∏.
    
    >>> all_consecutive_sequences("aaabbbcc")
    [('a', 3), ('b', 3), ('c', 2)]
    """
    if not input_str:
        return []
    
    sequences = []
    cur_idx = 0
    
    while cur_idx < len(input_str):
        next_idx = get_next_dif_letter_idx(input_str, cur_idx)
        length = next_idx - cur_idx
        sequences.append((input_str[cur_idx], length))
        cur_idx = next_idx
    
    return sequences


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_strings = [
        "aaabbbcc",
        "a",
        "",
        "aabbbbcccc",
        "aaaaaa",
        "abcdefg",
        "aaabbbaaabbbb"
    ]
    
    print("\n–¢–µ—Å—Ç 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    for s in test_strings:
        result = max_consecutive_elements(s)
        print(f"  '{s}' -> {result}")
    
    # –¢–µ—Å—Ç 2: –° —Å–∏–º–≤–æ–ª–æ–º
    print("\n–¢–µ—Å—Ç 2: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —Å–∏–º–≤–æ–ª–æ–º:")
    for s in test_strings[:4]:
        if s:
            length, char = max_consecutive_with_char(s)
            print(f"  '{s}' -> –¥–ª–∏–Ω–∞={length}, —Å–∏–º–≤–æ–ª='{char}'")
    
    # –¢–µ—Å—Ç 3: –í—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n–¢–µ—Å—Ç 3: –í—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    test_str = "aaabbbcc"
    sequences = all_consecutive_sequences(test_str)
    print(f"  '{test_str}' ->")
    for char, length in sequences:
        print(f"    '{char}' * {length}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print("\n–¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–æ–π —Å—Ç—Ä–æ–∫–µ:")
    import time
    
    large_str = "a" * 10000 + "b" * 5000 + "c" * 15000 + "d" * 1000
    start = time.time()
    result = max_consecutive_elements(large_str)
    end = time.time()
    
    print(f"  –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(large_str)}")
    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    print(f"  –í—Ä–µ–º—è: {(end - start)*1000:.2f}ms")
    
    print("\n" + "=" * 60)

