"""
üü¢ SELECTION SORT (–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤)
- –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n¬≤)
- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤)

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) - in-place –∞–ª–≥–æ—Ä–∏—Ç–º

–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –ù–µ—Ç (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
"""


def selection_sort(arr):
    """
    üü¢ Junior level
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º - –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –≤—ã–±–∏—Ä–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
    2. –ú–µ–Ω—è–µ–º –µ–≥–æ –º–µ—Å—Ç–∞–º–∏ —Å –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
    3. –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
    
    Args:
        arr: —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        
    >>> selection_sort([64, 25, 12, 22, 11])
    [11, 12, 22, 25, 64]
    """
    arr = arr.copy()
    n = len(arr)
    
    # –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª - –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º
    for i in range(n):
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏
        min_idx = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        
        # –ú–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ –ø–æ–∑–∏—Ü–∏–∏ i
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    
    return arr


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def selection_sort_with_steps(arr):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    arr = arr.copy()
    n = len(arr)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {arr}")
    print(f"–î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞: {n}")
    print("=" * 50)
    
    for i in range(n):
        print(f"\n–ò—Ç–µ—Ä–∞—Ü–∏—è {i + 1}:")
        print(f"  –ò—â–µ–º –º–∏–Ω–∏–º—É–º –≤ —á–∞—Å—Ç–∏ [{i}:{n}] = {arr[i:]}")
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        min_idx = i
        for j in range(i + 1, n):
            print(f"    –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º arr[{j}]={arr[j]} —Å —Ç–µ–∫—É—â–∏–º –º–∏–Ω–∏–º—É–º–æ–º arr[{min_idx}]={arr[min_idx]}")
            if arr[j] < arr[min_idx]:
                min_idx = j
                print(f"    –ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º: arr[{min_idx}]={arr[min_idx]}")
        
        print(f"  –ù–∞–π–¥–µ–Ω –º–∏–Ω–∏–º—É–º: arr[{min_idx}]={arr[min_idx]}")
        
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
        if min_idx != i:
            print(f"  –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ arr[{i}]={arr[i]} –∏ arr[{min_idx}]={arr[min_idx]}")
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
            print(f"  –ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞: {arr}")
        else:
            print(f"  –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ, –æ–±–º–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω")
        
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i + 1}: {arr}")
    
    print(f"\n–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {arr}")
    return arr


# ============================================================================
# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# ============================================================================

def selection_sort_optimized(arr):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –Ω–∞—Ö–æ–¥–∏—Ç –∏ –º–∏–Ω–∏–º—É–º, –∏ –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    """
    arr = arr.copy()
    n = len(arr)
    
    for i in range(n // 2):
        min_idx = i
        max_idx = n - 1 - i
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏
        for j in range(i, n - i):
            if arr[j] < arr[min_idx]:
                min_idx = j
            if arr[j] > arr[max_idx]:
                max_idx = j
        
        # –ú–µ–Ω—è–µ–º –º–∏–Ω–∏–º—É–º —Å –Ω–∞—á–∞–ª–æ–º
        if min_idx != i:
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
        
        # –ú–µ–Ω—è–µ–º –º–∞–∫—Å–∏–º—É–º —Å –∫–æ–Ω—Ü–æ–º (–µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω)
        if max_idx == i:
            max_idx = min_idx
        if max_idx != n - 1 - i:
            arr[n - 1 - i], arr[max_idx] = arr[max_idx], arr[n - 1 - i]
    
    return arr


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_selection_sort():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("SELECTION SORT - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    test_arr1 = [64, 25, 12, 22, 11]
    print(f"\n–¢–µ—Å—Ç 1: {test_arr1}")
    result1 = selection_sort(test_arr1)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    # –¢–µ—Å—Ç 2: –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr2 = [1, 2, 3, 4, 5]
    print(f"\n–¢–µ—Å—Ç 2 (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω): {test_arr2}")
    result2 = selection_sort(test_arr2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr3 = [5, 4, 3, 2, 1]
    print(f"\n–¢–µ—Å—Ç 3 (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫): {test_arr3}")
    result3 = selection_sort(test_arr3)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")
    
    # –¢–µ—Å—Ç 4: –ú–∞—Å—Å–∏–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    test_arr4 = [3, 1, 4, 1, 5, 9, 2, 6, 5]
    print(f"\n–¢–µ—Å—Ç 4 (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏): {test_arr4}")
    result4 = selection_sort(test_arr4)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ [5, 2, 8, 1, 9]")
    print("=" * 60)
    selection_sort_with_steps([5, 2, 8, 1, 9])
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –í–ï–†–°–ò–ï–ô")
    print("=" * 60)
    
    test_arr = [64, 34, 25, 12, 22, 11, 90]
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {test_arr}")
    print(f"–û–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: {selection_sort(test_arr)}")
    print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {selection_sort_optimized(test_arr)}")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò
# ============================================================================

def analyze_complexity():
    """
    –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    """
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–û–ô –°–õ–û–ñ–ù–û–°–¢–ò")
    print("=" * 60)
    
    print("Selection Sort –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç O(n¬≤) —Å—Ä–∞–≤–Ω–µ–Ω–∏–π:")
    print("- –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª: n –∏—Ç–µ—Ä–∞—Ü–∏–π")
    print("- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª: –≤ —Å—Ä–µ–¥–Ω–µ–º n/2 –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞ –∫–∞–∂–¥–æ–π –≤–Ω–µ—à–Ω–µ–π")
    print("- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: n √ó (n-1) / 2 = O(n¬≤)")
    print()
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–æ–≤: O(n) - –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω –æ–±–º–µ–Ω –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é")
    print()
    print("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print("- –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–æ–≤")
    print("- In-place –∞–ª–≥–æ—Ä–∏—Ç–º")
    print()
    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:")
    print("- –í—Å–µ–≥–¥–∞ O(n¬≤) —Å—Ä–∞–≤–Ω–µ–Ω–∏–π")
    print("- –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π")
    print("- –ú–µ–¥–ª–µ–Ω–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤")


if __name__ == "__main__":
    demonstrate_selection_sort()
    analyze_complexity()
