"""
üü° MERGE SORT (–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n log n)
- –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n log n)
- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n log n)

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) - —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏

–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –î–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ê–ª–≥–æ—Ä–∏—Ç–º "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π"
- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è O(n log n) —Å–ª–æ–∂–Ω–æ—Å—Ç—å
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –º–Ω–æ–≥–∏—Ö –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞—Ö (Timsort)
"""


def merge_sort(arr):
    """
    üü° Middle level
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º - —Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ø–æ–ª–∞–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    2. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–ª–æ–≤–∏–Ω—É
    3. –°–ª–∏–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
    
    Args:
        arr: —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        
    >>> merge_sort([38, 27, 43, 3, 9, 82, 10])
    [3, 9, 10, 27, 38, 43, 82]
    """
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    if len(arr) <= 1:
        return arr
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ø–æ–ª–∞–º
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    
    # –°–ª–∏–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    return merge(left, right)


def merge(left, right):
    """
    –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
    """
    result = []
    i = j = 0
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—å—à–∏–π
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
    result.extend(left[i:])
    result.extend(right[j:])
    
    return result


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def merge_sort_with_steps(arr, level=0):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    indent = "  " * level
    print(f"{indent}–í—ã–∑—ã–≤–∞–µ–º merge_sort({arr})")
    
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    if len(arr) <= 1:
        print(f"{indent}–ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {arr}")
        return arr
    
    # –†–∞–∑–¥–µ–ª—è–µ–º
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    
    print(f"{indent}–†–∞–∑–¥–µ–ª—è–µ–º: left={left}, right={right}")
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    sorted_left = merge_sort_with_steps(left, level + 1)
    sorted_right = merge_sort_with_steps(right, level + 1)
    
    # –°–ª–∏–≤–∞–µ–º
    result = merge_with_steps(sorted_left, sorted_right, level + 1)
    print(f"{indent}–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—è–Ω–∏—è: {result}")
    
    return result


def merge_with_steps(left, right, level=0):
    """
    –°–ª–∏—è–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º —à–∞–≥–æ–≤
    """
    indent = "  " * level
    print(f"{indent}–°–ª–∏–≤–∞–µ–º {left} –∏ {right}")
    
    result = []
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            print(f"{indent}  {left[i]} <= {right[j]}, –¥–æ–±–∞–≤–ª—è–µ–º {left[i]}")
            result.append(left[i])
            i += 1
        else:
            print(f"{indent}  {left[i]} > {right[j]}, –¥–æ–±–∞–≤–ª—è–µ–º {right[j]}")
            result.append(right[j])
            j += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
    if i < len(left):
        print(f"{indent}  –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∑ left: {left[i:]}")
        result.extend(left[i:])
    
    if j < len(right):
        print(f"{indent}  –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∑ right: {right[j:]}")
        result.extend(right[j:])
    
    print(f"{indent}  –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—è–Ω–∏—è: {result}")
    return result


# ============================================================================
# IN-PLACE –í–ï–†–°–ò–Ø
# ============================================================================

def merge_sort_inplace(arr, left=0, right=None):
    """
    In-place –≤–µ—Ä—Å–∏—è Merge Sort
    –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –ø–∞–º—è—Ç–∏: O(log n) –¥–ª—è —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤
    """
    if right is None:
        right = len(arr) - 1
    
    if left < right:
        mid = (left + right) // 2
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–≤–∏–Ω—ã
        merge_sort_inplace(arr, left, mid)
        merge_sort_inplace(arr, mid + 1, right)
        
        # –°–ª–∏–≤–∞–µ–º in-place
        merge_inplace(arr, left, mid, right)
    
    return arr


def merge_inplace(arr, left, mid, right):
    """
    In-place —Å–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π –º–∞—Å—Å–∏–≤–∞
    """
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
    left_arr = arr[left:mid + 1]
    right_arr = arr[mid + 1:right + 1]
    
    i = j = 0
    k = left
    
    # –°–ª–∏–≤–∞–µ–º
    while i < len(left_arr) and j < len(right_arr):
        if left_arr[i] <= right_arr[j]:
            arr[k] = left_arr[i]
            i += 1
        else:
            arr[k] = right_arr[j]
            j += 1
        k += 1
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
    while i < len(left_arr):
        arr[k] = left_arr[i]
        i += 1
        k += 1
    
    while j < len(right_arr):
        arr[k] = right_arr[j]
        j += 1
        k += 1


# ============================================================================
# –ò–¢–ï–†–ê–¢–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø
# ============================================================================

def merge_sort_iterative(arr):
    """
    –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è Merge Sort
    """
    arr = arr.copy()
    n = len(arr)
    
    # –†–∞–∑–º–µ—Ä –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ 2 —Ä–∞–∑–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    size = 1
    while size < n:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–º–∞—Å—Å–∏–≤—ã —Ä–∞–∑–º–µ—Ä–æ–º size
        for left in range(0, n, 2 * size):
            mid = min(left + size - 1, n - 1)
            right = min(left + 2 * size - 1, n - 1)
            
            # –°–ª–∏–≤–∞–µ–º –ø–æ–¥–º–∞—Å—Å–∏–≤—ã
            merge_iterative(arr, left, mid, right)
        
        size *= 2
    
    return arr


def merge_iterative(arr, left, mid, right):
    """
    –°–ª–∏—è–Ω–∏–µ –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    """
    left_arr = arr[left:mid + 1]
    right_arr = arr[mid + 1:right + 1]
    
    i = j = 0
    k = left
    
    while i < len(left_arr) and j < len(right_arr):
        if left_arr[i] <= right_arr[j]:
            arr[k] = left_arr[i]
            i += 1
        else:
            arr[k] = right_arr[j]
            j += 1
        k += 1
    
    while i < len(left_arr):
        arr[k] = left_arr[i]
        i += 1
        k += 1
    
    while j < len(right_arr):
        arr[k] = right_arr[j]
        j += 1
        k += 1


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_merge_sort():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("MERGE SORT - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    test_arr1 = [38, 27, 43, 3, 9, 82, 10]
    print(f"\n–¢–µ—Å—Ç 1: {test_arr1}")
    result1 = merge_sort(test_arr1)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    # –¢–µ—Å—Ç 2: –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr2 = [1, 2, 3, 4, 5]
    print(f"\n–¢–µ—Å—Ç 2 (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω): {test_arr2}")
    result2 = merge_sort(test_arr2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr3 = [5, 4, 3, 2, 1]
    print(f"\n–¢–µ—Å—Ç 3 (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫): {test_arr3}")
    result3 = merge_sort(test_arr3)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")
    
    # –¢–µ—Å—Ç 4: –ú–∞—Å—Å–∏–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    test_arr4 = [3, 1, 4, 1, 5, 9, 2, 6, 5]
    print(f"\n–¢–µ—Å—Ç 4 (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏): {test_arr4}")
    result4 = merge_sort(test_arr4)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ [6, 3, 8, 1]")
    print("=" * 60)
    merge_sort_with_steps([6, 3, 8, 1])
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –í–ï–†–°–ò–ô")
    print("=" * 60)
    
    test_arr = [64, 34, 25, 12, 22, 11, 90]
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {test_arr}")
    print(f"–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: {merge_sort(test_arr)}")
    print(f"In-place –≤–µ—Ä—Å–∏—è: {merge_sort_inplace(test_arr.copy())}")
    print(f"–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: {merge_sort_iterative(test_arr)}")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò
# ============================================================================

def analyze_complexity():
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò MERGE SORT")
    print("=" * 60)
    
    print("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
    print("- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞: O(log n) —É—Ä–æ–≤–Ω–µ–π")
    print("- –ù–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ: O(n) –æ–ø–µ—Ä–∞—Ü–∏–π —Å–ª–∏—è–Ω–∏—è")
    print("- –û–±—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n log n)")
    print()
    print("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
    print("- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(n) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏")
    print("- In-place –≤–µ—Ä—Å–∏—è: O(log n) –¥–ª—è —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤")
    print("- –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: O(n) –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤")
    print()
    print("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print("- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è O(n log n) —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    print("- –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    print("- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("- –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print()
    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:")
    print("- –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ O(n)")
    print("- –ù–µ in-place (–∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)")
    print("- –ú–µ–¥–ª–µ–Ω–Ω–µ–µ Quick Sort –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ")


# ============================================================================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –î–ï–†–ï–í–ê –†–ï–ö–£–†–°–ò–ò
# ============================================================================

def visualize_recursion_tree(arr):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
    """
    print("\n" + "=" * 60)
    print("–î–ï–†–ï–í–û –†–ï–ö–£–†–°–ò–ò")
    print("=" * 60)
    
    def print_tree(arr, level=0, side=""):
        indent = "  " * level
        if level > 0:
            indent += f"[{side}] "
        
        if len(arr) <= 1:
            print(f"{indent}–õ–∏—Å—Ç: {arr}")
            return
        
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]
        
        print(f"{indent}–†–∞–∑–¥–µ–ª—è–µ–º: {arr}")
        print_tree(left, level + 1, "L")
        print_tree(right, level + 1, "R")
    
    print_tree(arr)


# ============================================================================
# –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –í –†–ï–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß–ê–•
# ============================================================================

def real_world_examples():
    """
    –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    """
    print("\n" + "=" * 60)
    print("–ü–†–ò–ú–ï–ù–ï–ù–ò–ï –í –†–ï–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß–ê–•")
    print("=" * 60)
    
    print("1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:")
    print("   - External Merge Sort –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ RAM")
    print("   - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –±–ª–æ–∫–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ, —Å–ª–∏—è–Ω–∏–µ")
    
    print("\n2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤:")
    print("   - Merge Sort –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è linked list")
    print("   - O(1) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–ª–∏—è–Ω–∏—è")
    
    print("\n3. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:")
    print("   - –õ–µ–≥–∫–æ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–µ—Ç—Å—è")
    print("   - –ö–∞–∂–¥–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ")
    
    print("\n4. –ò–Ω–≤–µ—Ä—Å–∏–∏ –≤ –º–∞—Å—Å–∏–≤–µ:")
    print("   - –ü–æ–¥—Å—á–µ—Ç –∏–Ω–≤–µ—Ä—Å–∏–π —Å –ø–æ–º–æ—â—å—é –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Merge Sort")
    print("   - O(n log n) —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    
    print("\n5. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
    print("   - Timsort (Python) –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ Merge Sort")
    print("   - Java Arrays.sort() –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Merge Sort")


if __name__ == "__main__":
    demonstrate_merge_sort()
    analyze_complexity()
    visualize_recursion_tree([6, 3, 8, 1, 9, 2])
    real_world_examples()
