"""
üü° –ê–õ–ì–û–†–ò–¢–ú–´ –°–û–†–¢–ò–†–û–í–ö–ò - –í–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
- Bubble Sort, Selection Sort, Insertion Sort
- Merge Sort, Quick Sort
- Heap Sort
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
"""

import time
import random


# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´
# ============================================================================

"""
Q1: –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ?
A:
- O(n¬≤): Bubble, Selection, Insertion
- O(n log n): Merge, Quick, Heap
- O(n): Counting, Radix (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)

Q2: –ö–∞–∫–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ Python?
A: Timsort (–≥–∏–±—Ä–∏–¥ Merge Sort –∏ Insertion Sort), O(n log n)

Q3: –ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞?
A: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

Q4: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É in-place –∏ not in-place —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π?
A:
- In-place: —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ –º–µ—Å—Ç–µ, O(1) –ø–∞–º—è—Ç–∏
- Not in-place: —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, O(n) –ø–∞–º—è—Ç–∏
"""


# ============================================================================
# –ó–ê–î–ê–ß–ê 1: Bubble Sort (–ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
# ============================================================================

def bubble_sort(arr):
    """
    üü¢ Junior level
    –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - O(n¬≤)
    
    >>> bubble_sort([64, 34, 25, 12, 22, 11, 90])
    [11, 12, 22, 25, 34, 64, 90]
    """
    arr = arr.copy()
    n = len(arr)
    
    for i in range(n):
        swapped = False
        
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
        
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–±–º–µ–Ω–æ–≤, –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        if not swapped:
            break
    
    return arr


# ============================================================================
# –ó–ê–î–ê–ß–ê 2: Selection Sort (–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º)
# ============================================================================

def selection_sort(arr):
    """
    üü¢ Junior level
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º - O(n¬≤)
    
    >>> selection_sort([64, 25, 12, 22, 11])
    [11, 12, 22, 25, 64]
    """
    arr = arr.copy()
    n = len(arr)
    
    for i in range(n):
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º—É–º –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏
        min_idx = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    
    return arr


# ============================================================================
# –ó–ê–î–ê–ß–ê 3: Insertion Sort (–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏)
# ============================================================================

def insertion_sort(arr):
    """
    üü¢ Junior level
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ - O(n¬≤)
    –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ—á—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
    
    >>> insertion_sort([12, 11, 13, 5, 6])
    [5, 6, 11, 12, 13]
    """
    arr = arr.copy()
    
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        
        # –°–¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ key –≤–ø—Ä–∞–≤–æ
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        
        arr[j + 1] = key
    
    return arr


# ============================================================================
# –ó–ê–î–ê–ß–ê 4: Merge Sort (–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º)
# ============================================================================

def merge_sort(arr):
    """
    üü° Middle level
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º - O(n log n)
    –°—Ç–∞–±–∏–ª—å–Ω–∞—è, –Ω–µ in-place
    
    >>> merge_sort([38, 27, 43, 3, 9, 82, 10])
    [3, 9, 10, 27, 38, 43, 82]
    """
    if len(arr) <= 1:
        return arr
    
    # –†–∞–∑–¥–µ–ª—è–µ–º
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    
    # –°–ª–∏–≤–∞–µ–º
    return merge(left, right)


def merge(left, right):
    """–°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤"""
    result = []
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    
    result.extend(left[i:])
    result.extend(right[j:])
    
    return result


# ============================================================================
# –ó–ê–î–ê–ß–ê 5: Quick Sort (–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
# ============================================================================

def quick_sort(arr):
    """
    üü° Middle level
    –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - O(n log n) –≤ —Å—Ä–µ–¥–Ω–µ–º, O(n¬≤) –≤ —Ö—É–¥—à–µ–º
    In-place –≤–µ—Ä—Å–∏—è
    
    >>> quick_sort([10, 7, 8, 9, 1, 5])
    [1, 5, 7, 8, 9, 10]
    """
    arr = arr.copy()
    _quick_sort_helper(arr, 0, len(arr) - 1)
    return arr


def _quick_sort_helper(arr, low, high):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if low < high:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é pivot
        pi = partition(arr, low, high)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏
        _quick_sort_helper(arr, low, pi - 1)
        _quick_sort_helper(arr, pi + 1, high)


def partition(arr, low, high):
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ pivot"""
    pivot = arr[high]  # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ pivot
    i = low - 1
    
    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1


# –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (–Ω–µ in-place)
def quick_sort_compact(arr):
    """
    üü° Middle level
    –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è Quick Sort
    """
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quick_sort_compact(left) + middle + quick_sort_compact(right)


# ============================================================================
# –ó–ê–î–ê–ß–ê 6: Heap Sort (–ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
# ============================================================================

def heap_sort(arr):
    """
    üî¥ Senior level
    –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - O(n log n)
    In-place, –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
    
    >>> heap_sort([12, 11, 13, 5, 6, 7])
    [5, 6, 7, 11, 12, 13]
    """
    arr = arr.copy()
    n = len(arr)
    
    # –°—Ç—Ä–æ–∏–º max heap
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ heap
    for i in range(n - 1, 0, -1):
        arr[0], arr[i] = arr[i], arr[0]
        heapify(arr, i, 0)
    
    return arr


def heapify(arr, n, i):
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–µ–≤–æ —Å –∫–æ—Ä–Ω–µ–º i –≤ max heap"""
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2
    
    if left < n and arr[left] > arr[largest]:
        largest = left
    
    if right < n and arr[right] > arr[largest]:
        largest = right
    
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)


# ============================================================================
# –ó–ê–î–ê–ß–ê 7: Counting Sort (–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥—Å—á–µ—Ç–æ–º)
# ============================================================================

def counting_sort(arr):
    """
    üü° Middle level
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥—Å—á–µ—Ç–æ–º - O(n + k), –≥–¥–µ k - –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    
    >>> counting_sort([4, 2, 2, 8, 3, 3, 1])
    [1, 2, 2, 3, 3, 4, 8]
    """
    if not arr:
        return arr
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω
    max_val = max(arr)
    min_val = min(arr)
    range_size = max_val - min_val + 1
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã
    count = [0] * range_size
    for num in arr:
        count[num - min_val] += 1
    
    # –°—Ç—Ä–æ–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = []
    for i, freq in enumerate(count):
        result.extend([i + min_val] * freq)
    
    return result


# ============================================================================
# –ó–ê–î–ê–ß–ê 8: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á—É (Key Sort)
# ============================================================================

def sort_by_key_example():
    """
    üü¢ Junior level
    –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –∫–ª—é—á–æ–º
    """
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π
    students = [
        ("Alice", 25, 85),
        ("Bob", 22, 90),
        ("Charlie", 25, 80)
    ]
    
    print("–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É:")
    print(sorted(students, key=lambda x: x[1]))
    
    print("\n–ü–æ –æ—Ü–µ–Ω–∫–µ (—É–±—ã–≤–∞–Ω–∏–µ):")
    print(sorted(students, key=lambda x: x[2], reverse=True))
    
    print("\n–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –ø–æ—Ç–æ–º –æ—Ü–µ–Ω–∫–µ:")
    print(sorted(students, key=lambda x: (x[1], -x[2])))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
    people = [
        {'name': 'Alice', 'age': 30},
        {'name': 'Bob', 'age': 25},
        {'name': 'Charlie', 'age': 30}
    ]
    
    print("\n–°–ª–æ–≤–∞—Ä–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:")
    print(sorted(people, key=lambda x: x['age']))


# ============================================================================
# –ó–ê–î–ê–ß–ê 9: –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
# ============================================================================

def topological_sort(graph):
    """
    üî¥ Senior level
    –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∞
    
    graph: {node: [dependencies]}
    >>> graph = {'A': [], 'B': ['A'], 'C': ['A'], 'D': ['B', 'C']}
    >>> topological_sort(graph)
    ['A', 'B', 'C', 'D'] (–∏–ª–∏ ['A', 'C', 'B', 'D'])
    """
    visited = set()
    stack = []
    
    def dfs(node):
        visited.add(node)
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                dfs(neighbor)
        stack.append(node)
    
    for node in graph:
        if node not in visited:
            dfs(node)
    
    return stack[::-1]


# ============================================================================
# –ó–ê–î–ê–ß–ê 10: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# ============================================================================

def benchmark_sorting():
    """
    üü° Middle level
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    """
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sizes = [100, 500, 1000]
    algorithms = [
        ("Bubble Sort", bubble_sort),
        ("Selection Sort", selection_sort),
        ("Insertion Sort", insertion_sort),
        ("Merge Sort", merge_sort),
        ("Quick Sort", quick_sort),
        ("Heap Sort", heap_sort),
        ("Counting Sort", counting_sort),
        ("Built-in sorted()", sorted)
    ]
    
    print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
    print("-" * 60)
    
    for size in sizes:
        print(f"\n–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: {size}")
        arr = [random.randint(0, 1000) for _ in range(size)]
        
        for name, algo in algorithms:
            test_arr = arr.copy()
            
            start = time.time()
            result = algo(test_arr)
            end = time.time()
            
            print(f"  {name:20s}: {(end - start)*1000:.2f}ms")


# ============================================================================
# –ó–ê–î–ê–ß–ê 11: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
# ============================================================================

def sort_special_cases():
    """
    üü° Middle level
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    """
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ 0, 1, 2 (Dutch National Flag)
    def sort_012(arr):
        """O(n) –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å —Ç—Ä–µ–º—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        low = mid = 0
        high = len(arr) - 1
        
        while mid <= high:
            if arr[mid] == 0:
                arr[low], arr[mid] = arr[mid], arr[low]
                low += 1
                mid += 1
            elif arr[mid] == 1:
                mid += 1
            else:
                arr[mid], arr[high] = arr[high], arr[mid]
                high -= 1
        
        return arr
    
    print("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ 0, 1, 2:")
    print(sort_012([0, 1, 2, 0, 1, 2, 1, 0]))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    def sort_by_frequency(arr):
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏"""
        from collections import Counter
        counts = Counter(arr)
        return sorted(arr, key=lambda x: (-counts[x], x))
    
    print("\n–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ:")
    print(sort_by_frequency([4, 5, 6, 5, 4, 3, 4]))


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("–ê–õ–ì–û–†–ò–¢–ú–´ –°–û–†–¢–ò–†–û–í–ö–ò - –ü—Ä–∏–º–µ—Ä—ã –∏ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    
    test_arr = [64, 34, 25, 12, 22, 11, 90]
    
    # –¢–µ—Å—Ç –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    print(f"\n–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {test_arr}")
    
    print(f"\nBubble Sort:    {bubble_sort(test_arr)}")
    print(f"Selection Sort: {selection_sort(test_arr)}")
    print(f"Insertion Sort: {insertion_sort(test_arr)}")
    print(f"Merge Sort:     {merge_sort(test_arr)}")
    print(f"Quick Sort:     {quick_sort(test_arr)}")
    print(f"Heap Sort:      {heap_sort(test_arr)}")
    print(f"Counting Sort:  {counting_sort(test_arr)}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –∫–ª—é—á–æ–º
    print("\n" + "=" * 60)
    print("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –∫–ª—é—á–æ–º:")
    sort_by_key_example()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    print("\n" + "=" * 60)
    print("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏:")
    sort_special_cases()
    
    # Benchmark (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)
    print("\n" + "=" * 60)
    benchmark_sorting()
    
    print("\n" + "=" * 60)

