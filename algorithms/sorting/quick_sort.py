"""
üü° QUICK SORT (–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n log n) - –∫–æ–≥–¥–∞ pivot –¥–µ–ª–∏—Ç –º–∞—Å—Å–∏–≤ –ø–æ–ø–æ–ª–∞–º
- –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n log n)
- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤) - –∫–æ–≥–¥–∞ pivot –≤—Å–µ–≥–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log n) - –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏

–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –ù–µ—Ç (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ê–ª–≥–æ—Ä–∏—Ç–º "—Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π"
- In-place —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
- –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
- –í—ã–±–æ—Ä pivot –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""


def quick_sort(arr):
    """
    üü° Middle level
    –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - —Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π —Å pivot
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç pivot
    2. –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—å—à–µ –∏ –±–æ–ª—å—à–µ pivot
    3. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏
    4. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    Args:
        arr: —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        
    >>> quick_sort([10, 7, 8, 9, 1, 5])
    [1, 5, 7, 8, 9, 10]
    """
    arr = arr.copy()
    _quick_sort_helper(arr, 0, len(arr) - 1)
    return arr


def _quick_sort_helper(arr, low, high):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    """
    if low < high:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é pivot –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        pi = partition(arr, low, high)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ –∏ –ø–æ—Å–ª–µ pivot
        _quick_sort_helper(arr, low, pi - 1)
        _quick_sort_helper(arr, pi + 1, high)


def partition(arr, low, high):
    """
    –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ pivot (—Å—Ö–µ–º–∞ Lomuto)
    """
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ pivot
    pivot = arr[high]
    
    # –ò–Ω–¥–µ–∫—Å –º–µ–Ω—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è pivot)
    i = low - 1
    
    for j in range(low, high):
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω pivot
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    
    # –°—Ç–∞–≤–∏–º pivot –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def quick_sort_with_steps(arr, low=0, high=None, level=0):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    if high is None:
        high = len(arr) - 1
    
    indent = "  " * level
    print(f"{indent}quick_sort(arr={arr}, low={low}, high={high})")
    
    if low < high:
        print(f"{indent}–†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤ {arr[low:high+1]}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º
        pi = partition_with_steps(arr, low, high, level + 1)
        print(f"{indent}Pivot {arr[pi]} –≤ –ø–æ–∑–∏—Ü–∏–∏ {pi}")
        print(f"{indent}–ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {arr}")
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        print(f"{indent}–°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å {arr[low:pi]}")
        quick_sort_with_steps(arr, low, pi - 1, level + 1)
        
        print(f"{indent}–°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å {arr[pi+1:high+1]}")
        quick_sort_with_steps(arr, pi + 1, high, level + 1)
    else:
        print(f"{indent}–ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: {arr[low:high+1]}")


def partition_with_steps(arr, low, high, level=0):
    """
    –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º —à–∞–≥–æ–≤
    """
    indent = "  " * level
    pivot = arr[high]
    print(f"{indent}Pivot = {pivot}")
    
    i = low - 1
    print(f"{indent}i = {i} (–∏–Ω–¥–µ–∫—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ <= pivot)")
    
    for j in range(low, high):
        print(f"{indent}j={j}, arr[{j}]={arr[j]} vs pivot={pivot}")
        if arr[j] <= pivot:
            i += 1
            print(f"{indent}  arr[{j}] <= pivot, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º i –¥–æ {i}")
            if i != j:
                print(f"{indent}  –ú–µ–Ω—è–µ–º arr[{i}]={arr[i]} –∏ arr[{j}]={arr[j]}")
                arr[i], arr[j] = arr[j], arr[i]
                print(f"{indent}  –ú–∞—Å—Å–∏–≤: {arr}")
            else:
                print(f"{indent}  –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ")
        else:
            print(f"{indent}  arr[{j}] > pivot, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    # –°—Ç–∞–≤–∏–º pivot –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    i += 1
    print(f"{indent}–°—Ç–∞–≤–∏–º pivot –≤ –ø–æ–∑–∏—Ü–∏—é {i}")
    if i != high:
        print(f"{indent}–ú–µ–Ω—è–µ–º arr[{i}]={arr[i]} –∏ arr[{high}]={arr[high]}")
        arr[i], arr[high] = arr[high], arr[i]
        print(f"{indent}–§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤: {arr}")
    
    return i


# ============================================================================
# –†–ê–ó–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –í–´–ë–û–†–ê PIVOT
# ============================================================================

def quick_sort_first_pivot(arr):
    """
    Quick Sort —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ pivot
    """
    arr = arr.copy()
    _quick_sort_first_helper(arr, 0, len(arr) - 1)
    return arr


def _quick_sort_first_helper(arr, low, high):
    if low < high:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ pivot
        pivot = arr[low]
        i = low + 1
        j = high
        
        while i <= j:
            while i <= j and arr[i] <= pivot:
                i += 1
            while i <= j and arr[j] >= pivot:
                j -= 1
            if i < j:
                arr[i], arr[j] = arr[j], arr[i]
        
        # –°—Ç–∞–≤–∏–º pivot –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        arr[low], arr[j] = arr[j], arr[low]
        
        _quick_sort_first_helper(arr, low, j - 1)
        _quick_sort_first_helper(arr, j + 1, high)


def quick_sort_middle_pivot(arr):
    """
    Quick Sort —Å –≤—ã–±–æ—Ä–æ–º —Å—Ä–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ pivot
    """
    arr = arr.copy()
    _quick_sort_middle_helper(arr, 0, len(arr) - 1)
    return arr


def _quick_sort_middle_helper(arr, low, high):
    if low < high:
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ pivot
        mid = (low + high) // 2
        arr[mid], arr[high] = arr[high], arr[mid]  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
        
        pi = partition(arr, low, high)
        _quick_sort_middle_helper(arr, low, pi - 1)
        _quick_sort_middle_helper(arr, pi + 1, high)


def quick_sort_random_pivot(arr):
    """
    Quick Sort —Å –≤—ã–±–æ—Ä–æ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ pivot
    """
    import random
    arr = arr.copy()
    _quick_sort_random_helper(arr, 0, len(arr) - 1)
    return arr


def _quick_sort_random_helper(arr, low, high):
    if low < high:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ pivot
        pivot_idx = random.randint(low, high)
        arr[pivot_idx], arr[high] = arr[high], arr[pivot_idx]
        
        pi = partition(arr, low, high)
        _quick_sort_random_helper(arr, low, pi - 1)
        _quick_sort_random_helper(arr, pi + 1, high)


# ============================================================================
# –ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –í–ï–†–°–ò–Ø
# ============================================================================

def quick_sort_compact(arr):
    """
    üü° Middle level
    –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è Quick Sort (–Ω–µ in-place)
    """
    if len(arr) <= 1:
        return arr
    
    # –í—ã–±–∏—Ä–∞–µ–º pivot
    pivot = arr[len(arr) // 2]
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
    return quick_sort_compact(left) + middle + quick_sort_compact(right)


# ============================================================================
# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# ============================================================================

def quick_sort_optimized(arr):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ Insertion Sort –¥–ª—è –º–∞–ª—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
    """
    arr = arr.copy()
    _quick_sort_optimized_helper(arr, 0, len(arr) - 1)
    return arr


def _quick_sort_optimized_helper(arr, low, high):
    # –î–ª—è –º–∞–ª—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Insertion Sort
    if high - low < 10:
        insertion_sort_section(arr, low, high)
        return
    
    if low < high:
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞–Ω—É –∏–∑ —Ç—Ä–µ—Ö –∫–∞–∫ pivot
        mid = (low + high) // 2
        if arr[low] > arr[mid]:
            arr[low], arr[mid] = arr[mid], arr[low]
        if arr[mid] > arr[high]:
            arr[mid], arr[high] = arr[high], arr[mid]
        if arr[low] > arr[mid]:
            arr[low], arr[mid] = arr[mid], arr[low]
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–µ–¥–∏–∞–Ω—É –≤ –∫–æ–Ω–µ—Ü
        arr[mid], arr[high] = arr[high], arr[mid]
        
        pi = partition(arr, low, high)
        _quick_sort_optimized_helper(arr, low, pi - 1)
        _quick_sort_optimized_helper(arr, pi + 1, high)


def insertion_sort_section(arr, low, high):
    """
    Insertion Sort –¥–ª—è —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
    """
    for i in range(low + 1, high + 1):
        key = arr[i]
        j = i - 1
        while j >= low and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_quick_sort():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("QUICK SORT - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    test_arr1 = [10, 7, 8, 9, 1, 5]
    print(f"\n–¢–µ—Å—Ç 1: {test_arr1}")
    result1 = quick_sort(test_arr1)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    # –¢–µ—Å—Ç 2: –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr2 = [1, 2, 3, 4, 5]
    print(f"\n–¢–µ—Å—Ç 2 (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω): {test_arr2}")
    result2 = quick_sort(test_arr2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr3 = [5, 4, 3, 2, 1]
    print(f"\n–¢–µ—Å—Ç 3 (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫): {test_arr3}")
    result3 = quick_sort(test_arr3)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")
    
    # –¢–µ—Å—Ç 4: –ú–∞—Å—Å–∏–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    test_arr4 = [3, 1, 4, 1, 5, 9, 2, 6, 5]
    print(f"\n–¢–µ—Å—Ç 4 (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏): {test_arr4}")
    result4 = quick_sort(test_arr4)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ [5, 2, 8, 1, 9]")
    print("=" * 60)
    test_arr = [5, 2, 8, 1, 9]
    quick_sort_with_steps(test_arr.copy())
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤—ã–±–æ—Ä–∞ pivot
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô –í–´–ë–û–†–ê PIVOT")
    print("=" * 60)
    
    test_arr = [64, 34, 25, 12, 22, 11, 90]
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {test_arr}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç: {quick_sort(test_arr)}")
    print(f"–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {quick_sort_first_pivot(test_arr)}")
    print(f"–°—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç: {quick_sort_middle_pivot(test_arr)}")
    print(f"–°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {quick_sort_random_pivot(test_arr)}")
    print(f"–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è: {quick_sort_compact(test_arr)}")
    print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {quick_sort_optimized(test_arr)}")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò
# ============================================================================

def analyze_complexity():
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    """
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–°–¢–ò QUICK SORT")
    print("=" * 60)
    
    print("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
    print("- –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n log n) - pivot –¥–µ–ª–∏—Ç –º–∞—Å—Å–∏–≤ –ø–æ–ø–æ–ª–∞–º")
    print("- –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n log n)")
    print("- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤) - pivot –≤—Å–µ–≥–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π")
    print()
    print("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
    print("- O(log n) - –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏")
    print("- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n) - –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤—ã–±–æ—Ä–µ pivot")
    print()
    print("–§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print("- –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ pivot")
    print("- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    print("- –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞")
    print()
    print("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print("- –í —Å—Ä–µ–¥–Ω–µ–º –±—ã—Å—Ç—Ä–µ–µ Merge Sort")
    print("- In-place –∞–ª–≥–æ—Ä–∏—Ç–º")
    print("- –ö—ç—à-—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π")
    print()
    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:")
    print("- –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π")
    print("- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π O(n¬≤)")
    print("- –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –≤—ã–±–æ—Ä—É pivot")


# ============================================================================
# –ü–†–û–ë–õ–ï–ú–ê –•–£–î–®–ï–ì–û –°–õ–£–ß–ê–Ø
# ============================================================================

def demonstrate_worst_case():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–¥—à–µ–≥–æ —Å–ª—É—á–∞—è
    """
    print("\n" + "=" * 60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –•–£–î–®–ï–ì–û –°–õ–£–ß–ê–Ø")
    print("=" * 60)
    
    # –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    worst_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(f"–£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {worst_arr}")
    print("–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ pivot:")
    print("–ö–∞–∂–¥—ã–π pivot –±—É–¥–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º")
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: n + (n-1) + (n-2) + ... + 1 = n(n+1)/2 = O(n¬≤)")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π
    import time
    
    sizes = [100, 500, 1000]
    for size in sizes:
        # –•—É–¥—à–∏–π —Å–ª—É—á–∞–π
        worst_case = list(range(size))
        start = time.time()
        quick_sort_first_pivot(worst_case.copy())
        worst_time = time.time() - start
        
        # –õ—É—á—à–∏–π —Å–ª—É—á–∞–π (—Å–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—Å–∏–≤)
        import random
        random_case = list(range(size))
        random.shuffle(random_case)
        start = time.time()
        quick_sort(random_case.copy())
        random_time = time.time() - start
        
        print(f"\n–†–∞–∑–º–µ—Ä {size}:")
        print(f"  –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: {worst_time*1000:.2f}ms")
        print(f"  –°–ª—É—á–∞–π–Ω—ã–π:     {random_time*1000:.2f}ms")
        print(f"  –û—Ç–Ω–æ—à–µ–Ω–∏–µ:     {worst_time/random_time:.1f}x")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
# ============================================================================

def practical_recommendations():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 60)
    
    print("1. –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ pivot:")
    print("   - –°–ª—É—á–∞–π–Ω—ã–π pivot: —Ö–æ—Ä–æ—à –¥–ª—è –æ–±—â–µ–≥–æ —Å–ª—É—á–∞—è")
    print("   - –ú–µ–¥–∏–∞–Ω–∞ –∏–∑ —Ç—Ä–µ—Ö: –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
    print("   - –ò–∑–±–µ–≥–∞–π—Ç–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ/–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
    
    print("\n2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("   - –î–ª—è –º–∞–ª—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ (< 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤) –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Insertion Sort")
    print("   - Introsort: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Heap Sort –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏")
    print("   - –¢—Ä–µ—Ö—á–∞—Å—Ç–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")
    
    print("\n3. –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
    print("   - –ë–æ–ª—å—à–∏–µ –º–∞—Å—Å–∏–≤—ã —Å —Ö–æ—Ä–æ—à–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö")
    print("   - –ö–æ–≥–¥–∞ –≤–∞–∂–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ")
    print("   - In-place —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞")
    
    print("\n4. –ö–æ–≥–¥–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
    print("   - –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    print("   - –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è O(n log n) —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏")
    print("   - –ú–∞–ª–µ–Ω—å–∫–∏–µ –º–∞—Å—Å–∏–≤—ã")


if __name__ == "__main__":
    demonstrate_quick_sort()
    analyze_complexity()
    demonstrate_worst_case()
    practical_recommendations()
