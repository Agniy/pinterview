"""
üü¢ INSERTION SORT (–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏)

–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
- –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n) - –∫–æ–≥–¥–∞ –º–∞—Å—Å–∏–≤ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
- –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n¬≤)
- –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤) - –∫–æ–≥–¥–∞ –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) - in-place –∞–ª–≥–æ—Ä–∏—Ç–º

–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –î–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (–±—ã—Å—Ç—Ä–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—á—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –¥—Ä—É–≥–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (Timsort, Quick Sort)
"""


def insertion_sort(arr):
    """
    üü¢ Junior level
    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ - –≤—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –ë–µ—Ä–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
    2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–≥–æ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
    3. –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, —Å–¥–≤–∏–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    
    Args:
        arr: —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        
    >>> insertion_sort([12, 11, 13, 5, 6])
    [5, 6, 11, 12, 13]
    """
    arr = arr.copy()
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–Ω–¥–µ–∫—Å 1)
    for i in range(1, len(arr)):
        key = arr[i]  # –¢–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        j = i - 1     # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
        
        # –°–¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ key –≤–ø—Ä–∞–≤–æ
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º key –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        arr[j + 1] = key
    
    return arr


# ============================================================================
# –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï
# ============================================================================

def insertion_sort_with_steps(arr):
    """
    –í–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    arr = arr.copy()
    n = len(arr)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {arr}")
    print(f"–î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞: {n}")
    print("=" * 50)
    
    for i in range(1, n):
        key = arr[i]
        print(f"\n–ò—Ç–µ—Ä–∞—Ü–∏—è {i}:")
        print(f"  –í—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç arr[{i}]={key}")
        print(f"  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å: {arr[:i]}")
        print(f"  –ù–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å: {arr[i:]}")
        
        j = i - 1
        shifts = 0
        
        print(f"  –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {key}:")
        
        # –°–¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        while j >= 0 and arr[j] > key:
            print(f"    arr[{j}]={arr[j]} > {key}, —Å–¥–≤–∏–≥–∞–µ–º –≤–ø—Ä–∞–≤–æ")
            arr[j + 1] = arr[j]
            j -= 1
            shifts += 1
            print(f"    –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {arr}")
        
        if shifts > 0:
            print(f"    –°–¥–µ–ª–∞–Ω–æ {shifts} —Å–¥–≤–∏–≥–æ–≤")
        else:
            print(f"    –°–¥–≤–∏–≥–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        arr[j + 1] = key
        print(f"  –í—Å—Ç–∞–≤–ª—è–µ–º {key} –≤ –ø–æ–∑–∏—Ü–∏—é {j + 1}")
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏: {arr}")
    
    print(f"\n–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {arr}")
    return arr


# ============================================================================
# –†–ï–ö–£–†–°–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø
# ============================================================================

def insertion_sort_recursive(arr, n=None):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏
    """
    if n is None:
        n = len(arr)
    
    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    if n <= 1:
        return arr
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ n-1 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    insertion_sort_recursive(arr, n - 1)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    last = arr[n - 1]
    j = n - 2
    
    # –°–¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ last –≤–ø—Ä–∞–≤–æ
    while j >= 0 and arr[j] > last:
        arr[j + 1] = arr[j]
        j -= 1
    
    arr[j + 1] = last
    
    return arr


# ============================================================================
# –ë–ò–ù–ê–†–ù–ê–Ø –í–ï–†–°–ò–Ø
# ============================================================================

def binary_insertion_sort(arr):
    """
    –í–µ—Ä—Å–∏—è —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n¬≤) —Å—Ä–∞–≤–Ω–µ–Ω–∏–π, –Ω–æ –º–µ–Ω—å—à–µ —Å–¥–≤–∏–≥–æ–≤
    """
    arr = arr.copy()
    
    for i in range(1, len(arr)):
        key = arr[i]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        pos = binary_search_position(arr, key, 0, i - 1)
        
        # –°–¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        for j in range(i, pos, -1):
            arr[j] = arr[j - 1]
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        arr[pos] = key
    
    return arr


def binary_search_position(arr, key, left, right):
    """
    –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    """
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] <= key:
            left = mid + 1
        else:
            right = mid - 1
    
    return left


# ============================================================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def demonstrate_insertion_sort():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    print("=" * 60)
    print("INSERTION SORT - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    test_arr1 = [12, 11, 13, 5, 6]
    print(f"\n–¢–µ—Å—Ç 1: {test_arr1}")
    result1 = insertion_sort(test_arr1)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    # –¢–µ—Å—Ç 2: –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr2 = [1, 2, 3, 4, 5]
    print(f"\n–¢–µ—Å—Ç 2 (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω): {test_arr2}")
    result2 = insertion_sort(test_arr2)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr3 = [5, 4, 3, 2, 1]
    print(f"\n–¢–µ—Å—Ç 3 (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫): {test_arr3}")
    result3 = insertion_sort(test_arr3)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")
    
    # –¢–µ—Å—Ç 4: –ü–æ—á—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    test_arr4 = [1, 2, 4, 3, 5, 6, 8, 7, 9]
    print(f"\n–¢–µ—Å—Ç 4 (–ø–æ—á—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω): {test_arr4}")
    result4 = insertion_sort(test_arr4)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("–ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ [5, 2, 8, 1, 9]")
    print("=" * 60)
    insertion_sort_with_steps([5, 2, 8, 1, 9])
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    print("\n" + "=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –í–ï–†–°–ò–ô")
    print("=" * 60)
    
    test_arr = [64, 34, 25, 12, 22, 11, 90]
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {test_arr}")
    print(f"–û–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: {insertion_sort(test_arr)}")
    print(f"–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è: {insertion_sort_recursive(test_arr.copy())}")
    print(f"–ë–∏–Ω–∞—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è: {binary_insertion_sort(test_arr)}")


# ============================================================================
# –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# ============================================================================

def performance_analysis():
    """
    –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    import time
    import random
    
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    sizes = [100, 500, 1000]
    
    for size in sizes:
        print(f"\n–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: {size}")
        
        # –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—Å–∏–≤
        random_arr = [random.randint(1, 1000) for _ in range(size)]
        start = time.time()
        insertion_sort(random_arr.copy())
        random_time = time.time() - start
        
        # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        sorted_arr = list(range(size))
        start = time.time()
        insertion_sort(sorted_arr.copy())
        sorted_time = time.time() - start
        
        # –û–±—Ä–∞—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        reverse_arr = list(range(size, 0, -1))
        start = time.time()
        insertion_sort(reverse_arr.copy())
        reverse_time = time.time() - start
        
        print(f"  –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—Å–∏–≤: {random_time*1000:.2f}ms")
        print(f"  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:  {sorted_time*1000:.2f}ms")
        print(f"  –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: {reverse_time*1000:.2f}ms")
        print(f"  –û—Ç–Ω–æ—à–µ–Ω–∏–µ (—Å–ª—É—á–∞–π–Ω—ã–π/–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {random_time/sorted_time:.1f}x")


# ============================================================================
# –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
# ============================================================================

def practical_examples():
    """
    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    print("\n" + "=" * 60)
    print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    print("1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤:")
    print("   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è n < 50")
    print("   - –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è")
    print("   - –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    
    print("\n2. –ß–∞—Å—Ç—å –¥—Ä—É–≥–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:")
    print("   - Timsort –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Insertion Sort –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —á–∞—Å—Ç–µ–π")
    print("   - Quick Sort –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Insertion Sort –¥–ª—è –º–∞–ª—ã—Ö –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤")
    print("   - Hybrid —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    
    print("\n3. –û–Ω–ª–∞–π–Ω –∞–ª–≥–æ—Ä–∏—Ç–º—ã:")
    print("   - –ú–æ–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
    print("   - –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞–Ω–∏—è –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∑–∞—Ä–∞–Ω–µ–µ")
    
    print("\n4. –ü–æ—á—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print("   - –û—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö")
    print("   - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º")


if __name__ == "__main__":
    demonstrate_insertion_sort()
    performance_analysis()
    practical_examples()
